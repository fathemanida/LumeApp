<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - Lume</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Toastify CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="icon" href="/images/image.png" type="image/png">

    <style>
        :root {
            --theme-title-font: 'Poppins', sans-serif;
            --theme-body-font: 'Poppins', sans-serif;
            --theme-black: #111;
            --theme-gray: #666;
            --theme-highlight: #95951581;
            --theme-border: #e0e0e0;
            --dark-brown: #3a2c1a;
            --olive-green: #334411;
            --light-bg: #f9f5f0;
            --error-color: #dc3545;
            --success-color: #28a745;
        }

        body {
            font-family: var(--theme-body-font);
            font-weight: 400;
            font-size: 15px;
            line-height: 1.6;
            color: var(--dark-brown);
            background-color: #f0e9e0;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .main-container {
            display: flex;
            flex-direction: column;
            max-width: 1200px;
            margin: 80px auto 0;
            padding: 20px;
            gap: 20px;
        }

        .page-title {
            font-family: var(--theme-title-font);
            font-weight: 600;
            font-size: 1.75rem;
            color: var(--olive-green);
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid var(--theme-border);
            letter-spacing: -0.3px;
        }

        .order-items h3, .order-summary-card h3 {
            font-family: var(--theme-title-font);
            font-weight: 600;
            font-size: 1.4rem;
            color: var(--olive-green);
            margin-bottom: 1.25rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e0e0e0;
        }

        .order-actions {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-bottom: 20px;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: 500;
            font-family: var(--theme-body-font);
            text-decoration: none;
            transition: all 0.25s ease;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 6px;
        }

        .btn-outline-dark {
            background: transparent;
            border: 1px solid var(--dark-brown);
            color: var(--dark-brown);
        }

        .btn-outline-dark:hover {
            background-color: var(--dark-brown);
            color: white;
        }

        .btn-danger {
            background-color: var(--error-color);
            color: white;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background-color: #218838;
        }

        .order-summary-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
            font-size: 0.95rem;
        }

        .summary-item {
            background: white;
            padding: 1.25rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .summary-label {
            font-weight: 600;
            color: var(--olive-green);
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .summary-value {
            color: var(--dark-brown);
            line-height: 1.6;
        }

        .items-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1.5rem;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            font-size: 0.9rem;
        }

        .items-table th {
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 0.5px;
            padding: 12px 15px;
            background-color: #f8f9fa;
            color: var(--dark-brown);
            border-bottom: 2px solid #eee;
        }

        .items-table td {
            padding: 15px;
            vertical-align: middle;
            border-top: 1px solid #f0f0f0;
            color: var(--dark-brown);
        }

        .items-table tbody tr:hover {
            background-color: #f9f9f9;
        }

        .items-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: var(--olive-green);
        }

        .item-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
        }

        .price-original {
            text-decoration: line-through;
            color: var(--theme-gray);
            margin-right: 8px;
            font-size: 0.9em;
        }

        .price-discounted {
            color: var(--error-color);
            font-weight: 600;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        .status-badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
            text-transform: capitalize;
            letter-spacing: 0.3px;
        }

        @media (max-width: 768px) {
            .main-container {
                padding: 15px;
                margin-top: 70px;
            }
            
            .items-table {
                display: block;
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
                font-size: 0.85rem;
            }
            
            .page-title {
                font-size: 1.5rem;
                margin-bottom: 1.2rem;
            }
            
            .order-items h3, 
            .order-summary-card h3 {
                font-size: 1.2rem;
            }
            
            .summary-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
        }
        .custom-btn {
  border-radius: 0;
  outline: none;
  background-color: transparent;
  border: none;
  transition: background-color 0.3s ease;
}

.custom-btn:hover {
  background-color: olive;
  color: white; /* optional: for better contrast */
}

.custom-btn:focus {
  outline: none;
  box-shadow: none;
}

.custom-btn:not(:hover) {
  background-color: brown;
}
.custom-btn {
  border-radius: 0;
  outline: none;
  border: none;
  background-color: brown;
  color: white; /* Optional: ensure text is visible */
  transition: background-color 0.3s ease;
}

.custom-btn:hover {
  background-color: olive;
  color: white;
}

.custom-btn:focus {
  outline: none;
  box-shadow: none;
}
.custom-btn {
  border-radius: 0;
  border: none;
  outline: none;
  background-color: brown;
  color: white;
  transition: background-color 0.3s ease;
}

.custom-btn:hover {
  background-color: olive;
  color: white;
}

.custom-btn:focus {
  outline: none;
  box-shadow: none;
}



    </style>
</head>

<body>
    <!-- Header -->
        <div class="main-container">
            <%include('../partials/user/header.ejs') %>
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="page-title">Order Details</h1>
                <a href="/orders" class="btn btn-outline-dark">
                    <i class="fas fa-arrow-left me-2"></i>Back to Orders
                </a>
            </div>

            <% if (order) { // Define these variables once at the top to avoid redeclaration const
                canCancelOrder=!['cancelled', 'shipped' , 'delivered' ].includes(order.status.toLowerCase()); const
                canReturnOrder=order.status.toLowerCase()==='delivered' && !order.isReturned; %>


                <!-- Order Items -->
                <div class="order-items">
                    <h3 class="mb-4">Order Items</h3>
                    <div class="table-responsive">
                        <table class="items-table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% order.items.forEach(item=> {
                                    const canCancelItem = !['cancelled', 'shipped',
                                    'delivered'].includes(item.status.toLowerCase());
                                    const canReturnItem = item.status.toLowerCase() === 'delivered' && !item.isReturned;
                                    %>
                                    <tr>
                                        <td>
                                            <% if (order.items && order.items.length> 0) { %>
                                                <div
                                                    style="display: flex; flex-direction: column; align-items: center;">
                                                    <img src="/uploads/product/<%= item.productId.productImage[0] %>"
                                                        alt="<%= item.productId.productName %>" width="80" height="80"
                                                        style="object-fit: cover;">
                                                    <span
                                                        style="margin-top: 8px; font-size: 0.85rem; color: var(--theme-gray); text-align: center; max-width: 120px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                                        <%= item.productId.productName %>
                                                    </span>
                                                </div>


                                                <% } else { %>
                                                    <div
                                                        style="display: flex; flex-direction: column; align-items: center;">
                                                        <img src="/images/placeholder.png" alt="No image" width="80"
                                                            height="80" style="object-fit: cover;">
                                                        <span
                                                            style="margin-top: 8px; font-size: 0.85rem; color: var(--theme-gray);">Product
                                                            not found</span>
                                                    </div>
                                                    <% } %>
                                        </td>
                                        <td>
                                            <% if (item.originalPrice) { %>
                                                <span class="price-original">₹<%= item.originalPrice %></span>
                                                <% } %>
                                        </td>
                                        <td>
                                            <%= item.quantity %>
                                        </td>
                                        <td>₹<%= (item.finalPrice).toFixed(2) %>
                                        </td>
                                        <td>
                                            <span class="status-badge status-<%= item.status.toLowerCase() %>">
                                                <%= item.status %>

                                                    <% if (item.returnStatus==='Rejected' ) { %>
                                                        (Return Rejected)
                                                    <% } else if (item.isReturned) { %>
                                                        (Returned)
                                                    <% } %>
                                            </span>
                                        </td>

                                        <td class="text-center">
                                            <% if (canCancelItem) { %>
                                                <button class="btn btn-sm btn-outline-danger me-2 cancel-item-btn"
                                                data-item-id="<%= item._id %>"
                                                data-item-name="<%= item.productId.productName.replace(/"/g, '&quot;') %>"
                                                data-type="item">
                                              <i class="fas fa-times"></i> Cancel
                                                      </button>

                                                <% } %>
                                                    <% if (canReturnItem) { %>
                                                        <button class="btn btn-sm btn-outline-warning return-item-btn"
                                                            data-item-id="<%= item._id %>"
                                                             data-item-name="<%= item.productId.productName.replace(/"/g, '&quot;') %>"
                                                             data-type="item">
                                                            <i class="fas fa-undo"></i> Return
                                                        </button>
                                                        <% } %>

                                        </td>
                                    </tr>
                                    <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="order-summary-card">
                    <h3 class="mb-4">Order Summary</h3>
                    <div class="summary-grid">
                        <div class="summary-item">
                            <div class="summary-label">Order ID</div>
                            <div class="summary-value">
                                <%= order.orderId %>
                            </div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">Order Date</div>
                            <div class="summary-value">
                                <%= new Date(order.createdOn).toLocaleDateString('en-US', { year: 'numeric' ,
                                    month: 'long' , day: 'numeric' , hour: '2-digit' , minute: '2-digit' }) %>
                            </div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">Order Status</div>
                            <div class="summary-value">
                                <span class="status-badge status-<%= order.status.toLowerCase() %>">
                                    <%= order.status %>
                                </span>
                            </div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">Payment Method</div>
                            <div class="summary-value">
                                <%= order.paymentMethod %>
                            </div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">Payment Status</div>
                            <div class="summary-value">
                                <span class="status-badge status-<%= order.paymentStatus.toLowerCase() %>">
                                    <%= order.paymentStatus %>
                                </span>
                            </div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">Shipping Address</div>
                            <div class="summary-value">
                               <div class="shipping-details">
                                        <% if (order.address) { %>
                                            <p class="mb-1"><i class="fas fa-map-marker-alt me-2"></i><%= order.address.name %></p>
                                            <% if (order.address.roadArea) { %>
                                                <p class="mb-1"><i class="fas fa-road me-2"></i><%= order.address.roadArea %></p>
                                            <% } %>
                                            <% if (order.address.landMark) { %>
                                                <p class="mb-1"><i class="fas fa-map-pin me-2"></i><%= order.address.landMark %></p>
                                            <% } %>
                                            <p class="mb-1">
                                                <i class="fas fa-city me-2"></i>
                                                <%= order.address.city %>, <%= order.address.state %>, <%= order.address.pincode %>
                                            </p>
                                            <p class="mb-0"><i class="fas fa-phone me-2"></i><%= order.address.phone %></p>
                                            <% if (order.address.addressType) { %>
                                                <p class="mb-0 mt-1">
                                                    <span class="badge bg-secondary"><%= order.address.addressType %></span>
                                                </p>
                                            <% } %>
                                        <% } else { %>
                                            <p class="mb-0">No shipping address provided</p>
                                        <% } %>
                            </div>
                        </div>
                    </div>
                    
                           

                           

                          
                    <div class="summary-totals mt-4">
                        <div class="total-row">
                            <span>Subtotal:</span>
                            <span>₹<%= order.subtotal ? order.subtotal.toFixed(2) : '0.00' %></span>
                        </div>
                            <% if (order.offerDiscount && order.offerDiscount> 0) { %>
                            <div class="total-row">
                                <span>Offer Discount:</span>
                                <span class="text-danger">-₹<%= order.offerDiscount.toFixed(2) %></span>
                            </div>
                            <% } %>
                        <% if (order.couponDiscount && order.couponDiscount> 0) { %>
                            <div class="total-row">
                                <span>Coupon Discount:</span>
                                <span class="text-danger">-₹<%= order.couponDiscount.toFixed(2) %></span>
                            </div>
                            <% } %>
                         
                                <div class="total-row">
                                    <span>Shipping:</span>
                                    <span>₹<%= order.shipping ? order.shipping : '0.00' %></span>
                                </div>
                                <div class="total-row total-amount">
                                    <span>Total:</span>
                                    <span>₹<%= order.totalAmount ? order.totalAmount.toFixed(2) : '0.00' %></span>
                                </div>
                    </div>
                    <div class="order-actions mt-4">
                        <button class="ustom-btn me-2" onclick="window.print()">
                            <i class="fas fa-print me-2"></i>Print Invoice
                        </button>
                        <a href="/orders/<%= order._id %>/invoice" class="custom-btn me-2">">
                            <i class="fas fa-download me-2"></i>Download Invoice
                        </a>
                        <% if (canCancelOrder) { %>
                            <button class="custom-btn me-2 cancel-order-btn" data-item-id="<%= order._id %>"
                                data-item-name="Order #<%= order.orderId %>" data-type="order">
                                <i class="fas fa-times-circle me-2"></i>Cancel Order
                            </button>
                            <% } %>
                                <% if (canReturnOrder) { %>
                                    <button class="btn btn-outline-warning return-order-btn"
                                        data-item-id="<%= order._id %>" data-item-name="Order #<%= order.orderId %>"
                                        data-type="order">
                                        <i class="fas fa-undo me-2"></i>Request Return
                                    </button>
                                    <% } %>
                    </div>
                </div>
                <% } else { %>
                    <div class="alert alert-warning">
                        Order not found. Please check the order ID and try again.
                    </div>
                    <% } %>
        </div>


        <!-- Cancel Order Modal -->
        <div class="modal fade" id="cancelModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Cancellation</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to cancel <span id="cancelItemName">this item</span>?</p>
                        <div class="mb-3">
                            <label for="cancelReason" class="form-label">Reason for cancellation:</label>
                            <select class="form-select" id="cancelReason" required>
                                <option value="">Select a reason</option>
                                <option value="Changed my mind">Changed my mind</option>
                                <option value="Found a better price">Found a better price</option>
                                <option value="Item no longer needed">Item no longer needed</option>
                                <option value="Shipping takes too long">Shipping takes too long</option>
                                <option value="Other">Other (please specify)</option>
                            </select>
                        </div>
                        <div class="mb-3" id="otherCancelReasonContainer" style="display: none;">
                            <label for="otherCancelReason" class="form-label">Please specify:</label>
                            <input type="text" class="form-control" id="otherCancelReason">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-danger" id="confirmCancel">Confirm Cancellation</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Return Order Modal -->
        <div class="modal fade" id="returnModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Request Return</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>You are requesting a return for <span id="returnItemName">this item</span>.</p>
                        <div class="mb-3">
                            <label for="returnReason" class="form-label">Reason for return:</label>
                            <select class="form-select" id="returnReason" required>
                                <option value="">Select a reason</option>
                                <option value="Wrong item received">Wrong item received</option>
                                <option value="Item damaged or defective">Item damaged or defective</option>
                                <option value="Not as described">Not as described</option>
                                <option value="No longer needed">No longer needed</option>
                                <option value="Other">Other (please specify)</option>
                            </select>
                        </div>
                        <div class="mb-3" id="otherReturnReasonContainer" style="display: none;">
                            <label for="otherReturnReason" class="form-label">Please specify:</label>
                            <input type="text" class="form-control" id="otherReturnReason">
                        </div>
                        <div class="mb-3">
                            <label for="returnNotes" class="form-label">Additional Notes (optional):</label>
                            <textarea class="form-control" id="returnNotes" rows="3"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-warning" id="confirmReturn">Submit Return Request</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Bootstrap JS Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        <!-- Include SweetAlert2 -->
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <!-- Include Toastify -->
        <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
        <!-- SweetAlert2 Theme -->
        <style>
            .swal2-popup {
                background: #1e1e1e;
                color: #e0e0e0;
                border: 1px solid #333;
            }

            .swal2-title,
            .swal2-content {
                color: #e0e0e0 !important;
            }

            .swal2-confirm {
                background-color: #6c5ce7 !important;
            }

            .swal2-cancel {
                background-color: #dc3545 !important;
            }
        </style>

        <script>
            // Variables to store the current action context
            let currentAction = {
                type: '', // 'order' or 'item'
                id: '',   // orderId or itemId
                name: ''  // Display name for the item/order
            };

            // Show cancel modal
            function showCancelModal(id, name, type) {
                currentAction = { type, id, name };
                const modal = new bootstrap.Modal(document.getElementById('cancelModal'));
                const itemText = type === 'item' ? 'item' : 'order';
                document.getElementById('cancelItemName').textContent = type === 'item' ? name : `Order #${name}`;
                modal.show();
            }

            // Show return modal
            function showReturnModal(id, name, type) {
                currentAction = { type, id, name };
                const modal = new bootstrap.Modal(document.getElementById('returnModal'));
                document.getElementById('returnItemName').textContent = type === 'item' ? name : `Order #${name}`;
                modal.show();
            }

            // Handle cancel confirmation
            document.getElementById('confirmCancel').addEventListener('click', function () {
                const reason = document.getElementById('cancelReason').value;
                const otherReason = document.getElementById('otherCancelReason').value;
                const finalReason = reason === 'Other' ? otherReason : reason;

                if (!reason) {
                    showToast('Please select a reason for cancellation', false);
                    return;
                }

                const { type, id } = currentAction;
                const url = type === 'item'
                    ? `/orders/<%= order._id %>/items/${id}/cancel`
                    : `/orders/${id}/cancel`;

                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ reason: finalReason })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast(data.message || 'Cancellation request submitted successfully', true);
                            const modal = bootstrap.Modal.getInstance(document.getElementById('cancelModal'));
                            if (modal) modal.hide();
                            setTimeout(() => window.location.reload(), 1500);
                        } else {
                            showToast(data.message || 'Failed to process cancellation', false);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('An error occurred while processing your request', false);
                    });
            });

            // Handle return confirmation
            document.getElementById('confirmReturn').addEventListener('click', function () {
                const reason = document.getElementById('returnReason').value;
                const otherReason = document.getElementById('otherReturnReason').value;
                const notes = document.getElementById('returnNotes').value;
                const finalReason = reason === 'Other' ? otherReason : reason;

                if (!reason) {
                    showToast('Please select a reason for return', false);
                    return;
                }

                const { type, id } = currentAction;
                const url = type === 'item'
                    ? `/orders/<%= order._id %>/items/${id}/return`
                    : `/orders/${id}/return`;

                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        reason: finalReason,
                        notes: notes || undefined
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast(data.message || 'Return request submitted successfully', true);
                            const modal = bootstrap.Modal.getInstance(document.getElementById('returnModal'));
                            if (modal) modal.hide();
                            setTimeout(() => window.location.reload(), 1500);
                        } else {
                            showToast(data.message || 'Failed to process return request', false);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('An error occurred while processing your request', false);
                    });
            });

            // Show/hide other reason input based on selection
            document.getElementById('cancelReason').addEventListener('change', function () {
                const otherContainer = document.getElementById('otherCancelReasonContainer');
                otherContainer.style.display = this.value === 'Other' ? 'block' : 'none';
            });

            document.getElementById('returnReason').addEventListener('change', function () {
                const otherContainer = document.getElementById('otherReturnReasonContainer');
                otherContainer.style.display = this.value === 'Other' ? 'block' : 'none';
            });

            // Reset modals when hidden using Bootstrap 5 event
            const cancelModal = document.getElementById('cancelModal');
            const returnModal = document.getElementById('returnModal');

            if (cancelModal) {
                cancelModal.addEventListener('hidden.bs.modal', function () {
                    const form = this.querySelector('form');
                    if (form) form.reset();
                    this.querySelectorAll('[id$=ReasonContainer]').forEach(el => el.style.display = 'none');
                    currentAction = { type: '', id: '', name: '' };
                });
            }

            if (returnModal) {
                returnModal.addEventListener('hidden.bs.modal', function () {
                    const form = this.querySelector('form');
                    if (form) form.reset();
                    this.querySelectorAll('[id$=ReasonContainer]').forEach(el => el.style.display = 'none');
                    currentAction = { type: '', id: '', name: '' };
                });
            }

            // Show toast message
            function showToast(message, isSuccess) {
                Toastify({
                    text: message,
                    duration: 3000,
                    close: true,
                    gravity: "top",
                    position: 'right',
                    backgroundColor: isSuccess ? "#28a745" : "#dc3545"
                }).showToast();
            }
        </script>
        <script>
            // Add event listeners when the DOM is fully loaded
            document.addEventListener('DOMContentLoaded', function () {
                // Handle cancel item buttons
                document.querySelectorAll('.cancel-item-btn, .cancel-order-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        const itemId = this.getAttribute('data-item-id');
                        const itemName = this.getAttribute('data-item-name');
                        const type = this.getAttribute('data-type') || 'item';
                        showCancelModal(itemId, itemName, type);
                    });
                });

                // Handle return item buttons
                document.querySelectorAll('.return-item-btn, .return-order-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        const itemId = this.getAttribute('data-item-id');
                        const itemName = this.getAttribute('data-item-name');
                        const type = this.getAttribute('data-type') || 'item';
                        showReturnModal(itemId, itemName, type);
                    });
                });
            });

            // Function to show toast messages
            function showToast(message, isSuccess = true) {
                Toastify({
                    text: message,
                    duration: 3000,
                    gravity: "top",
                    position: 'right',
                    backgroundColor: isSuccess ? "#28a745" : "#dc3545",
                    stopOnFocus: true
                }).showToast();
            }

            // Cancel Order
            function cancelOrder() {
                Swal.fire({
                    title: 'Cancel Order',
                    text: 'Are you sure you want to cancel this order?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#6c5ce7',
                    cancelButtonColor: '#dc3545',
                    confirmButtonText: 'Yes, cancel it!',
                    cancelButtonText: 'No, keep it',
                    background: '#1e1e1e',
                    color: '#e0e0e0',
                    customClass: {
                        title: 'swal2-title',
                        content: 'swal2-content',
                        confirmButton: 'swal2-confirm',
                        cancelButton: 'swal2-cancel'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/orders/cancel/<%= order._id %>`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    showToast('Order cancelled successfully', true);
                                    setTimeout(() => window.location.reload(), 1500);
                                } else {
                                    showToast(data.message || 'Failed to cancel order', false);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                showToast('An error occurred while cancelling the order', false);
                            });
                    }
                });
            }

            // Return Order
            function returnOrder() {
                Swal.fire({
                    title: 'Return Order',
                    text: 'Are you sure you want to return this order?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#6c5ce7',
                    cancelButtonColor: '#dc3545',
                    confirmButtonText: 'Yes, return it',
                    cancelButtonText: 'No, keep it',
                    background: '#1e1e1e',
                    color: '#e0e0e0'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/orders/return/<%= order._id %>`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    showToast('Return request submitted successfully', true);
                                    setTimeout(() => window.location.reload(), 1500);
                                } else {
                                    showToast(data.message || 'Failed to process return request', false);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                showToast('An error occurred while processing your request', false);
                            });
                    }
                });
            }

            // Cancel Item
            function cancelItem(itemId) {
                Swal.fire({
                    title: 'Cancel Item',
                    text: 'Are you sure you want to cancel this item?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#6c5ce7',
                    cancelButtonColor: '#dc3545',
                    confirmButtonText: 'Yes, cancel it',
                    cancelButtonText: 'No, keep it',
                    background: '#1e1e1e',
                    color: '#e0e0e0'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/orders/cancel-item/${itemId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    showToast('Item cancelled successfully', true);
                                    setTimeout(() => window.location.reload(), 1500);
                                } else {
                                    showToast(data.message || 'Failed to cancel item', false);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                showToast('An error occurred while cancelling the item', false);
                            });
                    }
                });
            }

            // Return Item
            function returnItem(itemId) {
                Swal.fire({
                    title: 'Return Item',
                    text: 'Are you sure you want to return this item?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#6c5ce7',
                    cancelButtonColor: '#dc3545',
                    confirmButtonText: 'Yes, return it',
                    cancelButtonText: 'No, keep it',
                    background: '#1e1e1e',
                    color: '#e0e0e0'
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch(`/orders/return-item/${itemId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    showToast('Return request submitted successfully', true);
                                    setTimeout(() => window.location.reload(), 1500);
                                } else {
                                    showToast(data.message || 'Failed to process return request', false);
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                showToast('An error occurred while processing your request', false);
                            });
                    }
                });
            }
        </script>
</body>

</html>