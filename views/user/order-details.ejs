<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details - Lume</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Aboreto&display=swap" rel="stylesheet">
    <!-- Toastify CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <style>
        :root {
            --theme-title-font: 'Aboreto', sans-serif;
            --theme-body-font: 'Aboreto', sans-serif;
            --theme-black: #111;
            --theme-gray: #888;
            --theme-highlight: #95951581;
            --theme-border: #e0e0e0;
            --dark-brown: #3a2c1a;
            --olive-green: #334411;
            --light-bg: #f9f5f0;
            --error-color: #dc3545;
            --success-color: #28a745;
        }

        body {
            font-family: 'Aboreto', sans-serif;
            background-color: #f0e9e0;
            margin: 0;
            padding: 0;
            min-height: 100vh;
            color: var(--dark-brown);
        }

        .main-container {
            display: flex;
            flex-direction: column;
            max-width: 1200px;
            margin: 80px auto 0;
            padding: 20px;
            gap: 20px;
        }

        .page-title {
            font-family: var(--theme-title-font);
            color: var(--olive-green);
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid var(--theme-border);
        }

        .order-actions {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-bottom: 20px;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-family: var(--theme-body-font);
        }

        .btn-outline-dark {
            background: transparent;
            border: 1px solid var(--dark-brown);
            color: var(--dark-brown);
        }

        .btn-outline-dark:hover {
            background-color: var(--dark-brown);
            color: white;
        }

        .btn-danger {
            background-color: var(--error-color);
            color: white;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background-color: #218838;
        }

        .order-summary-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 15px;
        }

        .summary-item {
            margin-bottom: 10px;
        }

        .summary-label {
            font-weight: 600;
            color: var(--theme-gray);
            margin-bottom: 5px;
        }

        .summary-value {
            color: var(--dark-brown);
            font-size: 1.05rem;
        }

        .status-badge {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 0.85rem;
            font-weight: 500;
            text-transform: capitalize;
        }

        .status-placed { background-color: #e2e3e5; color: #383d41; }
        .status-shipped { background-color: #cce5ff; color: #004085; }
        .status-delivered { background-color: #d4edda; color: #155724; }
        .status-cancelled { background-color: #f8d7da; color: #721c24; }
        .status-returned { background-color: #e2e3e5; color: #383d41; }

        .items-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }

        .items-table th,
        .items-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .items-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: var(--olive-green);
        }

        .item-image {
            width: 60px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
        }

        .price-original {
            text-decoration: line-through;
            color: var(--theme-gray);
            margin-right: 8px;
            font-size: 0.9em;
        }

        .price-discounted {
            color: var(--error-color);
            font-weight: 600;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
        }

        @media (max-width: 768px) {
            .items-table {
                display: block;
                overflow-x: auto;
            }
            
            .summary-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
   <% -include('../partials/user/header.ejs') %>
    <div class="main-container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="page-title">Order Details</h1>
            <a href="/orders" class="btn btn-outline-dark">
                <i class="fas fa-arrow-left me-2"></i>Back to Orders
            </a>
        </div>

        <% if (order) { 
            // Define these variables once at the top to avoid redeclaration
            const canCancelOrder = !['cancelled', 'shipped', 'delivered'].includes(order.status.toLowerCase());
            const canReturnOrder = order.status.toLowerCase() === 'delivered' && !order.isReturned;
        %>
            <!-- Order Summary -->
            <div class="order-summary-card">
                <h3 class="mb-4">Order Summary</h3>
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="summary-label">Order ID</div>
                        <div class="summary-value"><%= order.orderId %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Order Date</div>
                        <div class="summary-value"><%= new Date(order.createdOn).toLocaleDateString() %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Status</div>
                        <div class="summary-value">
                            <span class="status-badge status-<%= order.status.toLowerCase() %>">
                                <%= order.status %>
                            </span>
                        </div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Payment Method</div>
                        <div class="summary-value"><%= order.paymentMethod %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Payment Status</div>
                        <div class="summary-value"><%= order.paymentStatus === 'Paid' ? 'Paid' : 'COD' %></div>
                    </div>
                </div>

                <div class="mt-4">
                    <div class="summary-label">Shipping Address</div>
                    <div class="summary-value">
                        <%= order.address.name %><br>
                        <%= order.address.address %>, <%= order.address.locality %><br>
                        <%= order.address.city %>, <%= order.address.state %> - <%= order.address.pincode %><br>
                        Phone: <%= order.address.phone %>
                    </div>
                </div>

                <div class="mt-4">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5>Order Total</h5>
                        <div class="text-end">
                            <div class="text-muted">
                                <span>Items Total: </span>
                                <span>₹<%= order.itemsTotal %></span>
                            </div>
                            <% if (order.discount > 0) { %>
                                <div class="text-muted">
                                    <span>Discount: </span>
                                    <span>-₹<%= order.discount %></span>
                                </div>
                            <% } %>
                            <div class="fw-bold mt-1">
                                <span>Total: </span>
                                <span>₹<%= order.totalAmount %></span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Level Actions -->
                <div class="order-actions mt-4">
                    <% if (canCancelOrder) { %>
                        <button class="btn btn-danger" onclick="cancelOrder()">
                            <i class="fas fa-times me-2"></i>Cancel Order
                        </button>
                    <% } %>
                    
                    <% if (canReturnOrder) { %>
                        <button class="btn btn-success" onclick="returnOrder()">
                            <i class="fas fa-undo me-2"></i>Return Order
                        </button>
                    <% } %>
                    
                    <a href="/orders/invoice/<%= order._id %>" class="btn btn-outline-dark">
                        <i class="fas fa-download me-2"></i>Download Invoice
                    </a>
                </div>
            </div>

            <!-- Order Items -->
            <div class="order-items">
                <h3 class="mb-4">Order Items</h3>
                <div class="table-responsive">
                    <table class="items-table">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% order.items.forEach(item => { 
                                const canCancelItem = !['cancelled', 'shipped', 'delivered'].includes(item.status.toLowerCase());
                                const canReturnItem = item.status.toLowerCase() === 'delivered' && !item.isReturned;
                            %>
                                <tr>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <img src="<%= item.productId && item.productId.images && item.productId.images[0] ? item.productId.images[0] : '/images/placeholder.jpg' %>" 
                                                alt="<%= item.productId && item.productId.productName ? item.productId.productName : 'Product Image' %>" 
                                                class="item-image me-3">
                                            <div>
                                                <h6 class="mb-0"><%= item.productId.productName %></h6>
                                                <small class="text-muted">SKU: <%= item.productId._id.toString().substring(0, 8) %></small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <% if (item.originalPrice > item.price) { %>
                                            <span class="price-original">₹<%= item.originalPrice %></span>
                                        <% } %>
                                        <span class="price-discounted">₹<%= item.price %></span>
                                    </td>
                                    <td><%= item.quantity %></td>
                                    <td>₹<%= (item.price * item.quantity).toFixed(2) %></td>
                                    <td>
                                        <span class="status-badge status-<%= item.status.toLowerCase() %>">
                                            <%= item.status %>
                                            <% if (item.isReturned) { %> (Returned) <% } %>
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        <% if (canCancelItem) { %>
                                            <button class="btn btn-sm btn-outline-danger me-2 cancel-item-btn"
                                                data-item-id="<%= item._id %>"
                                                data-item-name="<%= item.productId.productName.replace(/"/g, '&quot;') %>"
                                                data-type="item">
                                                <i class="fas fa-times"></i> Cancel
                                            </button>
                                        <% } %>
                                        <% if (canReturnItem) { %>
                                            <button class="btn btn-sm btn-outline-warning return-item-btn"
                                                data-item-id="<%= item._id %>"
                                                data-item-name="<%= item.productId.productName.replace(/"/g, '&quot;') %>"
                                                data-type="item">
                                                <i class="fas fa-undo"></i> Return
                                            </button>
                                        <% } %>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="order-summary-card">
                <h3 class="mb-4">Order Summary</h3>
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="summary-label">Order ID</div>
                        <div class="summary-value"><%= order.orderId %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Order Date</div>
                        <div class="summary-value"><%= new Date(order.createdAt).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        }) %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Order Status</div>
                        <div class="summary-value">
                            <span class="status-badge status-<%= order.status.toLowerCase() %>">
                                <%= order.status %>
                            </span>
                        </div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Payment Method</div>
                        <div class="summary-value"><%= order.paymentMethod %></div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Payment Status</div>
                        <div class="summary-value">
                            <span class="status-badge status-<%= order.paymentStatus.toLowerCase() %>">
                                <%= order.paymentStatus %>
                            </span>
                        </div>
                    </div>
                    <div class="summary-item">
                        <div class="summary-label">Shipping Address</div>
                        <div class="summary-value">
                            <% if (order.shippingAddress) { %>
                                <%= order.shippingAddress.name %><br>
                                <%= order.shippingAddress.address %><br>
                                <%= order.shippingAddress.city %>, <%= order.shippingAddress.state %> <%= order.shippingAddress.pincode %><br>
                                Phone: <%= order.shippingAddress.phone %><br>
                                Email: <%= order.shippingAddress.email %>
                            <% } else { %>
                                No shipping address provided
                            <% } %>
                        </div>
                    </div>
                </div>
                <div class="summary-totals mt-4">
                    <div class="total-row">
                        <span>Subtotal:</span>
                        <span>₹<%= order.subTotal ? order.subTotal.toFixed(2) : '0.00' %></span>
                    </div>
                    <% if (order.couponDiscount && order.couponDiscount > 0) { %>
                        <div class="total-row">
                            <span>Coupon Discount:</span>
                            <span class="text-danger">-₹<%= order.couponDiscount.toFixed(2) %></span>
                        </div>
                    <% } %>
                    <div class="total-row">
                        <span>Shipping:</span>
                        <span>₹<%= order.shippingCharge ? order.shippingCharge.toFixed(2) : '0.00' %></span>
                    </div>
                    <div class="total-row total-amount">
                        <span>Total:</span>
                        <span>₹<%= order.totalAmount ? order.totalAmount.toFixed(2) : '0.00' %></span>
                    </div>
                </div>
                <div class="order-actions mt-4">
                    <button class="btn btn-outline-dark me-2" onclick="window.print()">
                        <i class="fas fa-print me-2"></i>Print Invoice
                    </button>
                    <a href="/invoice/<%= order._id %>" class="btn btn-outline-primary me-2">
                        <i class="fas fa-download me-2"></i>Download Invoice
                    </a>
                    <% if (canCancelOrder) { %>
                        <button class="btn btn-outline-danger me-2 cancel-order-btn"
                            data-item-id="<%= order._id %>"
                            data-item-name="Order #<%= order.orderId %>"
                            data-type="order">
                            <i class="fas fa-times-circle me-2"></i>Cancel Order
                        </button>
                    <% } %>
                    <% if (canReturnOrder) { %>
                        <button class="btn btn-outline-warning return-order-btn"
                            data-item-id="<%= order._id %>"
                            data-item-name="Order #<%= order.orderId %>"
                            data-type="order">
                            <i class="fas fa-undo me-2"></i>Request Return
                        </button>
                    <% } %>
                </div>
            </div>
        <% } else { %>
            <div class="alert alert-warning">
                Order not found. Please check the order ID and try again.
            </div>
        <% } %>
    </div>

    
    <!-- Cancel Order Modal -->
    <div class="modal fade" id="cancelModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Cancellation</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to cancel <span id="cancelItemName">this item</span>?</p>
                    <div class="mb-3">
                        <label for="cancelReason" class="form-label">Reason for cancellation:</label>
                        <select class="form-select" id="cancelReason" required>
                            <option value="">Select a reason</option>
                            <option value="Changed my mind">Changed my mind</option>
                            <option value="Found a better price">Found a better price</option>
                            <option value="Item no longer needed">Item no longer needed</option>
                            <option value="Shipping takes too long">Shipping takes too long</option>
                            <option value="Other">Other (please specify)</option>
                        </select>
                    </div>
                    <div class="mb-3" id="otherCancelReasonContainer" style="display: none;">
                        <label for="otherCancelReason" class="form-label">Please specify:</label>
                        <input type="text" class="form-control" id="otherCancelReason">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-danger" id="confirmCancel">Confirm Cancellation</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Return Order Modal -->
    <div class="modal fade" id="returnModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Request Return</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>You are requesting a return for <span id="returnItemName">this item</span>.</p>
                    <div class="mb-3">
                        <label for="returnReason" class="form-label">Reason for return:</label>
                        <select class="form-select" id="returnReason" required>
                            <option value="">Select a reason</option>
                            <option value="Wrong item received">Wrong item received</option>
                            <option value="Item damaged or defective">Item damaged or defective</option>
                            <option value="Not as described">Not as described</option>
                            <option value="No longer needed">No longer needed</option>
                            <option value="Other">Other (please specify)</option>
                        </select>
                    </div>
                    <div class="mb-3" id="otherReturnReasonContainer" style="display: none;">
                        <label for="otherReturnReason" class="form-label">Please specify:</label>
                        <input type="text" class="form-control" id="otherReturnReason">
                    </div>
                    <div class="mb-3">
                        <label for="returnNotes" class="form-label">Additional Notes (optional):</label>
                        <textarea class="form-control" id="returnNotes" rows="3"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-warning" id="confirmReturn">Submit Return Request</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    
    <script>
        // Variables to store the current action context
        let currentAction = {
            type: '', // 'order' or 'item'
            id: '',   // orderId or itemId
            name: ''  // Display name for the item/order
        };

        // Show cancel modal
        function showCancelModal(id, name, type) {
            currentAction = { type, id, name };
            const modal = new bootstrap.Modal(document.getElementById('cancelModal'));
            const itemText = type === 'item' ? 'item' : 'order';
            document.getElementById('cancelItemName').textContent = type === 'item' ? name : `Order #${name}`;
            modal.show();
        }

        // Show return modal
        function showReturnModal(id, name, type) {
            currentAction = { type, id, name };
            const modal = new bootstrap.Modal(document.getElementById('returnModal'));
            document.getElementById('returnItemName').textContent = type === 'item' ? name : `Order #${name}`;
            modal.show();
        }

        // Handle cancel confirmation
        document.getElementById('confirmCancel').addEventListener('click', function() {
            const reason = document.getElementById('cancelReason').value;
            const otherReason = document.getElementById('otherCancelReason').value;
            const finalReason = reason === 'Other' ? otherReason : reason;
            
            if (!reason) {
                alert('Please select a reason for cancellation');
                return;
            }

            const { type, id } = currentAction;
            const url = type === 'item' 
                ? `/orders/<%= order._id %>/items/${id}/cancel`
                : `/orders/${id}/cancel`;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ reason: finalReason })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message || 'Cancellation request submitted successfully', true);
                    $('#cancelModal').modal('hide');
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    showToast(data.message || 'Failed to process cancellation', false);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while processing your request', false);
            });
        });

        // Handle return confirmation
        document.getElementById('confirmReturn').addEventListener('click', function() {
            const reason = document.getElementById('returnReason').value;
            const otherReason = document.getElementById('otherReturnReason').value;
            const notes = document.getElementById('returnNotes').value;
            const finalReason = reason === 'Other' ? otherReason : reason;
            
            if (!reason) {
                alert('Please select a reason for return');
                return;
            }

            const { type, id } = currentAction;
            const url = type === 'item'
                ? `/orders/<%= order._id %>/items/${id}/return`
                : `/orders/${id}/return`;

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    reason: finalReason,
                    notes: notes || undefined
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message || 'Return request submitted successfully', true);
                    $('#returnModal').modal('hide');
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    showToast(data.message || 'Failed to process return request', false);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while processing your request', false);
            });
        });

        // Show/hide other reason input based on selection
        document.getElementById('cancelReason').addEventListener('change', function() {
            const otherContainer = document.getElementById('otherCancelReasonContainer');
            otherContainer.style.display = this.value === 'Other' ? 'block' : 'none';
        });

        document.getElementById('returnReason').addEventListener('change', function() {
            const otherContainer = document.getElementById('otherReturnReasonContainer');
            otherContainer.style.display = this.value === 'Other' ? 'block' : 'none';
        });

        // Reset modals when hidden
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('hidden.bs.modal', function () {
                this.querySelector('form')?.reset();
                this.querySelectorAll('[id$=ReasonContainer]').forEach(el => el.style.display = 'none');
                currentAction = { type: '', id: '', name: '' };
            });
        });

        // Show toast message
        function showToast(message, isSuccess) {
            Toastify({
                text: message,
                duration: 3000,
                close: true,
                gravity: "top",
                position: 'right',
                backgroundColor: isSuccess ? "#28a745" : "#dc3545"
            }).showToast();
        }
    </script>
    <script>
        // Add event listeners when the DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Handle cancel item buttons
            document.querySelectorAll('.cancel-item-btn, .cancel-order-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    const itemName = this.getAttribute('data-item-name');
                    const type = this.getAttribute('data-type') || 'item';
                    showCancelModal(itemId, itemName, type);
                });
            });

            // Handle return item buttons
            document.querySelectorAll('.return-item-btn, .return-order-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-item-id');
                    const itemName = this.getAttribute('data-item-name');
                    const type = this.getAttribute('data-type') || 'item';
                    showReturnModal(itemId, itemName, type);
                });
            });
        });

        // Function to show toast messages
        function showToast(message, isSuccess = true) {
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: 'right',
                backgroundColor: isSuccess ? "#28a745" : "#dc3545",
                stopOnFocus: true
            }).showToast();
        }

        // Cancel Order
        function cancelOrder() {
            if (confirm('Are you sure you want to cancel this order?')) {
                fetch(`/orders/cancel/<%= order._id %>`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Order cancelled successfully', true);
                        setTimeout(() => window.location.reload(), 1500);
                    } else {
                        showToast(data.message || 'Failed to cancel order', false);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('An error occurred while cancelling the order', false);
                });
            }
        }

        // Return Order
        function returnOrder() {
            if (confirm('Are you sure you want to return this order?')) {
                fetch(`/orders/return/<%= order._id %>`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Return request submitted successfully', true);
                        setTimeout(() => window.location.reload(), 1500);
                    } else {
                        showToast(data.message || 'Failed to process return request', false);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('An error occurred while processing your request', false);
                });
            }
        }

        // Cancel Item
        function cancelItem(itemId) {
            if (confirm('Are you sure you want to cancel this item?')) {
                fetch(`/orders/cancel-item/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Item cancelled successfully', true);
                        setTimeout(() => window.location.reload(), 1500);
                    } else {
                        showToast(data.message || 'Failed to cancel item', false);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('An error occurred while cancelling the item', false);
                });
            }
        }

        // Return Item
        function returnItem(itemId) {
            if (confirm('Are you sure you want to return this item?')) {
                fetch(`/orders/return-item/${itemId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Return request submitted successfully', true);
                        setTimeout(() => window.location.reload(), 1500);
                    } else {
                        showToast(data.message || 'Failed to process return request', false);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('An error occurred while processing your request', false);
                });
            }
        }
    </script>
</body>
</html>
