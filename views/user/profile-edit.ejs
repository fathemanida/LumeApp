<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - E-commerce</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Aboreto&family=Jost:wght@300;400;500&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <style>
        :root {
            --dark-brown: #5c4b3b;
            /* Updated brown color */
            --olive-green: #314216;
            --light-bg: #ffffff;
            /* Changed to white */
            --border-color: #d3c9be;
        }

        body {
            font-family: 'Jost', sans-serif;
            background-color: white;
            /* Changed to white */
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: flex-start;
            align-items: flex-start;
            min-height: 100vh;
            color: var(--dark-brown);
        }

        .container {
            background-color: #fff;
            border-radius: 0;
            box-shadow: none;
            overflow: hidden;
            width: 100%;
            margin: 0;
            display: flex;
            height: 100vh;
        }

        h1,
        h2,
        h3 {
            font-family: 'Aboreto', cursive;
        }

        .sidebar {
            background-color: white;
            padding: 1.5rem;
            width: 280px;
            height: 100vh;
            border-right: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        .sidebar-title {
            font-family: 'Aboreto', cursive;
            font-size: 1.25rem;
            color: var(--dark-brown);
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid var(--border-color);
        }

        .sidebar-nav {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            text-decoration: none;
            color: var(--dark-brown);
            padding: 0.75rem 1rem;
            transition: all 0.3s;
            border-radius: 6px;
            font-family: 'Jost', sans-serif;
            position: relative;
        }

        .nav-link:hover,
        .nav-link.active {
            color: var(--olive-green);
            background-color: rgba(49, 66, 22, 0.1);
        }

        .nav-link.active {
            font-weight: 500;
            background-color: var(--light-bg);
            box-shadow: 3px 0 0 0 var(--olive-green) inset;
        }

        .sidebar-actions {
            margin-top: auto;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .logout-btn,
        .delete-btn {
            width: 100%;
            padding: 0.75rem;
            border-radius: 6px;
            font-family: 'Jost', sans-serif;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            border: none;
        }

        .logout-btn {
            background-color: var(--dark-brown);
            color: white;
        }

        .logout-btn:hover {
            background-color: var(--olive-green);
        }

        .delete-btn {
            background-color: #f8f8f8;
            color: #b91c1c;
            border: 1px solid #fecaca;
        }

        .delete-btn:hover {
            background-color: #fee2e2;
        }

        .main-content {
            padding: 50px 40px;
            width: 70%;
            height: 100%;
            overflow-y: auto;
            background-color: white;
            /* Ensure white background */
        }

        .profile-header {
            display: flex;
            align-items: center;
            background-color: #f9f9f9;
            /* Light gray background */
            padding: 25px;
            border-radius: 8px;
            margin-bottom: 40px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            border: 1px solid var(--border-color);
        }

        .profile-image {
            width: 90px;
            height: 90px;
            background-color: var(--border-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 25px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .overview-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
        }

        .overview-grid div {
            background-color: #f9f9f9;
            /* Light gray background */
            padding: 20px;
            border-radius: 8px;
            transition: transform 0.2s ease, box-shadow 0.3s ease;
            border: 1px solid var(--border-color);
        }

        .overview-grid div:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .input-field {
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 14px;
            font-size: 1rem;
            width: 100%;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            font-family: 'Jost', sans-serif;
        }

        .input-field:focus {
            border-color: var(--olive-green);
            box-shadow: 0 0 8px rgba(49, 66, 22, 0.2);
            outline: none;
        }

        label {
            font-size: 0.95rem;
            color: var(--dark-brown);
            margin-bottom: 10px;
            display: block;
            font-family: 'Jost', sans-serif;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .edit-btn {
            background-color: rgb(64, 45, 30);
            ;
            /* Brown button */
            color: white;
            padding: 12px 30px;
            border-radius: 5px;
            font-size: 1.1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
            border: none;
            cursor: pointer;
            font-family: 'Jost', sans-serif;
        }

        .edit-btn:hover {
            background-color: var(--olive-green);
            /* Green hover */
            transform: translateY(-2px);
        }

        .submit-btn {
            background-color: var(--dark-brown);
            /* Brown button */
            color: white;
            padding: 14px 35px;
            border-radius: 8px;
            font-size: 1.1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
            border: none;
            cursor: pointer;
            font-family: 'Jost', sans-serif;
        }

        .submit-btn:hover {
            background-color: var(--olive-green);
            /* Green hover */
            transform: translateY(-2px);
        }

        .logout-btn {
            background-color: rgb(64, 45, 30);
            /* Brown button */
            color: white;
            padding: 14px 0;
            border-radius: 5px;
            font-size: 1.1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
            border: none;
            cursor: pointer;
            width: 100%;
            font-family: 'Jost', sans-serif;
        }

        .logout-btn:hover {
            background-color: var(--olive-green);
            /* Green hover */
            transform: translateY(-2px);
        }

        .delete-btn {
            background-color: rgb(78, 19, 19);
            /* Brown button */
            color: white;
            padding: 14px 0;
            border-radius: 5px;
            font-size: 1.1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
            border: none;
            cursor: pointer;
            width: 100%;
            font-family: 'Jost', sans-serif;
        }

        .delete-btn:hover {
            background-color: #8B0000;
            /* Dark red hover */
            transform: translateY(-2px);
        }

        /* Error message styling */
        .error-message {
            color: #dc2626;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        /* Error state for inputs */
        .input-field.error {
            border-color: #dc2626;
        }

        /* Loading state */
        .submit-btn.loading {
            opacity: 0.7;
            cursor: not-allowed;
        }

        /* Cropper container styles */
        #imagePreviewContainer {
            max-width: 100%;
            margin-top: 1rem;
        }

        .cropper-modal {
            background-color: rgba(0, 0, 0, 0.5);
        }

        .cropper-view-box {
            outline: 1px solid #39f;
            outline-color: rgba(51, 153, 255, 0.75);
        }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .btn-crop {
            background-color: var(--olive-green);
            color: white;
        }

        .btn-cancel {
            background-color: #6b7280;
            color: white;
        }
    </style>
</head>

<body>
    <div class="container">
        <!-- Sidebar -->
       <div class="sidebar">
            <div>
                <div class="sidebar-title">User Dashboard</div>
                <div class="sidebar-nav">
                    <a href="/profile" class="nav-link active">Profile</a>
                    <a href="/address" class="nav-link ">Address</a>
                    <a href="/orders" class="nav-link">Orders</a>
                    <a href="/wishlist" class="nav-link">Wishlist</a>
                    <a href="/settings" class="nav-link">Settings</a>

                </div>
            </div>
            <div class="sidebar-actions">
                <button class="logout-btn">Logout</button>
                <button class="delete-btn">Delete Account</button>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="flex justify-between items-center mb-10">
                <h1 class="text-3xl font-semibold">Edit Account</h1>
            </div>

            <!-- Profile Header -->
            <div class="profile-header">
                <div class="profile-image">
                    <% if(user.profileImage) { %>
                        <img src="<%= user.profileImage %>" alt="Profile"
                            class="w-full h-full rounded-full object-cover">
                        <% } else { %>
                            <svg class="w-12 h-12 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
                                <path
                                    d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" />
                            </svg>
                            <% } %>
                </div>
                <div>
                    <h2 class="text-2xl font-semibold">
                        <%= user.name %>
                    </h2>
                    <p class="text-sm">
                        <%= user.email %>
                    </p>
                </div>
            </div>

            <!-- Account Overview -->
            <div class="mb-12">
                <h3 class="text-2xl font-semibold mb-6">Account Overview</h3>
                <div class="overview-grid">
                    <div>
                        <p class="text-sm">Total Orders</p>
                        <p class="font-semibold">
                            <%= user.orderCount || 0 %>
                        </p>
                    </div>
                    <div>
                        <p class="text-sm">Wishlist Items</p>
                        <p class="font-semibold">
                            <%= user.wishlist || 0 %>
                        </p>
                    </div>
                    <div>
                        <p class="text-sm">Account Status</p>
                        <p class="font-semibold">
                            <%= user.isActive ? 'Active' : 'Inactive' %>
                        </p>
                    </div>
                    <div>
                        <p class="text-sm">Member Since</p>
                        <p class="font-semibold">
                            <%= new Date(user.createdAt).toLocaleDateString('en-US', { month: 'long' , year: 'numeric'
                                }) %>
                        </p>
                    </div>
                </div>
            </div>

            <!-- Profile Form -->
            <form action="/profile/update" method="POST" enctype="multipart/form-data" id="profileEditForm"
                class="space-y-6">
                <div class="form-group">
                    <label class="cursor-pointer">
                        <div class="flex items-center gap-3">
                            <div class="w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center">
                                <i class="fas fa-camera text-gray-500 text-xl"></i>
                            </div>
                            <span class="text-gray-700">Change Profile Picture</span>
                        </div>
                        <input type="file" id="profileImage" name="profileImage" accept="image/*" class="hidden">
                    </label>
                    <p class="error-message text-red-600 text-sm mt-1 hidden" id="fileError"></p>
                    <div id="imagePreviewContainer" class="mt-4 hidden"></div>
                </div>

                <div class="form-group">
                    <label>Username</label>
                    <input type="text" name="name" class="input-field" value="<%= user.name %>">
                </div>
                <div class="form-group">
                    <label>Phone</label>
                    <input type="text" name="phone" value="<%= user.phone || '' %>" class="input-field">
                </div>

                <div class="form-group">
                    <label>Email</label>
                    <input type="email" name="email" value="<%= user.email %>" class="input-field" id="emailInput">
                    <button type="button" id="verifyEmailBtn" class="text-sm text-blue-600 mt-2 hidden">Verify New Email</button>
                </div>

                <!-- OTP Verification Section -->
                <div id="otpSection" class="hidden">
                    <div class="form-group">
                        <label>OTP Verification</label>
                        <p class="text-sm text-gray-600 mb-2">We've sent an OTP to your new email. Please check and enter it below.</p>
                        <input type="text" name="otp" class="input-field" placeholder="Enter 6-digit OTP" maxlength="6">
                        <div class="flex justify-between items-center mt-2">
                            <button type="button" id="resendOtpBtn" class="text-sm text-blue-600">Resend OTP</button>
                            <span id="otpTimer" class="text-sm text-gray-600"></span>
                        </div>
                    </div>
                </div>

                <div class="flex justify-end">
                    <button type="submit" class="submit-btn">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let cropper = null;
            const form = document.getElementById('profileEditForm');
            const fileInput = document.getElementById('profileImage');
            const fileError = document.getElementById('fileError');
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalBtnText = submitBtn.textContent;
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');

            const emailInput = document.getElementById('emailInput');
            const verifyEmailBtn = document.getElementById('verifyEmailBtn');
            const otpSection = document.getElementById('otpSection');
            const resendOtpBtn = document.getElementById('resendOtpBtn');
            const otpTimer = document.getElementById('otpTimer');
            let timerInterval;
            const originalEmail = '<%= user.email %>';

            
            fileInput.addEventListener('change', function (e) {
                if (this.files && this.files[0]) {
                   
                    fileError.classList.add('hidden');

                  
                    const file = this.files[0];
                    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
                    const maxSize = 5 * 1024 * 1024;

                    if (!validTypes.includes(file.type)) {
                        showError(fileInput, 'Only image files (JPG, PNG, GIF, WEBP) are allowed');
                        return;
                    }

                    if (file.size > maxSize) {
                        showError(fileInput, 'Image must be less than 5MB');
                        return;
                    }

                    
                    showCropper(file);
                }
            });

           
            form.addEventListener('submit', async function (e) {
                e.preventDefault();
                
                
                submitBtn.disabled = true;
                submitBtn.textContent = 'Saving...';
                submitBtn.classList.add('opacity-75');

                clearErrors();
                const isFormValid = validateForm();

                if (isFormValid) {
                    try {
                        
                        const formData = new FormData(form);

                       
                        const response = await fetch(form.action, {
                            method: 'POST',
                            body: formData
                        });

                        const data = await response.json();

                        if (response.ok && data.success) {
                           
                            await Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: data.message || 'Profile updated successfully',
                                timer: 2000,
                                showConfirmButton: false
                            });
                            window.location.href = '/profile';
                        } else {
                            throw new Error(data.message || 'Failed to update profile');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: error.message
                        });
                    } finally {
                        resetSubmitButton();
                    }
                } else {
                    resetSubmitButton();
                }
            });

           
            function showCropper(file) {
                imagePreviewContainer.innerHTML = '';
                imagePreviewContainer.classList.remove('hidden');

                
                const img = document.createElement('img');
                img.id = 'imageToCrop';
                img.src = URL.createObjectURL(file);
                img.style.maxHeight = '400px';
                imagePreviewContainer.appendChild(img);

               
                const btnContainer = document.createElement('div');
                btnContainer.className = 'action-buttons';

                const cropBtn = document.createElement('button');
                cropBtn.type = 'button';
                cropBtn.className = 'btn-crop px-4 py-2 rounded hover:bg-green-700';
                cropBtn.textContent = 'Crop & Save';

                const cancelBtn = document.createElement('button');
                cancelBtn.type = 'button';
                cancelBtn.className = 'btn-cancel px-4 py-2 rounded hover:bg-gray-600';
                cancelBtn.textContent = 'Cancel';

                btnContainer.appendChild(cropBtn);
                btnContainer.appendChild(cancelBtn);
                imagePreviewContainer.appendChild(btnContainer);

                
                const image = document.getElementById('imageToCrop');
                cropper = new Cropper(image, {
                    aspectRatio: 1,
                    viewMode: 1,
                    autoCropArea: 0.8,
                    responsive: true,
                    movable: false,
                    zoomable: false,
                    rotatable: false,
                    scalable: false
                });

               
                cropBtn.addEventListener('click', function () {
                    
                    const canvas = cropper.getCroppedCanvas({
                        width: 300,
                        height: 300,
                        fillColor: '#fff',
                        imageSmoothingQuality: 'high',
                    });

                   
                    canvas.toBlob((blob) => {
                       
                        const croppedFile = new File([blob], 'profile-image.jpg', {
                            type: 'image/jpeg',
                            lastModified: Date.now()
                        });

                        
                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(croppedFile);

                        
                        fileInput.files = dataTransfer.files;

                       
                        updateProfilePreview(canvas.toDataURL());

                        
                        imagePreviewContainer.classList.add('hidden');
                        imagePreviewContainer.innerHTML = '';
                        cropper.destroy();
                        cropper = null;
                    }, 'image/jpeg', 0.9);
                });

               
                cancelBtn.addEventListener('click', function () {
                    fileInput.value = '';
                    imagePreviewContainer.classList.add('hidden');
                    imagePreviewContainer.innerHTML = '';
                    if (cropper) {
                        cropper.destroy();
                        cropper = null;
                    }
                });
            }

           
            function updateProfilePreview(imageSrc) {
                const profileImageContainer = document.querySelector('.profile-image');
                let img = profileImageContainer.querySelector('img');

                if (!img) {
                    const svg = profileImageContainer.querySelector('svg');
                    if (svg) svg.remove();
                    img = document.createElement('img');
                    img.className = 'w-full h-full rounded-full object-cover';
                    profileImageContainer.appendChild(img);
                }

                img.src = imageSrc;
            }

           
            function validateForm() {
                let isValid = true;

               
                const nameInput = form.querySelector('input[name="name"]');
                if (!nameInput.value.trim()) {
                    showError(nameInput, 'Name is required');
                    isValid = false;
                } else if (nameInput.value.trim().length < 2 || nameInput.value.trim().length > 50) {
                    showError(nameInput, 'Name must be between 2-50 characters');
                    isValid = false;
                }

                
                const newEmail = emailInput.value.trim();
                if (newEmail !== originalEmail) {
                    if (!newEmail) {
                        showError(emailInput, 'Email is required');
                        isValid = false;
                    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(newEmail)) {
                        showError(emailInput, 'Please enter a valid email address');
                        isValid = false;
                    }
                }

                
                const phoneInput = form.querySelector('input[name="phone"]');
                if(phoneInput.value===""){
                    showError(phoneInput,"Please enter a phone number");
                    isValid=false;
                }
                
                if (phoneInput.value.trim() && !/^[0-9]{10}$/.test(phoneInput.value)) {
                    showError(phoneInput, 'Please enter a valid 10-digit phone number');
                    isValid = false;
                }

                return isValid;
            }

            function showError(input, message) {
                const error = document.createElement('p');
                error.className = 'error-message text-red-600 text-sm mt-1';
                error.textContent = message;
                input.parentNode.appendChild(error);
                input.classList.add('border-red-500');

                input.addEventListener('input', function () {
                    this.classList.remove('border-red-500');
                    const errorMsg = this.parentNode.querySelector('.error-message');
                    if (errorMsg) errorMsg.remove();
                }, { once: true });
            }

            function clearErrors() {
                document.querySelectorAll('.error-message').forEach(el => el.remove());
                document.querySelectorAll('.input-field').forEach(el => el.classList.remove('border-red-500'));
            }

            function resetSubmitButton() {
                submitBtn.disabled = false;
                submitBtn.textContent = originalBtnText;
                submitBtn.classList.remove('opacity-75');
            }

            
            emailInput.addEventListener('input', function() {
                const newEmail = this.value.trim();
                if (newEmail !== originalEmail) {
                    verifyEmailBtn.classList.remove('hidden');
                } else {
                    verifyEmailBtn.classList.add('hidden');
                    otpSection.classList.add('hidden');
                }
            });

            
            verifyEmailBtn.addEventListener('click', async function() {
                const newEmail = emailInput.value.trim();
                if (!newEmail || newEmail === originalEmail) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Email',
                        text: 'Please enter a new email address'
                    });
                    return;
                }

                try {
                    const response = await fetch('/profile/send-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ email: newEmail })
                    });

                    const data = await response.json();
                    
                    if (response.ok && data.success) {
                        otpSection.classList.remove('hidden');
                        startOtpTimer();
                        Swal.fire({
                            icon: 'success',
                            title: 'OTP Sent!',
                            text: 'Please check your email for the verification code'
                        });
                    } else {
                        throw new Error(data.message || 'Failed to send OTP');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to send OTP'
                    });
                }
            });

            
            resendOtpBtn.addEventListener('click', async function() {
                try {
                    const response = await fetch('/profile/resend-otp', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const data = await response.json();
                    
                    if (response.ok && data.success) {
                        startOtpTimer();
                        Swal.fire({
                            icon: 'success',
                            title: 'OTP Resent!',
                            text: 'Please check your email for the new verification code'
                        });
                    } else {
                        throw new Error(data.message || 'Failed to resend OTP');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to resend OTP'
                    });
                }
            });

            
            function startOtpTimer() {
                let timeLeft = 30;
                otpTimer.textContent = `Time remaining: ${timeLeft}s`;
                
                if (timerInterval) clearInterval(timerInterval);
                
                timerInterval = setInterval(() => {
                    timeLeft--;
                    otpTimer.textContent = `Time remaining: ${timeLeft}s`;
                    
                    if (timeLeft <= 0) {
                        clearInterval(timerInterval);
                        otpTimer.textContent = 'OTP expired';
                        resendOtpBtn.disabled = false;
                    }
                }, 1000);
            }

            
            const otpInput = document.querySelector('input[name="otp"]');
            otpInput.addEventListener('input', async function() {
                if (this.value.length === 6) {
                    try {
                        const response = await fetch('/profile/verify-otp', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ otp: this.value })
                        });

                        const data = await response.json();

                        if (response.ok && data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Success!',
                                text: 'Email verified successfully'
                            });
                            otpSection.classList.add('hidden');
                        } else {
                            throw new Error(data.message || 'Invalid OTP');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message
                        });
                    }
                }
            });
        });
    </script>
</body>

</html>