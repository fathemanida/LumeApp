<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - LUME</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Aboreto&family=Jost&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="icon" href="/images/image.png" type="image/png">

    <style>
        :root {
            --soft-beige: #D4B996;
            --muted-green: #657858;
            --light-bg: #f8f5f2;
            --border-color: #e0d8cc;
            --offer-red: #e63946;
            --dark-text: #2c1810;
            --darker-text: #1a0f0a;
        }
        html, body {
            background-color: #f0e9e0;
            font-family: 'Jost', sans-serif;
            color: var(--dark-text);
            margin: 0;
            padding: 0;
        }
        /* --- Checkout Layout --- */
        .checkout-title {
            font-family: 'Aboreto', cursive;
            color: var(--darker-text);
            letter-spacing: 1.5px;
            text-transform: uppercase;
            font-weight: 400;
            margin-bottom: 2rem;
            font-size: 1.8rem;
        }
        .checkout-grid {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 2rem;
        }
        @media (max-width: 992px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }
        }
        .checkout-section {
            background: transparent;
            border: none;
            border-radius: 0;
            box-shadow: none;
            padding: 2rem;
            margin-bottom: 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }
        .section-title {
            font-family: 'Aboreto', cursive;
            color: var(--darker-text);
            letter-spacing: 1.5px;
            text-transform: uppercase;
            font-weight: 400;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }
        /* --- Order Items --- */
        .order-item {
            display: flex;
            align-items: center;
            padding: 1.5rem;
            margin-bottom: 1rem;
            background: transparent;
            border-radius: 0;
            border: 1px solid var(--border-color);
        }
        .order-item-img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 0;
            margin-right: 1.5rem;
        }
        .order-item-details {
            flex: 1;
        }
        .order-item-name {
            font-family: 'Aboreto', cursive;
            font-size: 1rem;
            margin-bottom: 0.5rem;
            color: var(--darker-text);
        }
        .order-item-info {
            color: var(--dark-text);
            font-size: 0.85rem;
            margin-bottom: 0.25rem;
        }
        .order-item-price {
            font-weight: 500;
            color: var(--darker-text);
            font-size: 0.95rem;
        }
        .text-decoration-line-through {
            text-decoration: line-through;
            opacity: 0.7;
        }
        .text-success {
            color: var(--muted-green) !important;
        }
        /* --- Address Section --- */
        .address-details {
            font-size: 0.9rem;
            color: var(--dark-text);
            margin-bottom: 1rem;
            padding: 1.5rem;
            background: var(--light-bg);
            border-radius: 0;
            border: 1px solid var(--border-color);
        }
        .default-address {
            border: 2px solid var(--muted-green);
            background: rgba(169, 186, 157, 0.1);
        }
        .default-badge {
            background: var(--muted-green);
            color: white;
            padding: 0.3rem 0.6rem;
            border-radius: 0;
            font-size: 0.7rem;
            margin-bottom: 0.75rem;
            display: inline-block;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        .address-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }
        .address-btn, .set-default-btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background: var(--light-bg);
            border: 1px solid var(--border-color);
            border-radius: 0;
            color: var(--darker-text);
            font-family: 'Jost', sans-serif;
            font-size: 0.9rem;
            text-decoration: none;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .set-default-btn {
            background: var(--darker-text);
            color: white;
            border: none;
        }
        /* --- Coupon Section --- */
        .coupon-section {
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid var(--border-color);
        }
        .coupon-title {
            font-family: 'Aboreto', cursive;
            color: var(--darker-text);
            letter-spacing: 1.5px;
            text-transform: uppercase;
            font-weight: 400;
            margin-bottom: 1rem;
        }
        .coupon-input-group {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1.5rem;
        }
        .coupon-input {
            flex: 1;
            border: 1px solid var(--border-color);
            border-radius: 0;
            padding: 0.75rem 1rem;
            font-family: 'Jost', sans-serif;
            font-size: 0.9rem;
            background: var(--light-bg);
        }
        .apply-coupon-btn {
            background: var(--darker-text);
            border: none;
            color: white;
            width: 42px;
            height: 42px;
            border-radius: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }
         .show-coupons-btn {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 1.5rem;
      background: var(--light-bg);
      border: 2px solid var(--soft-beige);
      border-radius: 0;
      color: var(--soft-beige);
      font-family: 'Jost', sans-serif;
      font-size: clamp(0.95rem, 2.5vw, 1.05rem);
      font-weight: 500;
      transition: all 0.3s ease;
    }
    .show-coupons-btn:hover {
      background: var(--soft-beige);
      color: white;
      transform: translateY(-1px);
    }
    .show-coupons-btn i {
      transition: transform 0.3s ease;
      font-size: clamp(0.9rem, 2.5vw, 1rem);
    }
    .show-coupons-btn.active {
      background: var(--soft-beige);
      color: white;
    }
    .show-coupons-btn.active i {
      transform: rotate(180deg);
    }
    .applied-coupon {
      background: rgba(212, 185, 150, 0.1);
      border: 1px solid rgba(212, 185, 150, 0.2);
      border-radius: 0;
      padding: 0.75rem 1rem;
      margin: 0.75rem 0;
    }
    .applied-coupon .coupon-code {
      background: rgba(212, 185, 150, 0.2);
      color: var(--soft-beige);
      padding: 0.5rem 0.75rem;
      border-radius: 0;
      font-weight: 500;
      font-size: clamp(0.9rem, 2.5vw, 1rem);
    }
    .applied-coupon .coupon-code i {
      color: var(--soft-beige);
    }
    .remove-coupon-btn {
      background: none;
      border: none;
      color: #6c757d;
      padding: 0.5rem;
      cursor: pointer;
      transition: all 0.3s ease;
      width: clamp(24px, 6vw, 28px);
      height: clamp(24px, 6vw, 28px);
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 0;
    }
    .remove-coupon-btn:hover {
      color: var(--offer-red);
      background: rgba(220, 53, 69, 0.1);
      transform: scale(1.1);
    }
    .discount-amount {
      color: var(--muted-green);
      font-weight: 600;
      font-size: clamp(1rem, 3vw, 1.2rem);
    }
    .coupon-item.applied {
      background: rgba(212, 185, 150, 0.15);
      border: 2px solid var(--soft-beige);
      cursor: default;
    }
    .coupon-item.applied:hover {
      transform: none;
    }
    .coupon-item.used {
      opacity: 0.7;
      cursor: not-allowed;
      background: #f8f8f8;
      border: 2px dashed #ccc;
    }
    .coupon-item.used:hover {
      transform: none;
    }
    .coupon-item.used .coupon-code {
      color: #666;
    }
    .coupon-item.used .coupon-details {
      color: #666;
    }
    .coupon-item.used .coupon-min-order,
    .coupon-item.used .coupon-expiry {
      color: #999;
    }
    .coupon-input:disabled,
    .apply-coupon-btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
    }
     .coupon-section {
      margin-top: 2rem;
      padding-top: 2rem;
      border-top: 1px solid var(--border-color);
    }
    .coupon-title {
      font-family: 'Aboreto', cursive;
      color: var(--darker-text);
      letter-spacing: 1.5px;
      text-transform: uppercase;
      font-weight: 400;
      margin-bottom: 1rem;
      font-size: clamp(1rem, 3vw, 1.2rem);
    }
    .coupon-list {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    .coupon-item {
      background: var(--light-bg);
      border: 2px dashed var(--soft-beige);
      border-radius: 0;
      padding: 1rem;
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
      overflow: hidden;
    }
    .coupon-item:hover:not(.applied):not(.used) {
      transform: translateY(-2px);
      border-color: var(--muted-green);
    }
    .coupon-code {
      font-family: 'Aboreto', cursive;
      color: var(--darker-text);
      font-size: clamp(1rem, 3vw, 1.2rem);
      margin-bottom: 0.75rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    .coupon-code i {
      color: var(--soft-beige);
    }
    .coupon-details {
      color: var(--dark-text);
      font-size: clamp(0.9rem, 2.5vw, 1rem);
    }
    .coupon-discount {
      color: var(--offer-red);
      font-weight: 600;
    }
    .coupon-min-order {
      color: var(--soft-beige);
      font-size: clamp(0.8rem, 2vw, 0.9rem);
      margin-top: 0.5rem;
    }
    .coupon-expiry {
      color: #666;
      font-size: clamp(0.8rem, 2vw, 0.9rem);
      margin-top: 0.5rem;
    }
    .copy-coupon-btn {
      background: var(--darker-text);
      border: none;
      color: white;
      width: clamp(36px, 8vw, 40px);
      height: clamp(36px, 8vw, 40px);
      border-radius: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    .copy-coupon-btn:hover {
      background: var(--muted-green);
      transform: translateY(-1px);
    }
    .apply-coupon-btn {
      background: var(--darker-text);
      border: none;
      color: white;
      width: clamp(40px, 10vw, 48px);
      height: clamp(40px, 10vw, 48px);
      border-radius: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s ease;
      cursor: pointer;
    }
    .apply-coupon-btn:hover:not(:disabled) {
      background: var(--muted-green);
      transform: translateY(-1px);
    }
    .apply-coupon-btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      background: #ccc;
    }
    .stock-info {
      margin-top: 0.75rem;
      font-size: clamp(0.8rem, 2vw, 0.9rem);
    }
    .stock-info small {
      color: var(--soft-beige);
      font-style: italic;
    }
    .stock-info small.text-warning {
      color: var(--offer-red);
    }
    .empty-cart {
      text-align: center;
      padding: clamp(3rem, 8vw, 4rem);
      background: transparent;
      border-radius: 0;
    }
    .empty-cart-icon {
      font-size: clamp(4rem, 10vw, 5rem);
      color: var(--soft-beige);
      margin-bottom: 1.5rem;
    }
    .empty-cart-text {
      font-family: 'Aboreto', cursive;
      color: var(--darker-text);
      font-size: clamp(1.5rem, 4vw, 1.8rem);
      margin-bottom: 1rem;
    }
    .empty-cart-subtext {
      color: var(--dark-text);
      margin-bottom: 2rem;
      font-size: clamp(1rem, 3vw, 1.2rem);
    }
    .continue-shopping-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: clamp(1rem, 3vw, 1.2rem) clamp(2rem, 5vw, 2.5rem);
      background: var(--darker-text);
      color: white;
      border: none;
      border-radius: 0;
      font-family: 'Jost', sans-serif;
      font-size: clamp(1rem, 3vw, 1.2rem);
      font-weight: 500;
      text-decoration: none;
      transition: all 0.3s ease;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    .continue-shopping-btn:hover {
      background: var(--muted-green);
      transform: translateY(-2px);
    }
        /* --- Order Summary Sidebar --- */
        .order-summary {
            position: sticky;
            top: 2rem;
        }
        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            color: var(--dark-text);
        }
        .summary-total {
            font-weight: 600;
            font-size: 1.2rem;
            color: var(--darker-text);
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
        }
        .checkout-btn {
            background: var(--darker-text);
            border: none;
            color: white;
            font-family: 'Jost', sans-serif;
            font-size: 1rem;
            padding: 1rem;
            border-radius: 0;
            width: 100%;
            margin-top: 1.5rem;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        .checkout-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background: #ccc;
        }
        /* --- Responsive Container --- */
        .main-content-container {
            padding-left: 1rem;
            padding-right: 1rem;
        }
        @media (min-width: 768px) {
            .main-content-container {
                padding-left: 4rem;
                padding-right: 4rem;
            }
        }
        @media (min-width: 1200px) {
            .main-content-container {
                padding-left: 6rem;
                padding-right: 6rem;
                max-width: 1400px;
                margin-left: auto;
                margin-right: auto;
            }
        }
    </style>
</head>
<body>
<%-include('../partials/user/header.ejs')  %>
    <div class="container-fluid main-content-container">
        <h1 class="checkout-title">Checkout</h1>
        <div class="checkout-grid">
            <div class="checkout-main">
                <!-- Order Section -->
                <div class="checkout-section">
                    <h2 class="section-title">Your Order</h2>
                    <% if (items && items.length > 0) { %>
                        <% items.forEach(item => { %>
                            <div class="order-item">
                                <img src="/uploads/product/<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" class="order-item-img">
                                <div class="order-item-details">
                                    <h3 class="order-item-name"><%= item.productId.productName %></h3>
                                    <p class="order-item-info">Size: <%= item.size || 'Default' %></p>
                                    <p class="order-item-info">Quantity: <%= item.quantity %></p>
                                    <div class="order-item-price">
                                        <% if (item.offerDiscount > 0) { %>
                                            <span class="text-decoration-line-through text-muted">₹<%= (item.originalPrice).toLocaleString() %></span>
                                            <span class="text-success ms-2">₹<%= (item.originalPrice - item.offerDiscount).toLocaleString() %></span>
                                            <div style="font-size:0.95em;color:#888;margin-top:2px;">
                                            </div>
                                        <% } else { %>
                                            <span>₹<%= item.totalPrice.toLocaleString() %></span>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="empty-cart">
                            <i class="fas fa-shopping-cart empty-cart-icon"></i>
                            <h3 class="empty-cart-text">Your cart is empty</h3>
                            <p class="empty-cart-subtext">Looks like you haven't added any items to your cart yet.</p>
                            <a href="/shopAll" class="continue-shopping-btn">
                                <i class="fas fa-shopping-cart"></i> Continue Shopping
                            </a>
                        </div>
                    <% } %>
                </div>
                <!-- Address Section -->
                <div class="checkout-section">
                    <h2 class="section-title">Select Address</h2>
                    <% if (typeof addresses !== 'undefined' && addresses.length > 0) { %>
                        <% const defaultAddress = addresses.find(addr => addr.isDefault) || addresses[0]; %>
                        <% const otherAddresses = addresses.filter(addr => addr._id.toString() !== defaultAddress._id.toString()); %>
                        <!-- Default Address -->
                        <div class="address-details default-address" data-address-id="<%= defaultAddress._id %>">
                            <div class="default-badge">Default Address</div>
                            <p><strong><%= defaultAddress.name %></strong></p>
                            <p><%= defaultAddress.houseNo || '' %>, <%= defaultAddress.roadArea || '' %></p>
                            <p><%= defaultAddress.city %>, <%= defaultAddress.state %> - <%= defaultAddress.pincode %></p>
                            <p>Phone: <%= defaultAddress.phone %></p>
                            <div class="address-actions">
                                <a href="/update/address/<%= defaultAddress._id %>?from=checkout" class="address-btn">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <button class="address-btn remove-btn">
                                    <i class="fas fa-trash"></i> Remove
                                </button>
                            </div>
                        </div>
                        <!-- Other Addresses -->
                        <% if (otherAddresses.length > 0) { %>
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h3 class="other-addresses-title mb-0">Other Addresses</h3>
                                <button class="show-addresses-btn" onclick="toggleAddresses()">
                                    <span class="show-text">Show All</span>
                                    <i class="fas fa-chevron-down"></i>
                                </button>
                            </div>
                            <div class="address-list" id="addressList" style="display: none;">
                                <% otherAddresses.forEach(address => { %>
                                    <div class="address-details" data-address-id="<%= address._id %>">
                                        <p><strong><%= address.name %></strong></p>
                                        <p><%= address.houseNo || '' %>, <%= address.roadArea || '' %></p>
                                        <p><%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                                        <p>Phone: <%= address.phone %></p>
                                        <div class="address-actions">
                                            <button class="set-default-btn" onclick="setDefaultAddress('<%= address._id %>')">
                                                Set as Default
                                            </button>
                                            <a href="/update/address/<%= address._id %>?from=checkout" class="address-btn">
                                                <i class="fas fa-edit"></i> Edit
                                            </a>
                                            <button class="address-btn remove-btn" onclick="removeAddress('<%= address._id %>')">
                                                <i class="fas fa-trash"></i> Remove
                                            </button>
                                        </div>
                                    </div>
                                <% }) %>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="address-details">
                            <p>No address provided</p>
                        </div>
                    <% } %>
                    <div class="address-actions">
                        <a href="/add-address?from=checkout" class="address-btn">
                            <i class="fas fa-plus"></i> Add New Address
                        </a>
                    </div>
                </div>
                <!-- Delivery Information Section -->
                <div class="checkout-section">
                    <h2 class="section-title">Delivery Information</h2>
                    <div class="delivery-info">
                        <p><i class="fas fa-truck"></i> Estimated Delivery: <%= new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' }) %></p>
                        <p><i class="fas fa-shipping-fast"></i> Shipping Method: Standard Shipping</p>
                        <p><i class="fas fa-map-marker-alt"></i> Tracking: Available upon dispatch</p>
                    </div>
                </div>
            </div>
            <!-- Order Summary Sidebar -->
            <div class="order-summary">
                <div class="checkout-section">
                    <h2 class="section-title">Order Summary</h2>
                    <% if (items && items.length > 0) { %>
                        <div class="summary-row">
                            <span>Subtotal</span>
                            <span id="subtotal">₹<%= totalPrice.toLocaleString() %></span>
                        </div>
                        <div class="summary-row text-success" id="offer-discount-row" style="display: <%= totalOfferDiscount > 0 ? 'flex' : 'none' %>;">
                            <span>Offer Discount</span>
                            <span id="offer-discount">-₹<%= totalOfferDiscount.toLocaleString() %></span>
                        </div>
                        <div class="summary-row text-success" id="coupon-discount-row" style="display: <%= totalCouponDiscount > 0 ? 'flex' : 'none' %>;">
                            <span>Coupon Discount</span>
                            <span id="coupon-discount">-₹<%= totalCouponDiscount.toLocaleString() %></span>
                        </div>
                        <div class="summary-row">
                            <span>Shipping</span>
                            <span id="shipping"><%= shipping === 0 ? 'Free' : '₹' + shipping.toLocaleString() %></span>
                        </div>
                        <div class="summary-row summary-total">
                            <span>Total</span>
                            <span id="finalPrice">₹<%= finalPrice.toLocaleString() %></span>
                        </div>
                        <div class="coupon-section">
                           <div class="coupon-section">
                        <h4 class="coupon-title">Apply Coupon</h4>
                        <div class="coupon-input-group">
                            <input type="text" class="coupon-input" id="couponCode" placeholder="Enter coupon code" <%= couponApplied ? 'disabled' : '' %>>
                            <button class="apply-coupon-btn" onclick="applyCoupon()" <%= couponApplied ? 'disabled' : '' %>>
                                <i class="fas fa-check"></i>
                            </button>
                        </div>
                        <% if (couponApplied) { %>
                            <div class="applied-coupon">
                                <div class="d-flex align-items-center justify-content-between">
                                    <div class="d-flex align-items-center gap-2">
                                        <span class="text-success">Coupon Applied:</span>
                                        <span class="coupon-code"><i class="fas fa-tag"></i> <%= couponApplied.code %></span>
                                        <span class="text-success">(<%= couponApplied.discountType === 'percentage' ? 
                                            `${couponApplied.discountValue}% off` : 
                                            `₹${couponApplied.discountValue} off` %>)</span>
                                    </div>
                                    <button class="remove-coupon-btn" onclick="removeCoupon()" title="Remove coupon">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <div class="text-success mt-1">
                                    You saved: ₹<%= totalCouponDiscount.toLocaleString() %>
                                </div>
                            </div>
                        <% } %>
                    </div>
                    <div class="available-coupons">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h4 class="coupon-title mb-0">Available Coupons</h4>
                            <button class="show-coupons-btn" onclick="toggleCoupons()">
                                <span class="show-text">Show All</span>
                                <i class="fas fa-chevron-down"></i>
                            </button>
                        </div>
                        <div class="coupon-list" id="couponList" style="display: none;">
                            <% if (coupons && coupons.length > 0) { %>
                                <% coupons.forEach(coupon => { %>
                                    <div class="coupon-item <%= couponApplied && couponApplied.code === coupon.code ? 'applied' : '' %> <%= coupon.usedBy && coupon.usedBy.includes(user.id) ? 'used' : '' %>"
                                        style="<%= coupon.usedBy && coupon.usedBy.includes(user.id) ? 'pointer-events: none; opacity: 0.7; cursor: not-allowed;' : '' %>"
                                        onclick="<%= (!couponApplied && !(coupon.usedBy && coupon.usedBy.includes(user.id))) ? `selectCoupon('${coupon.code}')` : '' %>">
                                        <div class="d-flex align-items-center justify-content-between">
                                            <div class="coupon-code">
                                                <i class="fas fa-tag"></i>
                                                <%= coupon.code %>
                                                <% if (coupon.usedBy && coupon.usedBy.includes(user.id)) { %>
                                                    <span class="badge bg-secondary ms-2">Already Used</span>
                                                <% } %>
                                            </div>
                                            <button class="copy-coupon-btn" onclick="copyCouponCode('<%= coupon.code %>', event)" title="Copy coupon code">
                                                <i class="fas fa-copy"></i>
                                            </button>
                                        </div>
                                        <div class="coupon-details">
                                            <span class="coupon-discount">
                                                <%= coupon.discountType === 'percentage' ? 
                                                    `${coupon.discountValue}% OFF` : 
                                                    `₹${coupon.discountValue} OFF` %>
                                            </span>
                                            <% if (coupon.maxDiscount) { %>
                                                <span class="coupon-min-order">
                                                    (Max discount: ₹<%= coupon.maxDiscount %>)
                                                </span>
                                            <% } %>
                                        </div>
                                        <% if (coupon.minOrderAmount) { %>
                                            <div class="coupon-min-order">
                                                Min. order: ₹<%= coupon.minOrderAmount %>
                                            </div>
                                        <% } %>
                                        <% if (coupon.expiryDate) { %>
                                            <div class="coupon-expiry">
                                                Expires: <%= new Date(coupon.expiryDate).toLocaleDateString() %>
                                            </div>
                                        <% } %>
                                        <% if (coupon.usedBy && coupon.usedBy.includes(user.id)) { %>
                                            <div class="text-muted mt-2">
                                                <small><i class="fas fa-info-circle"></i> You have already used this coupon in a previous order</small>
                                            </div>
                                        <% } %>
                                    </div>
                                <% }) %>
                            <% } else { %>
                                <p class="text-muted">No coupons available at the moment</p>
                            <% } %>
                        </div>
                    </div>
                        <button class="checkout-btn" onclick="proceedToPayment()" <%= items.length === 0 ? 'disabled' : '' %>>
                            <i class="fas fa-lock"></i> Proceed to Payment
                        </button>
                    <% } else { %>
                        <div class="summary-row">
                            <span>Subtotal</span>
                            <span>₹0</span>
                        </div>
                        <div class="summary-row">
                            <span>Shipping</span>
                            <span>Free</span>
                        </div>
                        <div class="summary-row summary-total">
                            <span>Total</span>
                            <span>₹0</span>
                        </div>
                        <button class="checkout-btn" disabled>
                            <i class="fas fa-lock"></i> Proceed to Payment
                        </button>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <%- include("../../views/partials/user/fooret.ejs") %>

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
        console.log('Checkout page script loaded');

        function setDefaultAddress(addressId) {
            console.log('setDefaultAddress called with ID:', addressId);
            Swal.fire({
                title: 'Set as Default?',
                text: 'Do you want to set this address as your default address?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3e4c22',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, set as default'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log('User confirmed setting default address');
                    fetch('/set-default-address', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({ addressId })
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`Failed to set default address (Status: ${response.status}, Response: ${text})`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Server response:', data);
                        if (data.success) {
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'success',
                                title: 'Default address updated successfully',
                                showConfirmButton: false,
                                timer: 3000,
                                timerProgressBar: true
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            throw new Error(data.message || 'Failed to set default address');
                        }
                    })
                    .catch(error => {
                        console.error('Error in setDefaultAddress:', error);
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: error.message || 'An error occurred while setting default address',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    });
                }
            });
        }

        function removeAddress(addressId) {
            console.log('removeAddress called with ID:', addressId);
            Swal.fire({
                title: 'Remove Address?',
                text: 'Are you sure you want to remove this address?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3e4c22',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, remove it'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log('User confirmed removing address');
                    fetch('/remove-address', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest' // Add this header to identify AJAX requests
                        },
                        body: JSON.stringify({ addressId }),
                        redirect: 'follow' // Follow redirects
                    })
                    .then(async response => {
                        const contentType = response.headers.get('content-type');
                        
                        // If the response is a redirect (last address removed)
                        if (response.redirected) {
                            window.location.href = response.url;
                            return;
                        }
                        
                        // If response is JSON, parse it
                        if (contentType && contentType.includes('application/json')) {
                            const data = await response.json();
                            
                            if (!response.ok) {
                                throw new Error(data.message || `Failed to remove address (Status: ${response.status})`);
                            }
                            
                            console.log('Server response:', data);
                            
                            if (data.success) {
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'success',
                                    title: 'Address has been removed successfully',
                                    showConfirmButton: false,
                                    timer: 3000,
                                    timerProgressBar: true
                                }).then(() => {
                                    location.reload();
                                });
                                return;
                            }
                            
                            throw new Error(data.message || 'Failed to remove address');
                        }
                        
                        // If we get here, it's not JSON and not a redirect, so handle as error
                        const text = await response.text();
                        throw new Error(`Unexpected response format: ${text}`);
                    })
                    .catch(error => {
                        console.error('Error in removeAddress:', error);
                        
                        // If it's a redirect error, let the browser handle it
                        if (error.message.includes('Failed to fetch') || 
                            error.message.includes('redirect')) {
                            window.location.reload();
                            return;
                        }
                        
                        // Show error message for other errors
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: error.message || 'An error occurred while removing the address',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true
                        });
                    });
                }
            });
        }

        function toggleAddresses() {
            const addressList = document.getElementById('addressList');
            const showBtn = document.querySelector('.show-addresses-btn');
            const showText = showBtn.querySelector('.show-text');
            if (addressList.style.display === 'none') {
                addressList.style.display = 'block';
                showText.textContent = 'Hide';
                showBtn.classList.add('active');
            } else {
                addressList.style.display = 'none';
                showText.textContent = 'Show All';
                showBtn.classList.remove('active');
            }
        }

        function updateSummaryDiscounts(offerDiscount, couponDiscount) {
            const offerDiscountRow = document.getElementById('offer-discount-row');
            const couponDiscountRow = document.getElementById('coupon-discount-row');
            if (offerDiscount > 0) {
                offerDiscountRow.style.display = 'flex';
                document.getElementById('offer-discount').textContent = `-₹${offerDiscount.toLocaleString()}`;
            } else {
                offerDiscountRow.style.display = 'none';
            }
            if (couponDiscount > 0) {
                couponDiscountRow.style.display = 'flex';
                document.getElementById('coupon-discount').textContent = `-₹${couponDiscount.toLocaleString()}`;
            } else {
                couponDiscountRow.style.display = 'none';
            }
        }

        async function applyCoupon() {
            const code = document.getElementById('couponCode').value.trim();
            if (!code) {
                showNotification('Please enter a coupon code', 'error');
                return;
            }
            await applyCouponCode(code);
        }

        async function selectCoupon(code) {
            if (!code) {
                showNotification('Invalid coupon code', 'error');
                return;
            }
            const couponInput = document.getElementById('couponCode');
            const applyButton = document.querySelector('.apply-coupon-btn');
            couponInput.value = code;
            applyButton.disabled = false;
            await applyCouponCode(code);
        }

        async function copyCouponCode(code, event) {
            event.stopPropagation();
            try {
                await navigator.clipboard.writeText(code);
                showNotification('Coupon code copied to clipboard', 'success');
            } catch (error) {
                console.error('Error copying coupon code:', error);
                showNotification('Failed to copy coupon code', 'error');
            }
        }

        async function applyCouponCode(code) {
            try {
                const response = await fetch('/apply-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({ code })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error(`Apply Coupon Failed - Status: ${response.status}, Response: ${errorText}`);
                    let errorMessage = `Failed to apply coupon (Status: ${response.status})`;
                    if (response.status === 401) {
                        errorMessage = 'Please log in to apply coupon';
                    } else if (response.status === 400) {
                        try {
                            const errorData = JSON.parse(errorText);
                            errorMessage = errorData.message || 'Invalid coupon code';
                        } catch (e) {
                            errorMessage = 'Invalid request';
                        }
                    } else if (response.status === 500) {
                        errorMessage = 'Server error occurred';
                    }
                    showNotification(errorMessage, 'error');
                    return;
                }

                let data;
                try {
                    data = await response.json();
                } catch (e) {
                    console.error('Error parsing JSON response:', e);
                    showNotification('Invalid server response format', 'error');
                    return;
                }

                if (!data || typeof data !== 'object') {
                    console.error('Invalid response structure:', data);
                    showNotification('Unexpected server response', 'error');
                    return;
                }

                if (data.success) {
                    showNotification(data.message || 'Successfully applied', 'success');
                    document.getElementById('subtotal').textContent = `₹${data.totals.subtotal.toLocaleString()}`;
                    document.getElementById('shipping').textContent = data.totals.shipping === 0 ? 'Free' : `₹${data.totals.shipping.toLocaleString()}`;
                    document.getElementById('finalPrice').textContent = `₹${data.totals.finalPrice.toLocaleString()}`;
                    updateSummaryDiscounts(data.totals.offerDiscount, data.totals.couponDiscount);
                    let couponSection = document.querySelector('.applied-coupon');
                    if (!couponSection) {
                        couponSection = document.createElement('div');
                        couponSection.className = 'applied-coupon';
                        document.querySelector('.coupon-input-group').after(couponSection);
                    }
                    const discountText = data.coupon.discountType === 'percentage' 
                        ? `${data.coupon.discountValue}% off` 
                        : `₹${data.coupon.discountValue.toLocaleString()} off`;
                    couponSection.innerHTML = `
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center gap-2">
                                <span class="text-success">Coupon Applied:</span>
                                <span class="coupon-code"><i class="fas fa-tag"></i> ${data.coupon.code}</span>
                                <span class="text-success">(${discountText})</span>
                            </div>
                            <button class="remove-coupon-btn" onclick="removeCoupon()" title="Remove coupon">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                        <div class="text-success mt-1">
                            You saved: ₹${data.totals.couponDiscount.toLocaleString()}
                        </div>
                    `;
                    document.getElementById('couponCode').value = '';
                    document.getElementById('couponCode').disabled = true;
                    document.querySelector('.apply-coupon-btn').disabled = true;
                    const couponItems = document.querySelectorAll('.coupon-item');
                    couponItems.forEach(item => {
                        const codeText = item.querySelector('.coupon-code').textContent.trim().split(' ')[0];
                        if (codeText === data.coupon.code) {
                            item.classList.add('applied');
                            item.onclick = null;
                        }
                    });
                    if (Array.isArray(data.items)) {
                        data.items.forEach(item => {
                            const orderItem = document.querySelector(`.order-item[data-id="${item._id}"]`) || document.createElement('div');
                            orderItem.setAttribute('data-id', item._id);
                            const priceElement = orderItem.querySelector('.order-item-price');
                            if (priceElement) {
                                priceElement.innerHTML = item.offerDiscount || item.couponDiscount
                                    ? `<span class="text-decoration-line-through text-muted">₹${(item.originalPrice * item.quantity).toLocaleString()}</span> <span class="text-success ms-2">₹${item.totalPrice.toLocaleString()}</span>`
                                    : `₹${item.totalPrice.toLocaleString()}`;
                            }
                            const discountBadge = orderItem.querySelector('.discount-badge');
                            if (discountBadge) {
                                let badgeHTML = '';
                                if (item.offerDiscount > 0) {
                                    badgeHTML += `<span class="badge bg-success me-2">Offer: -₹${item.offerDiscount.toLocaleString()}</span>`;
                                }
                                if (item.couponDiscount > 0) {
                                    badgeHTML += `<span class="badge bg-primary">Coupon: -₹${item.couponDiscount.toLocaleString()}</span>`;
                                }
                                discountBadge.innerHTML = badgeHTML;
                            }
                        });
                    } else {
                        console.warn('No items array in response:', data);
                    }
                    location.reload();
                } else {
                    console.warn('Coupon application failed:', data.message);
                    showNotification(data.message || 'Failed to apply coupon', 'error');
                }
            } catch (error) {
                console.error('Error in applyCouponCode:', error);
                showNotification(`Error applying coupon: ${error.message || 'Unknown error'}`, 'error');
            }
        }

        async function removeCoupon() {
            try {
                const result = await Swal.fire({
                    title: 'Remove Coupon',
                    text: 'Are you sure you want to remove this coupon?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3e4c22',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!'
                });
                if (!result.isConfirmed) return;

                const response = await fetch('/remove-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error(`Remove Coupon Failed - Status: ${response.status}, Response: ${errorText}`);
                    let errorMessage = `Failed to remove coupon (Status: ${response.status})`;
                    if (response.status === 401) {
                        errorMessage = 'Please log in to remove coupon';
                    } else if (response.status === 400) {
                        try {
                            const errorData = JSON.parse(errorText);
                            errorMessage = errorData.message || 'Invalid request';
                        } catch (e) {
                            errorMessage = 'Invalid request';
                        }
                    } else if (response.status === 500) {
                        errorMessage = 'Server error occurred';
                    }
                    showNotification(errorMessage, 'error');
                    return;
                }

                let data;
                try {
                    data = await response.json();
                } catch (e) {
                    console.error('Error parsing JSON response:', e);
                    showNotification('Invalid server response format', 'error');
                    return;
                }

                if (!data || typeof data !== 'object') {
                    console.error('Invalid response structure:', data);
                    showNotification('Unexpected server response', 'error');
                    return;
                }

                if (data.success) {
                    const couponSection = document.querySelector('.applied-coupon');
                    if (couponSection) couponSection.remove();
                    document.getElementById('subtotal').textContent = `₹${data.totals.subtotal.toLocaleString()}`;
                    document.getElementById('shipping').textContent = data.totals.shipping === 0 ? 'Free' : `₹${data.totals.shipping.toLocaleString()}`;
                    document.getElementById('finalPrice').textContent = `₹${data.totals.finalPrice.toLocaleString()}`;
                    updateSummaryDiscounts(data.totals.offerDiscount, data.totals.couponDiscount);
                    document.getElementById('couponCode').disabled = false;
                    document.querySelector('.apply-coupon-btn').disabled = false;
                    const couponItems = document.querySelectorAll('.coupon-item');
                    couponItems.forEach(item => {
                        item.classList.remove('applied');
                        const code = item.querySelector('.coupon-code').textContent.trim().split(' ')[0];
                        if (!item.classList.contains('used')) {
                            item.onclick = () => selectCoupon(code);
                        }
                    });
                    if (Array.isArray(data.items)) {
                        data.items.forEach(item => {
                            const orderItem = document.querySelector(`.order-item[data-id="${item._id}"]`) || document.createElement('div');
                            orderItem.setAttribute('data-id', item._id);
                            const priceElement = orderItem.querySelector('.order-item-price');
                            if (priceElement) {
                                priceElement.innerHTML = item.offerDiscount || item.couponDiscount
                                    ? `<span class="text-decoration-line-through text-muted">₹${(item.originalPrice * item.quantity).toLocaleString()}</span> <span class="text-success ms-2">₹${item.totalPrice.toLocaleString()}</span>`
                                    : `₹${item.totalPrice.toLocaleString()}`;
                            }
                            const discountBadge = orderItem.querySelector('.discount-badge');
                            if (discountBadge) {
                                let badgeHTML = '';
                                if (item.offerDiscount > 0) {
                                    badgeHTML += `<span class="badge bg-success me-2">Offer: -₹${item.offerDiscount.toLocaleString()}</span>`;
                                }
                                if (item.couponDiscount > 0) {
                                    badgeHTML += `<span class="badge bg-primary">Coupon: -₹${item.couponDiscount.toLocaleString()}</span>`;
                                }
                                discountBadge.innerHTML = badgeHTML;
                            }
                        });
                    } else {
                        console.warn('No items array in response:', data);
                    }
                    showNotification(data.message || 'Coupon removed successfully', 'success');
                    location.reload();
                } else {
                    console.warn('Coupon removal failed:', data.message);
                    showNotification(data.message || 'Failed to remove coupon', 'error');
                }
            } catch (error) {
                console.error('Error in removeCoupon:', error);
                showNotification(`Error removing coupon: ${error.message || 'Unknown error'}`, 'error');
            }
        }

        function proceedToPayment() {
            if (!<%= addresses && addresses.length > 0 ? 'true' : 'false' %>) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'warning',
                    title: 'Please add a shipping address before proceeding',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                return;
            }

            const defaultAddress = document.querySelector('.default-address');
            if (!defaultAddress) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'No default address found',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                return;
            }

            const addressId = defaultAddress.getAttribute('data-address-id');
            if (!addressId) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Invalid address selection',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                return;
            }

            const payNowBtn = document.querySelector('.checkout-btn');
            if (payNowBtn) {
                payNowBtn.disabled = true;
                payNowBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
            }

            window.location.href = `/proceed-payment?addressId=${addressId}`;
        }

        function showNotification(message, type) {
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: type === 'success' ? '#4a6741' : '#e63946',
                stopOnFocus: true,
                style: {
                    fontFamily: "'Jost', sans-serif",
                    fontSize: "14px",
                    padding: "12px 20px",
                    borderRadius: "8px",
                    boxShadow: "0 4px 12px rgba(0,0,0,0.1)"
                }
            }).showToast();
        }

        function toggleCoupons() {
            const couponList = document.getElementById('couponList');
            const showBtn = document.querySelector('.show-coupons-btn');
            const showText = showBtn.querySelector('.show-text');
            if (couponList.style.display === 'none') {
                couponList.style.display = 'block';
                showText.textContent = 'Hide';
                showBtn.classList.add('active');
            } else {
                couponList.style.display = 'none';
                showText.textContent = 'Show All';
                showBtn.classList.remove('active');
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, adding event listeners');
            document.querySelectorAll('.set-default-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const addressContainer = this.closest('.address-details');
                    if (!addressContainer) {
                        console.error('Could not find address container');
                        return;
                    }
                    const addressId = addressContainer.dataset.addressId;
                    if (!addressId) {
                        console.error('No address ID found');
                        return;
                    }
                    console.log('Set default button clicked for address:', addressId);
                    setDefaultAddress(addressId);
                });
            });

            document.querySelectorAll('.remove-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const addressContainer = this.closest('.address-details');
                    if (!addressContainer) {
                        console.error('Could not find address container');
                        return;
                    }
                    const addressId = addressContainer.dataset.addressId;
                    if (!addressId) {
                        console.error('No address ID found');
                        return;
                    }
                    console.log('Remove button clicked for address:', addressId);
                    removeAddress(addressId);
                });
            });
        });
    </script>
</body>
</html>