<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login</title>
  <link href="https://fonts.googleapis.com/css2?family=Aboreto&family=Jost:wght@400;500&display=swap" rel="stylesheet">
<link rel="icon" href="/images/image.png" type="image/png">

  <style>
    :root {
      --dark-brown: #291d0e;
      --olive-green: #314216;
      --light-bg: #f8f5f2;
      --border-color: #d3c9be;
      --text-color: #333;
      --error-color: #dc3545;
      --success-color: #28a745;
      --info-color: #17a2b8;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      background-color: var(--light-bg);
      font-family: 'Jost', sans-serif;
      color: var(--text-color);
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 1rem;
    }

    .auth-container {
      width: 100%;
      max-width: 400px;
      padding: 2.5rem;
      background: white;
      box-shadow: 0 4px 16px rgba(41, 29, 14, 0.1);
      border-radius: 4px;
      text-align: center;
    }

    .auth-heading {
      font-family: 'Aboreto', cursive;
      color: var(--dark-brown);
      margin-bottom: 2rem;
      letter-spacing: 1px;
      text-transform: uppercase;
    }

    .form-control {
      width: 100%;
      padding: 0.75rem 0;
      margin-bottom: 0.5rem;
      border: none;
      border-bottom: 1px solid var(--border-color);
      background: transparent;
      font-family: 'Jost', sans-serif;
      transition: border-color 0.3s ease;
    }

    .form-control:focus {
      outline: none;
      border-bottom-color: var(--dark-brown);
    }

    .alert {
      padding: 0.75rem;
      margin: 0.5rem 0 1rem;
      border-radius: 4px;
      font-size: 0.875rem;
      text-align: left;
    }

    .alert-error {
      background-color: #f8d7da;
      color: var(--error-color);
      border: 1px solid #f5c6cb;
    }

    .alert-success {
      background-color: #d4edda;
      color: var(--success-color);
      border: 1px solid #c3e6cb;
    }

    .alert-info {
      background-color: #d1ecf1;
      color: var(--info-color);
      border: 1px solid #bee5eb;
    }

    .auth-btn {
      width: 100%;
      padding: 0.75rem;
      margin: 1.5rem 0;
      background-color: var(--dark-brown);
      color: white;
      border: none;
      font-family: 'Jost', sans-serif;
      font-weight: 500;
      letter-spacing: 0.5px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .auth-btn:hover {
      background-color: var(--olive-green);
      transform: translateY(-2px);
    }

    .hidden {
      display: none;
    }
  </style>
</head>

<body>
  <div class="auth-container">
    <h1 class="auth-heading">New Password</h1>

    <form id="passwordForm" action="/get-reset-password" method="POST">
    

      <input type="password" name="password" id="password" placeholder="Enter New Password" class="form-control">

      <input type="password" name="Cpassword" id="Cpassword" placeholder="Confirm New Password" class="form-control">

       <!-- Error messages container -->
      <div id="errorMessages"></div>

      <!-- Success message container -->
      <div id="successMessage" class="alert alert-success hidden"></div>

      <!-- Info message container -->
      <div id="infoMessage" class="alert alert-info hidden"></div>

          <button type="submit" class="auth-btn">Submit</button>
    </form>
  </div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('passwordForm');
    const passwordField = document.getElementById('password');
    const originalPassword = passwordField ? passwordField.defaultValue : '';
    const errorMessages = document.getElementById('errorMessages');
    const infoMessage = document.getElementById('infoMessage');

   
    const serverMessage = document.querySelector('.alert-error');
    if (serverMessage && serverMessage.textContent.trim()) {
      showMessage('error', serverMessage.textContent.trim());
    }

    if (passwordField) {
      passwordField.addEventListener('change', function() {
        if (this.value === originalPassword) {
          showMessage('info', 'You entered the same password as before');
        } else {
          hideMessage('info');
        }
      });
    }

    if (form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        hideAllMessages();
        
        const password = document.getElementById('password').value;
        const Cpassword = document.getElementById('Cpassword').value;
        let isValid = true;

        const pattern = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/;

        if (password === '' || Cpassword === '') {
          showMessage('error', 'All fields are required');
          isValid = false;
        } else if (!pattern.test(password)) {
          showMessage('error', "Must contain at least one number, one uppercase, and one lowercase letter");
          isValid = false;
        } else if (password.length < 8) {
          showMessage('error', 'Password must be at least 8 characters');
          isValid = false;
        } else if (password !== Cpassword) {
          showMessage('error', 'Passwords do not match');
          isValid = false;
        } else if (password === originalPassword) {
          showMessage('info', 'New password matches the old one');
          isValid = false;
        }

        if (isValid) {
          Swal.fire({
            title: 'Success!',
            text: 'Password updated successfully!',
            icon: 'success',
            confirmButtonColor: '#291d0e',
            confirmButtonText: 'OK'
          }).then((result) => {
            if (result.isConfirmed) {
              form.submit();
            }
          });
        }
      });
    }

    function showMessage(type, message) {
      hideAllMessages();
      
      switch(type) {
        case 'error':
          errorMessages.innerHTML = `<div class="alert alert-error">${message}</div>`;
          break;
        case 'info':
          infoMessage.textContent = message;
          infoMessage.classList.remove('hidden');
          break;
      }
    }

    function hideMessage(type) {
      switch(type) {
        case 'error':
          errorMessages.innerHTML = '';
          break;
        case 'info':
          infoMessage.classList.add('hidden');
          break;
      }
    }

    function hideAllMessages() {
      errorMessages.innerHTML = '';
      infoMessage.classList.add('hidden');
    }
  });
</script>
</body>

</html>