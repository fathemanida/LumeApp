<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LUME - Secure Payment</title>
    <link href="https://fonts.googleapis.com/css2?family=Aboreto&family=Jost:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <link rel="icon" href="/images/image.png" type="image/png">

  <style>
:root {
    --soft-beige: #D4B996;
    --muted-green: #A9BA9D;
    --light-bg: #f8f5f2;
    --border-color: #e0d8cc;
    --offer-red: #e63946;
    --dark-text: #2c1810;
    --darker-text: #1a0f0a;
}

html, body {
    font-family: 'Jost', sans-serif;
    background-color: #f0e9e0;
    color: var(--dark-text);
    min-height: 100vh;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    overflow-x: hidden;
}



.payment-container {
    max-width: 1400px;
    margin: clamp(2rem, 5vw, 4rem) auto;
    padding: clamp(1.5rem, 4vw, 3rem);
    background: #f0e9e0;
    border-radius: 0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.payment-title {
    font-family: 'Aboreto', cursive;
    font-size: clamp(2.5rem, 5vw, 3rem);
    margin-bottom: clamp(2rem, 5vw, 3rem);
    color: var(--darker-text);
    text-align: center;
    letter-spacing: 1.5px;
}

.payment-section {
    display: flex;
    flex-direction: column;
    gap: clamp(1.5rem, 4vw, 2rem);
}

.payment-form-section {
    padding: clamp(1.5rem, 4vw, 2.5rem);
    background: transparent;
    border-radius: 0;
    border: 1px solid var(--border-color);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.payment-form-title {
    font-family: 'Aboreto', cursive;
    font-size: clamp(1.8rem, 4vw, 2rem);
    color: var(--darker-text);
    margin-bottom: clamp(1.5rem, 4vw, 2rem);
}

.security-notice {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: clamp(0.9rem, 2.5vw, 1rem);
    color: var(--dark-text);
    margin-bottom: 1.5rem;
}

.security-notice i {
    color: var(--muted-green);
    font-size: clamp(1rem, 2.5vw, 1.1rem);
}

.payment-methods {
    margin-bottom: clamp(1.5rem, 4vw, 2rem);
}

.payment-methods label {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: clamp(1rem, 2.5vw, 1.1rem);
    color: var(--darker-text);
    margin-bottom: 1rem;
    cursor: pointer;
}

.payment-form {
    display: none;
}

.payment-form.active {
    display: block;
}

.form-group {
    margin-bottom: clamp(1rem, 2.5vw, 1.5rem);
}

.form-group label {
    display: block;
    margin-bottom: 0.75rem;
    color: var(--darker-text);
    font-weight: 500;
    font-size: clamp(0.9rem, 2.5vw, 1rem);
}

.form-group input {
    width: 100%;
    padding: clamp(0.75rem, 2vw, 1rem);
    border: 1px solid var(--border-color);
    border-radius: 0;
    font-size: clamp(0.9rem, 2.5vw, 1rem);
    background-color: var(--light-bg);
}

.form-group input:focus {
    outline: none;
    border-color: var(--soft-beige);
}

.card-details {
    display: grid;
    grid-template-columns: 1fr;
    gap: clamp(1rem, 2.5vw, 1.5rem);
}

.cod-message {
    font-size: clamp(0.9rem, 2.5vw, 1rem);
    color: var(--dark-text);
    margin-bottom: 1.5rem;
}

.order-summary {
    padding: clamp(1.5rem, 4vw, 2rem);
    background: transparent;
    border-radius: 0;
    border: 1px solid var(--border-color);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.order-summary h3 {
    font-family: 'Aboreto', cursive;
    font-size: clamp(1.4rem, 3.5vw, 1.6rem);
    color: var(--darker-text);
    margin-bottom: clamp(1rem, 2.5vw, 1.5rem);
}

.summary-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: clamp(0.75rem, 2vw, 1rem);
    font-size: clamp(0.9rem, 2.5vw, 1rem);
    font-weight: 400;
    color: var(--dark-text);
}

.summary-row.expected-delivery {
    color: var(--dark-text);
    font-size: clamp(0.85rem, 2vw, 0.95rem);
}

.summary-row:last-child {
    border-top: 1px solid var(--border-color);
    padding-top: clamp(0.75rem, 2vw, 1rem);
    margin-top: clamp(0.75rem, 2vw, 1rem);
    font-weight: 600;
    font-size: clamp(1rem, 2.5vw, 1.2rem);
    color: var(--darker-text);
}

.pay-now-btn {
    background: var(--darker-text);
    border: none;
    color: white;
    padding: clamp(1rem, 2.5vw, 1.2rem) clamp(2rem, 5vw, 2.5rem);
    border-radius: 0;
    width: 100%;
    font-size: clamp(1rem, 2.5vw, 1.2rem);
    font-weight: 500;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.pay-now-btn:hover:not(:disabled) {
    background: var(--muted-green);
    color: white;
    transform: translateY(-2px);
}

.pay-now-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.back-btn {
    background: transparent;
    border: 2px solid var(--darker-text);
    color: var(--darker-text);
    padding: clamp(0.75rem, 2vw, 1rem) clamp(1.5rem, 4vw, 2rem);
    border-radius: 0;
    font-size: clamp(0.9rem, 2.5vw, 1.1rem);
    font-weight: 500;
    text-decoration: none;
    text-align: center;
    transition: all 0.3s ease;
    margin-top: clamp(1rem, 2.5vw, 1.5rem);
    display: block;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.back-btn:hover {
    background: var(--muted-green);
    color: white;
    border-color: var(--muted-green);
    transform: translateY(-2px);
}

.test-card-info {
    color: #666;
    font-size: clamp(0.8rem, 2vw, 0.9rem);
    margin-top: 8px;
}

.test-mode-notice {
    background-color: #fff3cd;
    color: #856404;
    padding: clamp(0.75rem, 2vw, 1rem);
    border-radius: 0;
    margin-top: clamp(1rem, 2.5vw, 1.5rem);
    display: flex;
    align-items: center;
    gap: clamp(0.75rem, 2vw, 1rem);
    font-size: clamp(0.85rem, 2vw, 0.95rem);
}

.payment-info {
    background-color: var(--light-bg);
    padding: clamp(1rem, 2.5vw, 1.5rem);
    border-radius: 0;
    margin-bottom: clamp(1rem, 2.5vw, 1.5rem);
}

.payment-info p {
    color: var(--dark-text);
    font-size: clamp(0.9rem, 2.5vw, 1rem);
    line-height: 1.5;
    margin-bottom: clamp(0.75rem, 2vw, 1rem);
}

.loading-overlay {
    display: none;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.9);
    z-index: 9999;
}

.loading-spinner {
    border: 4px solid var(--border-color);
    border-top: 4px solid var(--darker-text);
    border-radius: 50%;
    width: clamp(50px, 10vw, 60px);
    height: clamp(50px, 10vw, 60px);
    animation: spin 1s linear infinite;
    margin-bottom: clamp(1rem, 2.5vw, 1.5rem);
}

.loading-text {
    font-family: 'Aboreto', cursive;
    font-size: clamp(1.5rem, 4vw, 1.8rem);
    color: var(--darker-text);
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}



.footer-link:hover {
    color: var(--light-bg);
    transform: translateX(3px);
    text-decoration: none;
}

.footer-link i {
    margin-right: 0.75rem;
    width: 24px;
    text-align: center;
}

.border-secondary {
    border-color: rgba(255, 255, 255, 0.1) !important;
}

.text-light {
    color: rgba(255, 255, 255, 0.7) !important;
}

/* Responsive Design */
@media (min-width: 768px) {
    .payment-section {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: clamp(2rem, 5vw, 3rem);
    }

    .card-details {
        grid-template-columns: 2fr 1fr 1fr;
    }

    .order-summary {
        position: sticky;
        top: clamp(2rem, 5vw, 3rem);
    }
}

@media (max-width: 767px) {
 


    .payment-container {
        margin: clamp(1rem, 3vw, 1.5rem);
        padding: clamp(0.75rem, 2vw, 1rem);
        box-shadow: none;
    }

    .payment-title {
        font-size: clamp(1.5rem, 4vw, 1.8rem);
    }

    .payment-section {
        gap: clamp(1rem, 3vw, 1.5rem);
    }

    .payment-form-section {
        padding: clamp(0.75rem, 2vw, 1rem);
        box-shadow: none;
    }

    .payment-form-title {
        font-size: clamp(1rem, 3vw, 1.2rem);
    }

    .security-notice {
        font-size: clamp(0.8rem, 2.5vw, 0.9rem);
        margin-bottom: 1rem;
    }

    .payment-methods {
        margin-bottom: clamp(0.75rem, 2vw, 1rem);
    }

    .payment-methods label {
        font-size: clamp(0.8rem, 2.5vw, 0.9rem);
        margin-bottom: 0.5rem;
    }

    .form-group {
        margin-bottom: clamp(0.5rem, 2vw, 0.75rem);
    }

    .form-group label {
        font-size: clamp(0.75rem, 2vw, 0.85rem);
    }

    .form-group input {
        font-size: clamp(0.75rem, 2vw, 0.85rem);
        padding: clamp(0.5rem, 2vw, 0.75rem);
    }

    .cod-message {
        font-size: clamp(0.75rem, 2vw, 0.85rem);
        margin-bottom: 1rem;
    }

    .order-summary {
        padding: clamp(0.75rem, 2vw, 1rem);
        box-shadow: none;
    }

    .order-summary h3 {
        font-size: clamp(1rem, 3vw, 1.2rem);
    }

    .summary-row {
        font-size: clamp(0.75rem, 2vw, 0.85rem);
        margin-bottom: clamp(0.5rem, 2vw, 0.75rem);
    }

    .summary-row.expected-delivery {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
    }

    .summary-row:last-child {
        font-size: clamp(0.85rem, 2.5vw, 0.95rem);
    }

    .pay-now-btn {
        font-size: clamp(0.8rem, 2vw, 1rem);
        padding: clamp(0.5rem, 2vw, 0.75rem) clamp(1rem, 3vw, 1.5rem);
    }

    .back-btn {
        font-size: clamp(0.75rem, 2vw, 0.9rem);
        padding: clamp(0.4rem, 1.5vw, 0.5rem) clamp(0.75rem, 2vw, 1rem);
        margin-top: clamp(0.5rem, 2vw, 0.75rem);
    }

    .test-mode-notice {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
        padding: clamp(0.5rem, 2vw, 0.75rem);
        margin-top: clamp(0.5rem, 2vw, 0.75rem);
        gap: clamp(0.5rem, 2vw, 0.75rem);
    }

    .payment-info {
        padding: clamp(0.5rem, 2vw, 0.75rem);
        margin-bottom: clamp(0.5rem, 2vw, 0.75rem);
    }

    .payment-info p {
        font-size: clamp(0.75rem, 2vw, 0.85rem);
        margin-bottom: clamp(0.5rem, 2vw, 0.75rem);
    }

    .loading-spinner {
        width: clamp(40px, 10vw, 50px);
        height: clamp(40px, 10vw, 50px);
        margin-bottom: clamp(0.75rem, 2vw, 1rem);
    }

    .loading-text {
        font-size: clamp(1rem, 3vw, 1.2rem);
    }

   
}

@media (max-width: 576px) {
    .payment-title {
        font-size: clamp(1.2rem, 4vw, 1.5rem);
    }

    .payment-form-title {
        font-size: clamp(0.9rem, 3vw, 1rem);
    }

    .security-notice {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
    }

    .payment-methods label {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
    }

    .form-group label {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
    }

    .form-group input {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
        padding: clamp(0.4rem, 1.5vw, 0.5rem);
    }

    .cod-message {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
    }

    .order-summary h3 {
        font-size: clamp(0.9rem, 3vw, 1rem);
    }

    .summary-row {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
    }

    .summary-row.expected-delivery {
        font-size: clamp(0.65rem, 1.8vw, 0.75rem);
    }

    .summary-row:last-child {
        font-size: clamp(0.8rem, 2.5vw, 0.9rem);
    }

    .pay-now-btn {
        font-size: clamp(0.75rem, 2vw, 0.9rem);
        padding: clamp(0.4rem, 1.5vw, 0.5rem) clamp(0.75rem, 2vw, 1rem);
    }

    .back-btn {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
        padding: clamp(0.3rem, 1vw, 0.4rem) clamp(0.5rem, 1.5vw, 0.75rem);
    }

    .test-card-info {
        font-size: clamp(0.65rem, 1.8vw, 0.75rem);
    }

    .test-mode-notice {
        font-size: clamp(0.65rem, 1.8vw, 0.75rem);
        padding: clamp(0.4rem, 1.5vw, 0.5rem);
    }

    .payment-info p {
        font-size: clamp(0.7rem, 2vw, 0.8rem);
    }

    .loading-text {
        font-size: clamp(0.9rem, 3vw, 1rem);
    }

}
</style>
</head>
<body>
<%-include('../partials/user/header.ejs')  %>

    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
        <div class="loading-text">Processing Payment...</div>
    </div>

    <div class="payment-container" data-total-amount="<%= cart ? cart.totalPrice : 0 %>">
        <h1 class="payment-title">Secure Payment</h1>
        <div class="payment-section">
            <div class="payment-form-section">
                <h2 class="payment-form-title">Payment Details</h2>
                <div class="security-notice">
                    <i class="fas fa-lock"></i>
                    <span>Payments are secure and encrypted</span>
                </div>
                <div class="payment-methods">
                    <label>
                        <input type="radio" name="paymentMethod" value="cod" checked onclick="showPaymentForm('cod')">
                        Cash on Delivery
                    </label>
                    <label>
                        <input type="radio" name="paymentMethod" value="razorpay" onclick="showPaymentForm('razorpay')">
                        Razorpay
                    </label>
                  
                    <label>
                        <input type="radio" name="paymentMethod" value="wallet" onclick="showPaymentForm('wallet')">
                        Wallet
                    </label>
                </div>
                <div id="paymentForms">
                    <div class="payment-form active" id="codForm">
                        <p class="cod-message">You will pay ₹<%= cart ? (cart.subtotal + cart.shipping - (cart.discount || 0)).toFixed(2) : '0.00' %> in cash upon delivery.</p>
                    </div>
                    <div class="payment-form" id="razorpayForm">
                        <div class="payment-info">
                            <p>You will be redirected to Razorpay's secure payment gateway to complete your payment.</p>
                            <div class="test-mode-notice">
                                <i class="fas fa-info-circle"></i>
                                <span>Test Mode Enabled - Use test card details in Razorpay modal</span>
                            </div>
                        </div>
                    </div>
                   
                    <div class="payment-form" id="walletForm">
                        <div class="form-group">
                            <label for="walletId">Wallet ID/Phone Number</label>
                            <input type="text" id="walletId" placeholder="Enter wallet ID or phone number" required>
                        </div>
                    </div>
                </div>
                <button type="button" class="pay-now-btn" id="payNowBtn" onclick="processPayment()">Pay Now</button>
                <a href="/checkout" class="back-btn">Back to Checkout</a>
            </div>
            <div class="order-summary">
                <h3>Order Summary</h3>
                <% if (cart && cart.items && cart.items.length > 0) { %>
                    <div class="summary-row">
                        <span>Subtotal</span>
                        <span>₹<%= cart.subtotal.toFixed(2) %></span>
                    </div>
                    <% if (cart.offerDiscount > 0) { %>
                        <div class="summary-row">
                            <span>Offer Discount</span>
                            <span>-₹<%= cart.offerDiscount.toFixed(2) %></span>
                        </div>
                    <% } %>
                    <% if (cart.couponDiscount > 0) { %>
                        <div class="summary-row">
                            <span>Offer Discount</span>
                            <span>-₹<%= cart.couponDiscount.toFixed(2) %></span>
                        </div>
                    <% } %>
                    <% if (cart.discount > 0) { %>
                        <div class="summary-row">
                            <span>Total Discount</span>
                            <span>-₹<%= cart.discount.toFixed(2) %></span>
                        </div>
                    <% } %>
                    <div class="summary-row">
                        <span>Shipping</span>
                        <span>₹<%= cart.shipping.toFixed(2) %></span>
                    </div>
                    <div class="summary-row total">
                        <span>Total</span>
                        <span>₹<%= cart.totalPrice.toFixed(2) %></span>
                    </div>
                <% } else { %>
                    <div class="summary-row">
                        <span>No items in cart</span>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <%- include('../partials/user/fooret.ejs') %>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded');
            const payNowBtn = document.getElementById('payNowBtn');
            if (payNowBtn) {
                console.log('Pay Now button found');
            } else {
                console.log('Pay Now button not found');
            }
        });

        function showPaymentForm(method) {
            console.log('Showing payment form for method:', method);
            document.querySelectorAll('.payment-form').forEach(form => {
                form.classList.remove('active');
            });
            document.getElementById(`${method}Form`).classList.add('active');

            const payNowBtn = document.getElementById('payNowBtn');
            if (method === 'cod') {
                payNowBtn.disabled = false;
            } else {
                validateForm(method);
            }
        }

        function validateForm(method) {
            console.log('Validating form for method:', method);
            const payNowBtn = document.getElementById('payNowBtn');
            if (method === 'razorpay') {
                payNowBtn.disabled = false;
            } else if (method === 'wallet') {
                const walletId = document.getElementById('walletId').value;
                payNowBtn.disabled = !walletId;
            }
        }

        let paymentInProgress = false;
        
        async function createOrder() {
            const method = document.querySelector('input[name="paymentMethod"]:checked').value;
            const addressId = '<%= address._id %>';
            
            console.log('Creating order with method:', method, 'and address:', addressId);
            
            try {
                const urlParams = new URLSearchParams(window.location.search);
                const orderId = urlParams.get('orderId');
                
                const requestBody = {
                    addressId: addressId,
                    paymentMethod: method
                };
                
                if (orderId) {
                    requestBody.orderId = orderId;
                }
                
                const response = await fetch('/create-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(requestBody)
                });
                
                const data = await response.json();
                console.log('Order creation response:', data);
                
                if (!response.ok) {
                    throw new Error(data.message || 'Failed to create order');
                }
                
                return data; 
            } catch (error) {
                console.error('Error creating order:', error);
                throw error;
            }
        }
        
        async function processPayment() {
            if (paymentInProgress) return;
            paymentInProgress = true;

            const payBtn = document.getElementById('payNowBtn');
            if (payBtn) {
                payBtn.disabled = true;
                payBtn.textContent = 'Processing...';
            }

            const method = document.querySelector('input[name="paymentMethod"]:checked').value;
            const loadingOverlay = document.getElementById('loadingOverlay');
            
            const urlParams = new URLSearchParams(window.location.search);
            const orderId = urlParams.get('orderId');

            if (loadingOverlay) loadingOverlay.style.display = 'flex';

            try {
                const orderData = await createOrder();
                const orderId = orderData.orderId;
                
                if (!orderId) {
                    throw new Error('No order ID received from server');
                }
                
                console.log('Order created successfully with ID:', orderId, 'Method:', method);
                
                if (method === 'cod' || method === 'wallet') {
                    console.log('Processing direct payment for:', method, 'order');
                    const payload = { 
                        method: method === 'cod' ? 'COD' : 'Wallet',
                        addressId: '<%= address._id %>',
                        orderId: orderId
                    };
                    
                    if (method === 'wallet') {
                        const walletId = document.getElementById('walletId')?.value;
                        if (!walletId) {
                            throw new Error('Please select a wallet');
                        }
                        payload.walletId = walletId;
                    }
                    
                    const res = await fetch('/create-order', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    
                    const result = await res.json();
                    if (!res.ok) {
                        throw new Error(result.message || 'Payment processing failed');
                    }
                    
                    if (result.redirect) {
                        window.location.href = result.redirect;
                    } else {
                        window.location.href = `/payment-confirmation?orderId=${orderId}`;
                    }
                    return;
                }
                
                const payload = { 
                    method, 
                    addressId: '<%= address._id %>',
                    orderId: orderId || null
                };
                
                if (orderId) {
                    payload.orderId = orderId;
                }

                if (method === 'wallet') {
                    const walletId = document.getElementById('walletId').value;
                    if (!walletId) throw new Error('Please select a wallet');
                    payload.walletId = walletId;
                }

                console.log('Processing payment for order:', orderId, 'with payload:', payload);

                const res = await fetch('/create-order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                let responseData;
                try {
                    responseData = await res.json();
                    console.log('Payment response status:', res.status, 'Data:', responseData);
                } catch (e) {
                    console.error('Error parsing payment response:', e);
                    throw new Error('Invalid response from server');
                }

                if (!res.ok) {
                    throw new Error(responseData.message || `Payment failed with status: ${res.status}`);
                }

                const data = responseData;

        console.log('Payment response data:', data);
        
        if (data.razorpayOrderId) {
            console.log('Initializing Razorpay with order ID:', data.razorpayOrderId);
            
            try {
                const options = {
                    key: "<%= RAZORPAY_KEY_ID %>",
                    amount: data.amount,
                    currency: data.currency || 'INR',
                    name: "Lume",
                    description: "Order Payment",
                    order_id: data.razorpayOrderId,
                    handler: async function (response) {
                        console.log('Razorpay payment successful:', response);
                        try {
                            const verifyRes = await fetch('/verify-payment', {
                                method: 'POST',
                                headers: { 
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: data.orderId,
                                    addressId: '<%= address._id %>'
                                })
                            });
                            
                            if (!verifyRes.ok) {
                                const errorData = await verifyRes.json().catch(() => ({}));
                                throw new Error(errorData.message || `HTTP error! status: ${verifyRes.status}`);
                            }
                            
                            const verifyData = await verifyRes.json();
                            console.log('Verification response:', verifyData);
                            
                            if (verifyData.redirect) {
                                window.location.href = verifyData.redirect;
                            } else {
                                window.location.href = `/payment-confirmation?orderId=${data.orderId}`;
                            }
                        } catch (error) {
                            console.error('Payment verification failed:', error);
                            window.location.href = `/payment-failed?orderId=${data.orderId}&error=${encodeURIComponent(error.message || 'Payment verification failed')}`;
                        }
                    },
                    prefill: {
                        name: "<%= user.name %>",
                        email: "<%= user.email %>",
                        contact: "<%= user.phone %>"
                    },
                    theme: { 
                        color: "#D4B996"
                    },
                    modal: {
                        ondismiss: function() {
                            console.log('Payment modal dismissed by user');
                            window.location.href = `/payment-failed?orderId=${data.orderId}&error=Payment cancelled by user`;
                        }
                    }
                };

                console.log('Razorpay options:', options);
                
                const rzp = new Razorpay(options);
                
                rzp.on('payment.failed', function(response) {
                    console.error('Razorpay payment failed:', response.error);
                    const errorMsg = response.error.description || 'Payment was not successful';
                    window.location.href = `/payment-failed?orderId=${data.orderId}&error=${encodeURIComponent(errorMsg)}`;
                });
                
                rzp.open();
                
            } catch (error) {
                console.error('Error initializing Razorpay:', error);
                window.location.href = `/payment-failed?orderId=${data.orderId}&error=${encodeURIComponent('Failed to initialize payment')}`;
            }
            
        } else if (data.redirect) {
            console.log('Redirecting to:', data.redirect);
            window.location.href = data.redirect;
        } else if (data.success) {
            console.log('Payment successful, redirecting to confirmation');
            window.location.href = `/payment-confirmation?orderId=${data.orderId || orderId}`;
        } else {
            console.error('Unexpected response format:', data);
            const errorMessage = data.message || "Payment processing failed";
            throw new Error(errorMessage);
        }

    } catch (error) {
        console.error('Payment processing error:', error);

        if (loadingOverlay) loadingOverlay.style.display = 'none';
        if (payBtn) {
            payBtn.disabled = false;
            payBtn.textContent = 'Pay Now';
        }

        Swal.fire({
            title: 'Payment Error',
            text: error.message || 'An error occurred while processing your payment. Please try again.',
            icon: 'error',
            confirmButtonColor: '#2c1810'
        });

        paymentInProgress = false;

        if (error.stack) {
            console.error('Error stack:', error.stack);
        }
    }
}

        document.getElementById('walletId')?.addEventListener('input', () => validateForm('wallet'));
        document.getElementById('payNowBtn')?.addEventListener('click', processPayment);

        showPaymentForm('cod');
    </script>
</body>
</html>