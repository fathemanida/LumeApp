<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Category | LUME Admin</title>
  <link href="https://fonts.googleapis.com/css2?family=Aboreto&family=Jost:wght@300;400;500;600&display=swap"
    rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
  <link rel="stylesheet" href="/styles/adminStyles.css">
  <link rel="stylesheet" href="/css/admin/category.css">

  <style>
    .image-upload-group {
      position: relative;
      margin-bottom: 20px;
    }

    .upload-btn {
      display: inline-block;
      padding: 10px 20px;
      background-color: #3a2914;
      color: white;
      border-radius: 4px;
      cursor: pointer;
      margin-bottom: 10px;
    }

    .upload-btn input[type="file"] {
      display: none;
    }

    .image-preview-container {
      position: relative;
      width: 200px;
      height: 200px;
      margin-top: 10px;
      border: 2px dashed #d3c9be;
      border-radius: 4px;
      overflow: hidden;
    }

    .image-preview {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .remove-image-btn {
      position: absolute;
      top: 5px;
      right: 5px;
      background: rgba(231, 76, 60, 0.8);
      color: white;
      border: none;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
    }

   #cropper-container {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  z-index: 1000;
  padding: 20px;
  box-sizing: border-box;
}

#cropper-container img {
  max-height: calc(100vh - 100px);
  max-width: calc(100vw - 40px);
  margin: 20px auto;
  display: block;
}

.cropper-actions {
  position: fixed;
  bottom: 20px;
  left: 0;
  right: 0;
  text-align: center;
  z-index: 1001;
}

.crop-btn,
.reset-crop-btn {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  margin: 0 10px;
}

.crop-btn {
  background-color: #291d0e;
  color: white;
}

.reset-crop-btn {
  background-color: #e74c3c;
  color: white;
}

.cropper-view-box,
.cropper-face {
  border-radius: 0;
}

.cropper-container {
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.cropper-modal {
  background: transparent;
}

.date-input-container {
  position: relative;
  width: 100%;
}

.date-input {
  padding-right: 40px !important;
  width: 100%;
}

.date-icon {
  position: absolute;
  right: 12px;
  top: 50%;
  transform: translateY(-50%);
  color: #666;
  pointer-events: none;
}

/* Remove the default calendar icon */
input[type="datetime-local"]::-webkit-calendar-picker-indicator {
  opacity: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
}

/* Style the date input */
input[type="datetime-local"] {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}
  </style>
</head>

<body class="dashboard">
  <aside class="sidebar">
    <div class="brand">LUME</div>
    <ul class="nav-menu">
      <li class="nav-item">
        <a href="/admin/dashboard" class="nav-link"><i class="fas fa-home"></i> Dashboard</a>
      </li>
      <li class="nav-item">
        <a href="/admin/product" class="nav-link"><i class="fas fa-box"></i> Product</a>
      </li>
      <li class="nav-item">
        <a href="/admin/orders" class="nav-link"><i class="fas fa-shopping-cart"></i> Orders</a>
      </li>
      <li class="nav-item">
        <a href="/admin/users" class="nav-link"><i class="fas fa-users"></i> Users</a>
      </li>
      <li class="nav-item">
        <a href="/admin/Category" class="nav-link active"><i class="fas fa-tags"></i> Category</a>
      </li>
      <li class="nav-item">
        <a href="/admin/offers" class="nav-link"><i class="fas fa-ticket-alt"></i> Offers</a>
      </li>
      <li class="nav-item">
        <a href="/admin/settings" class="nav-link"><i class="fas fa-cog"></i> Settings</a>
      </li>
      <li class="nav-item">
        <a href="/admin/banner" class="nav-link"><i class="fas fa-image"></i> Banner</a>
      </li>
      <li class="nav-item">
        <a href="/admin/Coupons" class="nav-link"><i class="fas fa-ticket-alt"></i> Coupons</a>
      </li>
      <li class="nav-item">
        <a href="/admin/logout" class="nav-link logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
      </li>
    </ul>
  </aside>

  <div class="main-content">
    <header class="main-header">
      <div class="header-left">
        <button class="mobile-menu-btn" id="mobileMenuBtn">
          <i class="fas fa-bars"></i>
        </button>
        <h2 class="page-title">ADD CATEGORY</h2>
      </div>
      <div class="header-right">
        <button class="notification-btn">
          <i class="fas fa-bell"></i>
          <span class="notification-badge">3</span>
        </button>
        <div class="profile-dropdown">
          <img src="https://i.pravatar.cc/80" alt="Profile" class="profile-img">
          <span class="profile-name">Admin</span>
          <div class="profile-dropdown-menu">
            <a href="#" class="dropdown-item"><i class="fas fa-user"></i> Profile</a>
            <a href="#" class="dropdown-item"><i class="fas fa-cog"></i> Settings</a>
            <a href="/admin/logout" class="dropdown-item"><i class="fas fa-sign-out-alt"></i> Logout</a>
          </div>
        </div>
      </div>
    </header>

    <div class="content-area">
      <form id="categoryForm" class="form-container" enctype="multipart/form-data">
        <input type="hidden" id="categoryId" value="<%= category._id %>">
        <div class="form-group">
          <label for="name">Category Name</label>
          <input type="text" id="name" name="name" class="form-input" placeholder="Enter category name" value="<%= category.name %>">
          <span class="error-message" id="name-error"></span>
        </div>
        <div class="form-group">
          <label for="description">Description</label>
          <textarea id="description" name="description" class="form-input" placeholder="Enter description"><%= category.description %></textarea>
          <span class="error-message" id="des-error"></span>
        </div>
        <div class="form-group image-upload-group">
          <label for="image">Category Image</label>
          <label class="upload-btn">
            <input type="file" id="image" name="image" accept="image/*">
            <i class="fas fa-upload"></i> Change Image
          </label>
          <span class="error-message" id="image-error"></span>
          <% if (category.image) { %>
            <div class="image-preview-container" style="display: block;">
              <img id="image-preview" class="image-preview" src="/uploads/category/<%= category.image %>" alt="Category Image">
              <button type="button" class="remove-image-btn" onclick="removeImage()">
                <i class="fas fa-times"></i>
              </button>
            </div>
          <% } %>

          <div id="cropper-container" class="cropper-container">
            <img id="cropper-image" alt="Cropper Image">
            <div class="cropper-actions">
              <button type="button" id="crop-btn" class="crop-btn">Crop Image</button>
              <button type="button" id="reset-crop-btn" class="reset-crop-btn">Cancel</button>
            </div>
          </div>
        </div>

        <!-- Offer Section -->
        <div class="form-group">
          <label>Category Offer</label>
          <div class="offer-fields">
            <div class="form-check">
              <input type="checkbox" id="offerActive" name="offerActive" class="form-check-input"
                <%= category.categoryOffer && category.categoryOffer.active ? 'checked' : '' %>>
              <label for="offerActive" class="form-check-label">Enable Offer</label>
            </div>
            
            <div id="offerDetails" style="display: <%= category.categoryOffer && category.categoryOffer.isActive ? 'block' : 'none' %>;">
              <div class="form-group">
                <label for="discountType">Discount Type</label>
                <select id="discountType" name="discountType" class="form-input">
                  <option value="PERCENTAGE" <%= category.categoryOffer && category.categoryOffer.discountType === 'PERCENTAGE' ? 'selected' : '' %>>PERCENTAGE</option>
                  <option value="FLAT" <%= category.categoryOffer && category.categoryOffer.discountType === 'FLAT' ? 'selected' : '' %>>Flat Amount</option>
                </select>
                <span class="error-message" id="discount-type-error"></span>
              </div>
              
              <div class="form-group">
                <label for="discountValue">Discount Value</label>
                <input type="number" id="discountValue" name="discountValue" class="form-input" min="0" step="0.01"
                  value="<%= category.categoryOffer && category.categoryOffer.discountValue ? category.categoryOffer.discountValue : '' %>">
                <span class="error-message" id="discount-value-error"></span>
              </div>
              
              <div class="form-group">
                <label for="startDate">Start Date</label>
                <div class="date-input-container">
                  <input type="datetime-local" id="startDate" name="startDate" class="form-input date-input"
                    value="<%= category.categoryOffer && category.categoryOffer.startDate ? new Date(category.categoryOffer.startDate).toISOString().slice(0, 16) : '' %>">
                  <i class="fas fa-calendar-alt date-icon"></i>
                </div>
                <span class="error-message" id="start-date-error"></span>
              </div>
              
              <div class="form-group">
                <label for="endDate">End Date</label>
                <div class="date-input-container">
                  <input type="datetime-local" id="endDate" name="endDate" class="form-input date-input"
                    value="<%= category.categoryOffer && category.categoryOffer.endDate ? new Date(category.categoryOffer.endDate).toISOString().slice(0, 16) : '' %>">
                  <i class="fas fa-calendar-alt date-icon"></i>
                </div>
                <span class="error-message" id="end-date-error"></span>
              </div>
            </div>
          </div>
        </div>
        
        <button type="submit" class="submit-btn">UPDATE CATEGORY</button>
      </form>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script>
    let cropper = null;
    let croppedImageBlob = null;
    let hasExistingImage = true;

    document.addEventListener('DOMContentLoaded', function () {
      const previewContainer = document.querySelector('.image-preview-container');
      const preview = document.getElementById('image-preview');

      if (preview.src && preview.src !== window.location.href) {
        previewContainer.style.display = 'block';
        hasExistingImage = true;
      } else {
        previewContainer.style.display = 'none';
        hasExistingImage = false;
      }

      // Initialize offer details visibility
      const offerActive = document.getElementById('offerActive');
      const offerDetails = document.getElementById('offerDetails');
      if (offerActive && offerActive.checked) {
        offerDetails.style.display = 'block';
      }

      const form = document.getElementById('categoryForm');
      if (form) {
        form.addEventListener('submit', handleFormSubmit);
      }
    });

    document.getElementById('mobileMenuBtn').addEventListener('click', function () {
      document.querySelector('.sidebar').classList.toggle('active');
    });

    // Add offer toggle functionality
    document.getElementById('offerActive').addEventListener('change', function() {
      const offerDetails = document.getElementById('offerDetails');
      offerDetails.style.display = this.checked ? 'block' : 'none';
      
      // Clear all offer-related error messages when toggling
      if (!this.checked) {
        clearErrorMsg("discount-type-error");
        clearErrorMsg("discount-value-error");
        clearErrorMsg("start-date-error");
        clearErrorMsg("end-date-error");
      }
    });

    function validateOfferFields() {
      let isValid = true;
      const discountType = document.getElementById("discountType").value;
      const discountValue = document.getElementById("discountValue").value;
      const startDate = document.getElementById("startDate").value;
      const endDate = document.getElementById("endDate").value;

      if (!discountType) {
        displayErrorMsg("discount-type-error", "Please select a discount type");
        isValid = false;
      } else {
        clearErrorMsg("discount-type-error");
      }

      if (!discountValue || discountValue <= 0) {
        displayErrorMsg("discount-value-error", "Please enter a valid discount value");
        isValid = false;
      } else if (discountType === 'PERCENTAGE' && discountValue > 100) {
        displayErrorMsg("discount-value-error", "Percentage discount cannot exceed 100%");
        isValid = false;
      } else {
        clearErrorMsg("discount-value-error");
      }

      if (!startDate) {
        displayErrorMsg("start-date-error", "Please select a start date");
        isValid = false;
      } else if (new Date(startDate) <= new Date()) {
        displayErrorMsg("start-date-error", "Start date must be in the future");
        isValid = false;
      } else {
        clearErrorMsg("start-date-error");
      }

      if (!endDate) {
        displayErrorMsg("end-date-error", "Please select an end date");
        isValid = false;
      } else if (startDate && new Date(startDate) >= new Date(endDate)) {
        displayErrorMsg("end-date-error", "End date must be after start date");
        isValid = false;
      } else {
        clearErrorMsg("end-date-error");
      }

      return isValid;
    }

    function validateForm() {
      clearErrorMsg();
      const name = document.getElementById("name").value.trim();
      const description = document.getElementById("description").value.trim();
      const image = document.getElementById("image").files[0];
      const offerActive = document.getElementById("offerActive").checked;
      let isValid = true;

      // Validate name
      if (!name) {
        displayErrorMsg("name-error", "Please enter a category name");
        isValid = false;
      } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMsg("name-error", "Category name should only contain letters and spaces");
        isValid = false;
      }

      // Validate description
      if (!description) {
        displayErrorMsg("des-error", "Please enter a description");
        isValid = false;
      }

      // Validate image only if no existing image and no new image selected
      if (!image && !croppedImageBlob && !hasExistingImage) {
        displayErrorMsg("image-error", "Please upload an image");
        isValid = false;
      }

      // Validate offer fields if offer is active
      if (offerActive) {
        const discountType = document.getElementById("discountType").value;
        const discountValue = document.getElementById("discountValue").value;
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;

        if (!discountType) {
          displayErrorMsg("discount-type-error", "Please select a discount type");
          isValid = false;
        }

        if (!discountValue || isNaN(discountValue) || parseFloat(discountValue) <= 0) {
          displayErrorMsg("discount-value-error", "Please enter a valid discount value");
          isValid = false;
        } else if (discountType === 'PERCENTAGE' && parseFloat(discountValue) > 100) {
          displayErrorMsg("discount-value-error", "Percentage discount cannot exceed 100%");
          isValid = false;
        }

        if (!startDate) {
          displayErrorMsg("start-date-error", "Please select a start date");
          isValid = false;
        } else if (new Date(startDate) <= new Date()) {
          displayErrorMsg("start-date-error", "Start date must be in the future");
          isValid = false;
        }

        if (!endDate) {
          displayErrorMsg("end-date-error", "Please select an end date");
          isValid = false;
        } else if (startDate && new Date(startDate) >= new Date(endDate)) {
          displayErrorMsg("end-date-error", "End date must be after start date");
          isValid = false;
        }
      }

      return isValid;
    }

    function displayErrorMsg(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.textContent = message;
      errorElement.style.display = "block";
    }

    function clearErrorMsg() {
      const errorElements = document.querySelectorAll('.error-message');
      errorElements.forEach(element => {
        element.textContent = "";
        element.style.display = "none";
      });
    }

    function removeImage() {
      document.getElementById('image').value = '';
      document.querySelector('.image-preview-container').style.display = 'none';
      document.getElementById('cropper-container').style.display = 'none';
      document.getElementById('image-preview').src = '';
      croppedImageBlob = null;
      hasExistingImage = false;
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
    }

    function initializeCropper(file) {
      const cropperContainer = document.getElementById('cropper-container');
      const cropperImage = document.getElementById('cropper-image');

      const reader = new FileReader();
      reader.onload = function (e) {
        cropperImage.src = e.target.result;
        cropperContainer.style.display = 'block';

        if (cropper) {
          cropper.destroy();
        }

        cropper = new Cropper(cropperImage, {
          aspectRatio: 1,
          viewMode: 1,
          autoCropArea: 0.8,
          responsive: true,
          background: true,
          modal: true,
          zoomable: true,
          minCropBoxWidth: 200,
          minCropBoxHeight: 200,
          ready: function () {
            // Ensure the cropper is properly initialized
            this.cropper.setCanvasData({
              width: Math.min(window.innerWidth * 0.8, 800),
              height: Math.min(window.innerHeight * 0.8, 800)
            });
          }
        });
      };
      reader.readAsDataURL(file);
    }

    document.getElementById('image').addEventListener('change', function (e) {
      const file = e.target.files[0];
      if (file) {
        if (file.size > 5 * 1024 * 1024) {
          displayErrorMsg("image-error", "Image size should be less than 5MB");
          this.value = '';
          return;
        }
        if (!file.type.startsWith('image/')) {
          displayErrorMsg("image-error", "Please upload an image file");
          this.value = '';
          return;
        }
        initializeCropper(file);
      }
    });

    document.getElementById('crop-btn').addEventListener('click', function () {
      if (cropper) {
        const canvas = cropper.getCroppedCanvas({
          width: 400,
          height: 400,
          minWidth: 200,
          minHeight: 200,
          maxWidth: 800,
          maxHeight: 800,
          imageSmoothingEnabled: true,
          imageSmoothingQuality: 'high'
        });

        canvas.toBlob((blob) => {
          croppedImageBlob = blob;
          const preview = document.getElementById('image-preview');
          preview.src = URL.createObjectURL(blob);
          document.querySelector('.image-preview-container').style.display = 'block';
          document.getElementById('cropper-container').style.display = 'none';
          cropper.destroy();
          cropper = null;
        }, 'image/jpeg', 0.9);
      }
    });

    document.getElementById('reset-crop-btn').addEventListener('click', function () {
      document.getElementById('cropper-container').style.display = 'none';
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      document.getElementById('image').value = '';
      if (!hasExistingImage) {
        document.querySelector('.image-preview-container').style.display = 'none';
      }
    });

    // Add input validation for offer fields
    document.getElementById('discountValue')?.addEventListener('input', function() {
      if (document.getElementById("offerActive").checked) {
        const discountType = document.getElementById("discountType").value;
        const value = this.value;
        
        if (!value || isNaN(value) || parseFloat(value) <= 0) {
          displayErrorMsg("discount-value-error", "Please enter a valid discount value");
        } else if (discountType === 'PERCENTAGE' && parseFloat(value) > 100) {
          displayErrorMsg("discount-value-error", "Percentage discount cannot exceed 100%");
        } else {
          clearErrorMsg("discount-value-error");
        }
      }
    });

    document.getElementById('discountType')?.addEventListener('change', function() {
      if (document.getElementById("offerActive").checked) {
        const discountValue = document.getElementById("discountValue").value;
        
        if (this.value === 'PERCENTAGE' && parseFloat(discountValue) > 100) {
          displayErrorMsg("discount-value-error", "Percentage discount cannot exceed 100%");
        } else {
          clearErrorMsg("discount-value-error");
        }
      }
    });

    document.getElementById('startDate')?.addEventListener('change', function() {
      if (document.getElementById("offerActive").checked) {
        const endDate = document.getElementById("endDate").value;
        
        if (!this.value) {
          displayErrorMsg("start-date-error", "Please select a start date");
        } else if (new Date(this.value) <= new Date()) {
          displayErrorMsg("start-date-error", "Start date must be in the future");
        } else if (endDate && new Date(this.value) >= new Date(endDate)) {
          displayErrorMsg("start-date-error", "Start date must be before end date");
        } else {
          clearErrorMsg("start-date-error");
        }
      }
    });

    document.getElementById('endDate')?.addEventListener('change', function() {
      if (document.getElementById("offerActive").checked) {
        const startDate = document.getElementById("startDate").value;
        
        if (!this.value) {
          displayErrorMsg("end-date-error", "Please select an end date");
        } else if (startDate && new Date(startDate) >= new Date(this.value)) {
          displayErrorMsg("end-date-error", "End date must be after start date");
        } else {
          clearErrorMsg("end-date-error");
        }
      }
    });

    async function handleFormSubmit(event) {
      event.preventDefault();

      if (!validateForm()) return;

      const submitBtn = event.target.querySelector('button[type="submit"]');
      submitBtn.disabled = true;
      submitBtn.textContent = "Processing...";

      try {
        const categoryId = document.getElementById("categoryId").value;
        const formData = new FormData();
        formData.append('name', document.getElementById("name").value.trim());
        formData.append('description', document.getElementById("description").value.trim());

        // Add offer data
        const offerActive = document.getElementById("offerActive").checked;
        if (offerActive) {
          const offerData = {
            isActive: true,
            discountType: document.getElementById("discountType").value,
            discountValue: parseFloat(document.getElementById("discountValue").value),
            startDate: document.getElementById("startDate").value,
            endDate: document.getElementById("endDate").value
          };
          formData.append('categoryOffer', JSON.stringify(offerData));
        } else {
          formData.append('categoryOffer', JSON.stringify({
            isActive: false,
            discountType: null,
            discountValue: null,
            startDate: null,
            endDate: null
          }));
        }

        if (croppedImageBlob) {
          formData.append('image', croppedImageBlob, 'category.jpg');
        } else if (document.getElementById('image').files[0]) {
          formData.append('image', document.getElementById('image').files[0]);
        }

        const response = await fetch(`/admin/edit-category/${categoryId}`, {
          method: "POST",
          body: formData
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || "Failed to update category");
        }

        await Swal.fire({
          icon: "success",
          title: "Success!",
          text: result.message || "Category updated successfully",
          timer: 2000,
          showConfirmButton: false
        });

        window.location.href = "/admin/category";

      } catch (error) {
        console.error('Error:', error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: error.message || "Failed to update category"
        });
      
        submitBtn.disabled = false;
        submitBtn.textContent = "UPDATE CATEGORY";
      }
    }
  </script>
</body>

</html>