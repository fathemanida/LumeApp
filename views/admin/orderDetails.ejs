<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details | Admin Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Jost:wght@400;500&family=Aboreto&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Add Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Add SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        :root {
            --dark-brown: #291d0e;
            --olive-green: #314216;
            --light-bg: #f8f5f2;
            --border-color: #d3c9be;
        }

        body {
            font-family: 'Jost', sans-serif;
            background-color: var(--light-bg);
            color: var(--dark-brown);
            min-height: 100vh;
            margin: 0;
            display: flex;
            flex-direction: column;
        }

        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .page-title {
            font-family: 'Aboreto', cursive;
            font-size: 2rem;
            margin-bottom: 2rem;
            color: var(--dark-brown);
        }

        .order-details {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .order-number {
            font-size: 1.2rem;
            font-weight: 500;
        }

        .order-status {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .status-pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .status-delivered {
            background-color: #d4edda;
            color: #155724;
        }

        .status-processing {
            background-color: #cce5ff;
            color: #004085;
        }

        .status-cancelled {
            background-color: #f8d7da;
            color: #721c24;
        }

        .order-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .info-section {
            background: var(--light-bg);
            padding: 1.5rem;
            border-radius: 8px;
        }

        .info-section h3 {
            font-size: 1.1rem;
            margin-bottom: 1rem;
            color: var(--dark-brown);
        }

        .info-item {
            margin-bottom: 0.5rem;
            font-size: 0.95rem;
        }

        .info-label {
            font-weight: 500;
            color: var(--dark-brown);
        }

        .order-items {
            margin-bottom: 2rem;
        }

        .order-items h3 {
            font-size: 1.2rem;
            margin-bottom: 1rem;
        }

        .item {
            display: grid;
            grid-template-columns: 100px 2fr 1fr 1fr;
            gap: 1rem;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .item:last-child {
            border-bottom: none;
        }

        .item-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 4px;
        }

        .item-details h4 {
            margin: 0 0 0.5rem 0;
            font-size: 1rem;
        }

        .item-price {
            color: var(--dark-brown);
            font-weight: 500;
        }

        .item-quantity {
            text-align: center;
        }

        .item-total {
            text-align: right;
            font-weight: 500;
        }

        .order-summary {
            background: var(--light-bg);
            padding: 1.5rem;
            border-radius: 8px;
            margin-top: 2rem;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.75rem;
            font-size: 0.95rem;
        }

        .summary-row:last-child {
            border-top: 1px solid var(--border-color);
            padding-top: 0.75rem;
            margin-top: 0.75rem;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .status-select {
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 0.9rem;
            margin-left: 1rem;
        }

        .update-status-btn {
            padding: 0.5rem 1rem;
            background-color: var(--dark-brown);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background-color 0.3s ease;
        }

        .update-status-btn:hover {
            background-color: var(--olive-green);
        }

        .back-btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            background-color: var(--dark-brown);
            color: white;
            text-decoration: none;
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }

        .back-btn:hover {
            background-color: var(--olive-green);
            transform: translateY(-2px);
        }

        @media (max-width: 768px) {
            .order-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .item {
                grid-template-columns: 80px 1fr;
                gap: 0.5rem;
            }

            .item-price, .item-quantity, .item-total {
                grid-column: 2;
            }

            .item-image {
                width: 80px;
                height: 80px;
            }
        }

        /* Toast Container Styles */
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }

        .toast {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .toast-header {
            background-color: var(--dark-brown);
            color: white;
            border-bottom: none;
        }

        .toast-header .btn-close {
            color: white;
            filter: brightness(0) invert(1);
        }

        .toast-body {
            color: var(--dark-brown);
            font-size: 0.95rem;
        }
    </style>
</head>
<body>
    <!-- Toast Container -->
    <div class="toast-container"></div>

    <div class="container">
        <h1 class="page-title">Order Details</h1>

        <div class="order-details">
            <div class="order-header">
                <div class="order-number">Order #<%= order.orderNumber %></div>
                <div>
                    <% if (order.returnRequest) { %>
                        <div class="return-request-info" style="margin-bottom: 1.5rem; padding: 1rem; background-color: var(--light-bg); border-radius: 8px;">
                            <h3 style="font-size: 1.1rem; margin-bottom: 1rem; color: var(--dark-brown);">Return Request Details</h3>
                            <div style="display: grid; gap: 0.75rem;">
                                <div>
                                    <strong>Status:</strong>
                                    <span class="status status-<%= order.returnRequest.status.toLowerCase() %>" style="margin-left: 0.5rem;">
                                        <%= order.returnRequest.status %>
                                    </span>
                                </div>
                                <div>
                                    <strong>Requested On:</strong>
                                    <span style="margin-left: 0.5rem;">
                                        <%= new Date(order.returnRequest.requestedAt).toLocaleDateString() %>
                                    </span>
                                </div>
                                <div>
                                    <strong>Reason:</strong>
                                    <span style="margin-left: 0.5rem;">
                                        <%= order.returnRequest.reason %>
                                    </span>
                                </div>
                                <div>
                                    <strong>Description:</strong>
                                    <p style="margin: 0.5rem 0 0 0.5rem; color: #666;">
                                        <%= order.returnRequest.description %>
                                    </p>
                                </div>
                                <div>
                                    <strong>Items Requested for Return:</strong>
                                    <ul style="margin: 0.5rem 0 0 0.5rem; list-style: none; padding: 0;">
                                        <% order.returnRequest.items.forEach(item => { %>
                                            <li style="margin-bottom: 0.25rem;">
                                                <%= item.productId.productName %> (Quantity: <%= item.quantity %>)
                                            </li>
                                        <% }) %>
                                    </ul>
                                </div>
                                <% if (order.returnRequest.adminResponse) { %>
                                    <div>
                                        <strong>Admin Response:</strong>
                                        <p style="margin: 0.5rem 0 0 0.5rem; color: #666;">
                                            <%= order.returnRequest.adminResponse %>
                                        </p>
                                    </div>
                                <% } %>
                                <% if (order.returnRequest.respondedAt) { %>
                                    <div>
                                        <strong>Responded On:</strong>
                                        <span style="margin-left: 0.5rem;">
                                            <%= new Date(order.returnRequest.respondedAt).toLocaleDateString() %>
                                        </span>
                                    </div>
                                <% } %>
                            </div>
                            <% if (order.returnRequest.status === 'Pending') { %>
                                <div class="return-request-actions" style="margin-top: 1rem; display: flex; gap: 1rem;">
                                    <button onclick="handleReturnRequest('accept')" class="btn btn-success">
                                        <i class="fas fa-check"></i> Accept Return
                                    </button>
                                    <button onclick="handleReturnRequest('reject')" class="btn btn-danger">
                                        <i class="fas fa-times"></i> Reject Return
                                    </button>
                                </div>
                            <% } %>
                        </div>
                    <% } %>
                    <select id="orderStatus" class="status-select">
                        <option value="Pending" <%= order.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                        <option value="Processing" <%= order.status === 'Processing' ? 'selected' : '' %>>Processing</option>
                        <option value="Shipped" <%= order.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                        <option value="Delivered" <%= order.status === 'Delivered' ? 'selected' : '' %>>Delivered</option>
                        <option value="Cancelled" <%= order.status === 'Cancelled' ? 'selected' : '' %>>Cancelled</option>
                    </select>
                    <button onclick="updateOrderStatus()" class="update-status-btn">Update Status</button>
                </div>
            </div>

            <div class="order-info">
                <div class="info-section">
                    <h3>Order Information</h3>
                    <div class="info-item">
                        <span class="info-label">Order Date:</span>
                        <%= order.date %>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Payment Method:</span>
                        <%= order.paymentMethod %>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Customer:</span>
                        <% if (order.userId && order.userId.name) { %>
                            <%= order.userId.name %> (<%= order.userId.email %>)
                        <% } else { %>
                            User not found
                        <% } %>
                    </div>
                </div>

                <div class="info-section">
                    <h3>Shipping Address</h3>
                    <% if (order.address) { %>
                        <div class="info-item">
                            <%= order.address.name %><br
                            <%= order.address.city %>, <%= order.address.state %><br>
                            <%= order.address.pincode %>
                        </div>
                    <% } else { %>
                        <div class="info-item">Address not available</div>
                    <% } %>
                </div>
            </div>

            <div class="order-items">
                <h3>Order Items</h3>
                <% order.items.forEach(item => { %>
                    <div class="item">
                        <img src="<%= item.image %>" alt="<%= item.name %>" class="item-image">
                        <div class="item-details">
                            <h4><%= item.name %></h4>
                        </div>
                        <div class="item-price">₹<%= item.price.toFixed(2) %></div>
                        <div class="item-quantity">x<%= item.quantity %></div>
                        <div class="item-total">₹<%= item.total.toFixed(2) %></div>
                    </div>
                <% }) %>
            </div>

            <div class="order-summary">
                <div class="summary-row">
                    <span>Subtotal</span>
                    <span>₹<%= (order.totalAmount - order.shipping - order.tax + (order.discount || 0)).toFixed(2) %></span>
                </div>
                <div class="summary-row">
                    <span>Shipping</span>
                    <span>₹<%= order.shipping.toFixed(2) %></span>
                </div>
                <div class="summary-row">
                    <span>Tax</span>
                    <span>₹<%= order.tax.toFixed(2) %></span>
                </div>
                <% if (order.discount) { %>
                    <div class="summary-row">
                        <span>Discount</span>
                        <span>-₹<%= order.discount.toFixed(2) %></span>
                    </div>
                <% } %>
                <div class="summary-row">
                    <span>Total</span>
                    <span>₹<%= order.totalAmount.toFixed(2) %></span>
                </div>
            </div>

            <a href="/admin/orders" class="back-btn">
                <i class="fas fa-arrow-left"></i> Back to Orders
            </a>
        </div>
    </div>

    <!-- Add SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>

    <script>
        function showToast(message, type = 'success') {
            const toastContainer = document.querySelector('.toast-container');
            const toast = document.createElement('div');
            toast.className = 'toast';
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');

            const icon = type === 'success' ? 'check-circle' : 'exclamation-circle';
            const bgColor = type === 'success' ? 'success' : 'danger';

            toast.innerHTML = `
                <div class="toast-header bg-${bgColor} text-white">
                    <i class="fas fa-${icon} me-2"></i>
                    <strong class="me-auto">${type === 'success' ? 'Success' : 'Error'}</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            `;

            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast, {
                autohide: true,
                delay: 3000
            });
            bsToast.show();

            // Remove toast from DOM after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        async function updateOrderStatus() {
            const status = document.getElementById('orderStatus').value;
            const orderId = '<%= order._id %>';

            try {
                const response = await fetch(`/admin/orders/${orderId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status })
                });

                const data = await response.json();

                if (data.success) {
                    showToast('Order status updated successfully', 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(data.message || 'Error updating order status', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Error updating order status', 'error');
            }
        }

        async function handleReturnRequest(action) {
            const orderId = '<%= order._id %>';
            const isAccept = action === 'accept';

            const { value: response } = await Swal.fire({
                title: isAccept ? 'Accept Return Request?' : 'Reject Return Request?',
                text: isAccept ? 'Are you sure you want to accept this return request?' : 'Please provide a reason for rejecting this return request',
                icon: isAccept ? 'question' : 'warning',
                input: isAccept ? null : 'textarea',
                inputPlaceholder: 'Enter reason for rejection...',
                inputAttributes: {
                    required: true
                },
                showCancelButton: true,
                confirmButtonText: isAccept ? 'Yes, Accept' : 'Yes, Reject',
                confirmButtonColor: isAccept ? '#28a745' : '#dc3545',
                cancelButtonText: 'Cancel',
                showLoaderOnConfirm: true,
                preConfirm: async () => {
                    try {
                        const response = await fetch(`/admin/orders/${orderId}/return-request`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                action,
                                reason: isAccept ? null : document.querySelector('.swal2-textarea').value
                            })
                        });

                        const data = await response.json();
                        if (!data.success) {
                            throw new Error(data.message || 'Failed to process return request');
                        }
                        return data;
                    } catch (error) {
                        Swal.showValidationMessage(`Request failed: ${error.message}`);
                    }
                },
                allowOutsideClick: () => !Swal.isLoading()
            });

            if (response.isConfirmed) {
                Swal.fire({
                    title: isAccept ? 'Return Request Accepted!' : 'Return Request Rejected',
                    text: response.message,
                    icon: 'success',
                    confirmButtonColor: '#28a745'
                }).then(() => {
                    window.location.reload();
                });
            }
        }
    </script>
</body>
</html> 