<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Offer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Aboreto&family=Jost:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/admin/offers.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
 
</head>
<body>
    <!-- Sidebar -->
<%-include('../partials/admin/sidebar.ejs',{currentPage:'offers'}) %>


    <!-- Main Content -->
    <main class="main-content">
        <div class="header">
            <h1 class="page-title">Edit Offer</h1>
            <a href="/offers" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Offers
            </a>
        </div>

        <!-- Offer Form -->
        <div class="form-container">
            <form id="offer-form">
                <input type="hidden" id="offer-id" value="<%= offer._id %>">
                <div class="form-row">
                    <div class="form-group">
                        <label for="offer-name" class="form-label">Offer Name</label>
                        <input type="text" id="offer-name" class="form-input" value="<%= offer.name %>" required>
                    </div>
                    <div class="form-group">
                        <label for="offer-code" class="form-label">Offer Code</label>
                        <input type="text" id="offer-code" class="form-input" value="<%= offer.code %>" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Discount Type:</label>
                        <select id="discount-type" class="form-input">
                            <option value="percentage" <%= offer.discountType === 'percentage' ? 'selected' : '' %>>Percentage</option>
                            <option value="flat" <%= offer.discountType === 'flat' ? 'selected' : '' %>>Flat</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Discount Value:</label>
                        <input type="number" id="discount-value" class="form-input" min="0" step="0.01" value="<%= offer.discountValue %>" required>
                        <div id="discount-value-error" class="error-message text-sm mt-1"></div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Start Date:</label>
                        <input type="date" id="start-date" class="form-input" value="<%= offer.startDate.toISOString().split('T')[0] %>" required>
                        <div id="start-date-error" class="error-message text-sm mt-1"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">End Date:</label>
                        <input type="date" id="end-date" class="form-input" value="<%= offer.endDate.toISOString().split('T')[0] %>" required>
                        <div id="end-date-error" class="error-message text-sm mt-1"></div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group full-width">
                        <label for="applicable-on" class="form-label">Applicable On</label>
                        <select id="applicable-on" class="form-input">
                            <option value="">Select option</option>
                            <option value="all" <%= offer.applicableOn === 'all' ? 'selected' : '' %>>All Products</option>
                            <option value="categories" <%= offer.applicableOn === 'categories' ? 'selected' : '' %>>Selected Categories</option>
                            <option value="products" <%= offer.applicableOn === 'products' ? 'selected' : '' %>>Selected Products</option>
                        </select>
                    </div>
                </div>

                <!-- Dynamic Selection Sections -->
                <div id="category-selection" class="selection-section <%= offer.applicableOn === 'categories' ? '' : 'hidden' %>">
                    <h3 class="form-label">Select Categories</h3>
                    <div class="selection-grid" id="category-grid">
                        <!-- Categories will be loaded here dynamically -->
                    </div>
                </div>

                <div id="product-selection" class="selection-section <%= offer.applicableOn === 'products' ? '' : 'hidden' %>">
                    <h3 class="form-label">Select Products</h3>
                    <div class="selection-grid" id="product-grid">
                        <!-- Products will be loaded here dynamically -->
                    </div>
                </div>

                <div class="form-footer">
                    <button type="button" class="btn btn-secondary">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Offer</button>
                </div>
            </form>
        </div>
    </main>

    <script>
        // DOM Elements
        const applicableOnSelect = document.getElementById('applicable-on');
        const categorySelection = document.getElementById('category-selection');
        const productSelection = document.getElementById('product-selection');
        const categoryGrid = document.getElementById('category-grid');
        const productGrid = document.getElementById('product-grid');
        const discountTypeSelect = document.getElementById('discount-type');
        const discountValueInput = document.getElementById('discount-value');
        const discountValueError = document.getElementById('discount-value-error');
        const offerId = document.getElementById('offer-id').value;

        // Toastify configuration
        const showToast = (message, type = 'success') => {
            const backgroundColor = type === 'success' ? '#4CAF50' : '#f44336';
            Toastify({
                text: message,
                duration: 3000,
                gravity: "top",
                position: "right",
                backgroundColor: backgroundColor,
                stopOnFocus: true,
            }).showToast();
        };

        // Initialize the page
        document.addEventListener('DOMContentLoaded', async function() {
            try {
                // Fetch categories and products from the backend
                const [categoriesResponse, productsResponse] = await Promise.all([
                    fetch('/admin/category?search=&page=1&limit=100&json=true', {
                        headers: {
                            'Accept': 'application/json'
                        }
                    }),
                    fetch('/admin/product?search=&page=1&limit=100&json=true', {
                        headers: {
                            'Accept': 'application/json'
                        }
                    })
                ]);

                if (!categoriesResponse.ok || !productsResponse.ok) {
                    throw new Error('Failed to fetch data from server');
                }

                const categoriesData = await categoriesResponse.json();
                const productsData = await productsResponse.json();

                if (categoriesData.success && productsData.success) {
                    // Store the data globally
                    window.categories = categoriesData.categories;
                    window.products = productsData.products;

                    // Initial render
                    renderCategories();
                    renderProducts();

                    // Pre-select categories and products
                    const offer = <%- JSON.stringify(offer) %>;
                    if (offer.categories && offer.categories.length > 0) {
                        offer.categories.forEach(catId => {
                            const checkbox = document.querySelector(`input[name="categories"][value="${catId}"]`);
                            if (checkbox) {
                                checkbox.checked = true;
                                checkbox.closest('.selection-item').classList.add('selected');
                            }
                        });
                    }

                    if (offer.products && offer.products.length > 0) {
                        offer.products.forEach(prodId => {
                            const checkbox = document.querySelector(`input[name="products"][value="${prodId}"]`);
                            if (checkbox) {
                                checkbox.checked = true;
                                checkbox.closest('.selection-item').classList.add('selected');
                            }
                        });
                    }
                } else {
                    throw new Error('Failed to fetch data');
                }

                // Set minimum date for start date (today)
                const today = new Date().toISOString().split('T')[0];
                document.getElementById('start-date').min = today;

                // Set minimum date for end date (same as start date)
                document.getElementById('start-date').addEventListener('change', function() {
                    document.getElementById('end-date').min = this.value;
                });

                // Handle discount value validation
                discountValueInput.addEventListener('input', validateDiscountValue);
                discountTypeSelect.addEventListener('change', validateDiscountValue);
            } catch (error) {
                console.error('Error initializing page:', error);
                showToast('Error loading data: ' + error.message, 'error');
            }
        });

        // Handle applicable on selection change
        applicableOnSelect.addEventListener('change', function() {
            categorySelection.classList.add('hidden');
            productSelection.classList.add('hidden');

            if (this.value === 'categories') {
                categorySelection.classList.remove('hidden');
            } else if (this.value === 'products') {
                productSelection.classList.remove('hidden');
            }
        });

        // Render categories with search functionality
        function renderCategories(searchTerm = '') {
            categoryGrid.innerHTML = '';
            const filteredCategories = window.categories.filter(category => 
                category.name.toLowerCase().includes(searchTerm.toLowerCase())
            );

            if (filteredCategories.length === 0) {
                categoryGrid.innerHTML = '<div class="text-center p-4">No categories found</div>';
                return;
            }

            filteredCategories.forEach(category => {
                const item = document.createElement('div');
                item.className = 'selection-item';
                item.innerHTML = `
                    <input type="checkbox" id="cat-${category._id}" name="categories" value="${category._id}" class="hidden">
                    <label for="cat-${category._id}" class="w-full cursor-pointer">
                        ${category.name}
                    </label>
                `;
                
                // Add click handler for the entire item
                item.addEventListener('click', function(e) {
                    const checkbox = this.querySelector('input[type="checkbox"]');
                    checkbox.checked = !checkbox.checked;
                    this.classList.toggle('selected', checkbox.checked);
                });

                categoryGrid.appendChild(item);
            });
        }

        // Render products with search functionality
        function renderProducts(searchTerm = '') {
            productGrid.innerHTML = '';
            const filteredProducts = window.products.filter(product => 
                product.productName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                (product.category && product.category.name.toLowerCase().includes(searchTerm.toLowerCase()))
            );

            if (filteredProducts.length === 0) {
                productGrid.innerHTML = '<div class="text-center p-4">No products found</div>';
                return;
            }

            filteredProducts.forEach(product => {
                const item = document.createElement('div');
                item.className = 'selection-item';
                item.innerHTML = `
                    <input type="checkbox" id="prod-${product._id}" name="products" value="${product._id}" class="hidden">
                    <label for="prod-${product._id}" class="w-full cursor-pointer">
                        ${product.productName} (${product.category ? product.category.name : 'No Category'})
                    </label>
                `;
                
                // Add click handler for the entire item
                item.addEventListener('click', function(e) {
                    const checkbox = this.querySelector('input[type="checkbox"]');
                    checkbox.checked = !checkbox.checked;
                    this.classList.toggle('selected', checkbox.checked);
                });

                productGrid.appendChild(item);
            });
        }

        // Add search functionality with improved styling
        const categorySearch = document.createElement('input');
        categorySearch.type = 'text';
        categorySearch.className = 'form-input mt-2 mb-4';
        categorySearch.placeholder = 'Search categories...';
        categorySearch.addEventListener('input', (e) => renderCategories(e.target.value));
        categoryGrid.parentElement.insertBefore(categorySearch, categoryGrid);

        const productSearch = document.createElement('input');
        productSearch.type = 'text';
        productSearch.className = 'form-input mt-2 mb-4';
        productSearch.placeholder = 'Search products...';
        productSearch.addEventListener('input', (e) => renderProducts(e.target.value));
        productGrid.parentElement.insertBefore(productSearch, productGrid);

        // Validate discount value
        function validateDiscountValue() {
            const value = parseFloat(discountValueInput.value);
            const type = discountTypeSelect.value;

            if (isNaN(value)) {
                discountValueError.textContent = 'Please enter a valid number';
                return false;
            }

            if (type === 'percentage' && (value < 0 || value > 100)) {
                discountValueError.textContent = 'Percentage must be between 0 and 100';
                return false;
            }

            if (type === 'flat' && value < 0) {
                discountValueError.textContent = 'Amount must be positive';
                return false;
            }

            discountValueError.textContent = '';
            return true;
        }

        // Form submission
        document.getElementById('offer-form').addEventListener('submit', async function(e) {
            e.preventDefault();

            if (!validateDiscountValue()) {
                return;
            }

            // Collect form data
            const formData = {
                name: document.getElementById('offer-name').value,
                code: document.getElementById('offer-code').value,
                discountType: discountTypeSelect.value,
                discountValue: parseFloat(discountValueInput.value),
                startDate: document.getElementById('start-date').value,
                endDate: document.getElementById('end-date').value,
                applicableOn: applicableOnSelect.value,
                categories: [],
                products: []
            };

            // Get selected categories if applicable
            if (formData.applicableOn === 'categories') {
                const selectedCategories = document.querySelectorAll('input[name="categories"]:checked');
                selectedCategories.forEach(cat => {
                    formData.categories.push(cat.value);
                });
            }

            // Get selected products if applicable
            if (formData.applicableOn === 'products') {
                const selectedProducts = document.querySelectorAll('input[name="products"]:checked');
                selectedProducts.forEach(prod => {
                    formData.products.push(prod.value);
                });
            }

            try {
                const response = await fetch(`/admin/edit-offer/${offerId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Offer updated successfully!');
                    setTimeout(() => {
                        window.location.href = '/admin/offers';
                    }, 1500);
                } else {
                    throw new Error(result.message || 'Failed to update offer');
                }
            } catch (error) {
                console.error('Error updating offer:', error);
                showToast(error.message || 'Error updating offer. Please try again.', 'error');
            }
        });

        // Cancel button
        document.querySelector('.btn-secondary').addEventListener('click', function() {
            if (confirm('Are you sure you want to cancel? All changes will be lost.')) {
                window.location.href = '/admin/offers';
            }
        });
    </script>
</body>
</html> 