<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Jewelry Product - LUME Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Jost:wght@400;500;600&family=Aboreto&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/admin/product.css">
  <link rel="icon" href="/images/image.png" type="image/png">

</head>
<body>
  <div class="bg-light-bg p-6 min-h-screen">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-5xl mx-auto">
      <h1 class="text-2xl font-aboreto text-dark-brown mb-6 text-center uppercase letter-spacing-1-5">Add Jewelry Product</h1>

      <form id="addProductForm" method="post" action="/admin/add-product" enctype="multipart/form-data" class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="md:col-span-1">
          <label class="block mb-2 font-jost text-dark-brown font-medium text-sm">Add 3 Images:</label>
          <div class="flex gap-4">
            <div class="relative w-20 h-20 border-2 border-dashed border-border-color rounded-lg bg-light-bg flex items-center justify-center">
              <input type="file" name="images" id="imageInput" class="form-control" accept="image/*" multiple onchange="handleImageUpload(event)">
              <label for="imageInput" class="cursor-pointer text-dark-brown text-sm absolute inset-0 flex items-center justify-center font-jost">Upload</label>
            </div>
            <div class="relative w-20 h-20 border-2 border-dashed border-border-color rounded-lg bg-light-bg flex items-center justify-center">
              <img id="preview1" class="w-full h-full object-cover rounded-lg hidden" alt="Preview 1">
            </div>
            <div class="relative w-20 h-20 border-2 border-dashed border-border-color rounded-lg bg-light-bg flex items-center justify-center">
              <img id="preview2" class="w-full h-full object-cover rounded-lg hidden" alt="Preview 2">
            </div>
            <div class="relative w-20 h-20 border-2 border-dashed border-border-color rounded-lg bg-light-bg flex items-center justify-center">
              <img id="preview3" class="w-full h-full object-cover rounded-lg hidden" alt="Preview 3">
            </div>
          </div>
          <p class="form-hint">Recommended: 800×800px, JPG/PNG, max 3 images</p>
          <div id="addedImagesContainer" style="display: flex; flex-wrap: wrap; gap: 10px; margin-top: 10px;"></div>
          <div id="image-error" class="error-message text-dark-brown text-sm mt-1"></div>
        </div>

        <div id="cropModal" class="fixed inset-0 bg-dark-brown bg-opacity-50 flex justify-center items-center z-50 hidden">
          <div class="bg-white p-4 rounded-lg w-[450px] max-w-full shadow-lg">
            <h3 class="text-dark-brown text-xl mb-4 font-jost">Crop Image</h3>
            <div>
              <img id="cropImage" style="width: auto; height: 500px;">
            </div>
            <div class="mt-4 flex justify-end gap-2">
              <button id="cropButton" class="bg-dark-brown text-white px-4 py-2 rounded font-jost hover:bg-olive-green transition-all">Crop</button>
              <button id="cancelCrop" class="bg-border-color text-dark-brown px-4 py-2 rounded font-jost hover:bg-dark-brown hover:text-white transition-all">Cancel</button>
            </div>
          </div>
        </div>

        <div class="md:col-span-1 grid grid-cols-1 gap-4">
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Product Name:</label>
            <input type="text" name="productName" id="productName" class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none">
            <div id="productName-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Product Description:</label>
            <textarea name="description" id="description" class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none" rows="5"></textarea>
            <div id="description-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Category:</label>
            <select name="category" id="product-category" class="w-full p-2 border-b border-border-color bg-white text-dark-brown font-jost focus:border-dark-brown outline-none">
              <option value="">Select category</option>
              <% if (categories && categories.length > 0) { %>
                <% categories.forEach(category => { %>
                  <option style="color: #291d0e;" value="<%= category._id %>">
                    <%= category.name %>
                  </option>
                <% }) %>
              <% } else { %>
                <option value="" disabled>No categories available</option>
              <% } %>
            </select>
            <div id="category-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div id="dynamic-sizes" class="form-group" style="display: none;">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Sizes and Quantities:</label>
            <div class="flex gap-2 mb-2">
              <input type="text" id="size-input" class="w-1/2 p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none" placeholder="Enter size (e.g., 6, 16in)">
              <input type="number" id="size-quantity-input" class="w-1/2 p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none" placeholder="Quantity" min="0">
              <button type="button" id="add-size-btn" class="bg-dark-brown text-white px-4 py-2 rounded font-jost hover:bg-olive-green transition-all">Add</button>
            </div>
            <div id="sizes-list" class="flex flex-wrap gap-2"></div>
            <input type="hidden" name="sizes" id="sizes-input">
            <div id="sizes-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Regular Amount (₹):</label>
            <input type="number" name="regularPrice" id="regularPrice" class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none" min="0" step="0.01">
            <div id="regularPrice-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Sales Amount (₹):</label>
            <input type="number" name="salePrice" id="salePrice" class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none" min="0" step="0.01">
            <div id="salePrice-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Stock Count (Total):</label>
            <input type="number" name="quantity" id="quantity" class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none" min="0">
            <div id="quantity-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div class="flex flex-col">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Featured:</label>
            <div class="flex gap-4">
              <label class="font-jost text-dark-brown"><input type="radio" name="featured" value="yes" class="mr-1 accent-dark-brown"> Yes</label>
              <label class="font-jost text-dark-brown"><input type="radio" name="featured" value="no" class="mr-1 accent-dark-brown"> No</label>
            </div>
            <div id="featured-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div class="flex flex-col">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">New Product:</label>
            <div class="flex gap-4">
              <label class="font-jost text-dark-brown"><input type="radio" name="new" value="yes" class="mr-1 accent-dark-brown"> Yes</label>
              <label class="font-jost text-dark-brown"><input type="radio" name="new" value="no" class="mr-1 accent-dark-brown"> No</label>
            </div>
            <div id="new-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
        </div>

        <div class="md:col-span-2 flex justify-center">
          <button type="submit" id="submitButton" class="bg-dark-brown text-white px-6 py-2 rounded-lg font-jost font-medium uppercase letter-spacing-0.8 hover:bg-olive-green hover:-translate-y-0.5 transition-all mt-5">
            Add Product
          </button>
        </div>
      </form>
    </div>
  </div>

 

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script>
    let cropper = null;
    let currentImageIndex = 0;
    let selectedFiles = [];
    let selectedSizes = [];
    const imageInput = document.getElementById("imageInput");
    const previewImages = [
      document.getElementById("preview1"),
      document.getElementById("preview2"),
      document.getElementById("preview3"),
    ];
    const cropModal = document.getElementById("cropModal");
    const cropImage = document.getElementById("cropImage");
    const cropButton = document.getElementById("cropButton");
    const cancelCrop = document.getElementById("cancelCrop");
    const form = document.getElementById("addProductForm");
    let isSubmitting = false;

    function handleImageUpload(event) {
      console.log("handleImageUpload triggered");
      const files = event.target.files;
      if (!files || files.length === 0) {
        console.log("No files selected");
        return;
      }

      if (files.length > 3) {
        displayErrorMessage("image-error", "You can upload a maximum of 3 images");
        event.target.value = "";
        console.log("Too many files selected:", files.length);
        return;
      }

      selectedFiles = Array.from(files).filter((file) => {
        if (!["image/jpeg", "image/png", "image/webp"].includes(file.type)) {
          displayErrorMessage("image-error", "Only JPG, PNG, or WEBP files are allowed");
          console.log("Invalid file type:", file.type);
          return false;
        }
        if (file.size > 5 * 1024 * 1024) {
          displayErrorMessage("image-error", "Image size must be less than 5MB");
          console.log("File too large:", file.size);
          return false;
        }
        return true;
      });

      if (selectedFiles.length === 0) {
        event.target.value = "";
        console.log("No valid files selected");
        return;
      }

      currentImageIndex = 0;
      processNextImage();
    }

    function processNextImage() {
      if (currentImageIndex >= selectedFiles.length) {
        console.log("All images processed");
        updateThumbnails();
        return;
      }

      const file = selectedFiles[currentImageIndex];
      console.log("Processing image", currentImageIndex + 1, file.name);
      const reader = new FileReader();
      reader.onload = function (e) {
        console.log("FileReader onload triggered for image", currentImageIndex + 1);
        try {
          cropImage.src = e.target.result;
          cropImage.onload = function () {
            console.log("Crop image loaded");
            cropModal.style.display = "flex";
            console.log("Crop modal displayed for image", currentImageIndex + 1);

            if (cropper) {
              cropper.destroy();
              cropper = null;
              console.log("Previous cropper destroyed");
            }

            try {
              cropper = new Cropper(cropImage, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 0.8,
                guides: true,
                background: false,
                zoomable: true,
                ready: function () {
                  console.log("Cropper ready for image", currentImageIndex + 1);
                },
              });
              console.log("Cropper initialized for image", currentImageIndex + 1);
            } catch (error) {
              console.error("Error initializing Cropper:", error);
              displayErrorMessage("image-error", "Failed to initialize cropper");
              cropModal.style.display = "none";
              currentImageIndex++;
              processNextImage();
            }
          };
          cropImage.onerror = function () {
            console.error("Error loading crop image");
            displayErrorMessage("image-error", "Failed to load image");
            cropModal.style.display = "none";
            currentImageIndex++;
            processNextImage();
          };
        } catch (error) {
          console.error("Error setting up cropper:", error);
          displayErrorMessage("image-error", "Failed to load image for cropping");
          cropModal.style.display = "none";
          currentImageIndex++;
          processNextImage();
        }
      };
      reader.onerror = function (error) {
        console.error("FileReader error:", error);
        displayErrorMessage("image-error", "Error reading file");
        currentImageIndex++;
        processNextImage();
      };
      reader.readAsDataURL(file);
    }

    cropButton.addEventListener("click", function () {
      console.log("Crop button clicked for image", currentImageIndex + 1);
      if (!cropper) {
        console.error("Cropper not initialized");
        displayErrorMessage("image-error", "Cropper not initialized");
        cropModal.style.display = "none";
        currentImageIndex++;
        processNextImage();
        return;
      }

      try {
        const canvas = cropper.getCroppedCanvas({
          aspectRatio: 2/3,
          minWidth: 160,
          minHeight: 160,
          maxWidth: 4096,
          maxHeight: 4096,
          imageSmoothingEnabled: true,
          imageSmoothingQuality: "high",
        });

        if (!canvas) {
          console.error("Failed to get cropped canvas");
          displayErrorMessage("image-error", "Failed to crop image");
          cropModal.style.display = "none";
          currentImageIndex++;
          processNextImage();
          return;
        }

        canvas.toBlob((blob) => {
          const file = new File([blob], `cropped_${Date.now()}.png`, { type: "image/png" });
          selectedFiles[currentImageIndex] = file;

          if (currentImageIndex < previewImages.length) {
            previewImages[currentImageIndex].src = URL.createObjectURL(blob);
            previewImages[currentImageIndex].classList.remove("hidden");
          }

          cropModal.style.display = "none";
          cropper.destroy();
          cropper = null;
          console.log("Crop modal hidden and cropper destroyed");

          currentImageIndex++;
          processNextImage();
        }, "image/png", 0.9);
      } catch (error) {
        console.error("Error cropping image:", error);
        displayErrorMessage("image-error", "Error cropping image");
        cropModal.style.display = "none";
        currentImageIndex++;
        processNextImage();
      }
    });

    cancelCrop.addEventListener("click", function () {
      console.log("Cancel crop clicked for image", currentImageIndex + 1);
      cropModal.style.display = "none";
      selectedFiles.splice(currentImageIndex, 1);
      updateThumbnails();
      if (cropper) {
        cropper.destroy();
        cropper = null;
        console.log("Cropper destroyed on cancel");
      }
      currentImageIndex++;
      processNextImage();
    });

    function updateThumbnails() {
      console.log("Updating thumbnails");
      const addedImagesContainer = document.getElementById("addedImagesContainer");
      addedImagesContainer.innerHTML = "";

      selectedFiles.forEach((file, index) => {
        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail");

        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";
        img.style.width = "50px";
        img.style.height = "auto";

        const removeIcon = document.createElement("span");
        removeIcon.classList.add("remove-icon");
        removeIcon.innerHTML = "×";
        removeIcon.addEventListener("click", function () {
          selectedFiles.splice(index, 1);
          if (index < previewImages.length) {
            previewImages[index].classList.add("hidden");
            previewImages[index].src = "";
          }
          updateThumbnails();
          console.log("Thumbnail removed for image", index + 1);
        });

        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        addedImagesContainer.appendChild(thumbnail);
        console.log("Thumbnail added for image", index + 1);

        if (index < previewImages.length) {
          previewImages[index].src = URL.createObjectURL(file);
          previewImages[index].classList.remove("hidden");
        }
      });
    }

    const categorySelect = document.getElementById("product-category");
    const dynamicSizesSection = document.getElementById("dynamic-sizes");
    const sizeInput = document.getElementById("size-input");
    const sizeQuantityInput = document.getElementById("size-quantity-input");
    const addSizeBtn = document.getElementById("add-size-btn");
    const sizesList = document.getElementById("sizes-list");
    const sizesInput = document.getElementById("sizes-input");
    const stockInput = document.getElementById("quantity");

    categorySelect.addEventListener("change", function () {
      console.log("Category changed to:", categorySelect.value);
      const selected = categorySelect.value;
      if (selected) {
        dynamicSizesSection.style.display = "block";
        console.log("Showing dynamic sizes section for:", selected);
      } else {
        dynamicSizesSection.style.display = "none";
        selectedSizes = [];
        updateSizesList();
        console.log("Hiding dynamic sizes section");
      }
    });

    addSizeBtn.addEventListener("click", function () {
      const size = sizeInput.value.trim();
      const quantity = parseInt(sizeQuantityInput.value.trim() || 0);

     

      if (isNaN(quantity) || quantity < 0) {
        displayErrorMessage("sizes-error", "Please enter a valid quantity (0 or more)");
        return;
      }

      const sizeRegex = /^[0-9]+(\.[0-9]+)?(in)?$/;
      if (!sizeRegex.test(size)) {
        displayErrorMessage("sizes-error", "Invalid size format. Use numbers optionally followed by 'in' (e.g., 6, 16in, 1.5in)");
        return;
      }

      if (!selectedSizes.some(item => item.size === size)) {
        selectedSizes.push({ size, quantity });
        updateSizesList();
        console.log("Size and quantity added:", size, quantity);
      } else {
        displayErrorMessage("sizes-error", "This size is already added");
      }
      sizeInput.value = "";
      sizeQuantityInput.value = "";
    });

    function updateSizesList() {
      sizesList.innerHTML = "";
      let totalQuantity = 0;

      selectedSizes.forEach((item, index) => {
        const sizeTag = document.createElement("div");
        sizeTag.classList.add("size-tag");
        sizeTag.innerHTML = `
          <span>${item.size} (${item.quantity})</span>
          <span class="remove-size">×</span>
        `;
        sizeTag.querySelector(".remove-size").addEventListener("click", () => {
          selectedSizes.splice(index, 1);
          updateSizesList();
          console.log("Size removed:", item.size);
        });
        sizesList.appendChild(sizeTag);
        totalQuantity += Number(item.quantity) || 0;
      });

      stockInput.value = totalQuantity > 0 ? totalQuantity : 0;
      sizesInput.value = JSON.stringify(selectedSizes);
      console.log("Total quantity updated:", totalQuantity);
    }

    form.addEventListener("submit", async function (event) {
      event.preventDefault();

      if (isSubmitting) return;
      isSubmitting = true;

      const submitButton = document.getElementById("submitButton");
      submitButton.disabled = true;
      submitButton.innerHTML = "Submitting...";

      if (!validateForm()) {
        isSubmitting = false;
        submitButton.disabled = false;
        submitButton.innerHTML = "Add Product";
        return;
      }

      try {
        const formData = new FormData();

        formData.append("productName", document.getElementById("productName").value.trim());
        formData.append("description", document.getElementById("description").value.trim());
        formData.append("category", document.getElementById("product-category").value.trim());
        formData.append("regularPrice", document.getElementById("regularPrice").value);
        formData.append("salePrice", document.getElementById("salePrice").value || document.getElementById("regularPrice").value);
        formData.append("quantity", document.getElementById("quantity").value);
        formData.append("featured", document.querySelector('input[name="featured"]:checked').value);
        formData.append("new", document.querySelector('input[name="new"]:checked').value);
        formData.append("sizes", document.getElementById("sizes-input").value);

        selectedFiles.forEach((file) => {
          formData.append("images", file);
        });

        const response = await fetch("/admin/add-product", {
          method: "POST",
          body: formData,
        });

        const contentType = response.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
          throw new Error("Server returned non-JSON response. Please try again.");
        }

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.message || "Failed to add product");
        }

        Swal.fire({
          icon: "success",
          title: "Success",
          text: data.message,
          timer: 2000,
          showConfirmButton: false,
        }).then(() => {
          window.location.href = "/admin/product";
        });
      } catch (error) {
        console.error("Submission error:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: error.message || "Failed to add product. Please try again.",
        });
      } finally {
        isSubmitting = false;
        submitButton.disabled = false;
        submitButton.innerHTML = "Add Product";
      }
    });

    function validateForm() {
      console.log("Validating form");
      clearErrorMessages();

      const productName = document.getElementById("productName").value.trim();
      const description = document.getElementById("description").value.trim();
      const category = document.getElementById("product-category").value.trim();
      const regularPrice = document.getElementById("regularPrice").value.trim();
      const salePrice = document.getElementById("salePrice").value.trim();
      const quantity = document.getElementById("quantity").value.trim();
      const featuredSelected = document.querySelector('input[name="featured"]:checked');
      const newSelected = document.querySelector('input[name="new"]:checked');

      let isValid = true;

      if (productName === "") {
        displayErrorMessage("productName-error", "Please enter a product name");
        isValid = false;
        console.log("Validation failed: Empty product name");
      } else if (!/^[A-Z][a-zA-Z0-9\s]*$/.test(productName)) {
        displayErrorMessage("productName-error", "Product name should start with a capital letter and contain only alphabets");
        isValid = false;
        console.log("Validation failed: Invalid product name format");
      }

      if (category === "") {
        displayErrorMessage("category-error", "Please select a category");
        isValid = false;
        console.log("Validation failed: No category selected");
      }

      if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
        console.log("Validation failed: Empty description");
      } else if (description.length < 10) {
        displayErrorMessage("description-error", "Description should be at least 10 characters long");
        isValid = false;
        console.log("Validation failed: Description too short");
      }

      const allowedTypes = ["image/jpeg", "image/png", "image/webp"];
      if (selectedFiles.length !== 3) {
        displayErrorMessage("image-error", "Please upload exactly three images");
        isValid = false;
        console.log("Validation failed: Incorrect number of images", selectedFiles.length);
      } else if (!selectedFiles.every((file) => allowedTypes.includes(file.type))) {
        displayErrorMessage("image-error", "Only JPG, PNG, or WEBP files are allowed");
        isValid = false;
        console.log("Validation failed: Invalid image types");
      }

      if (salePrice && parseFloat(salePrice) >= parseFloat(regularPrice)) {
        displayErrorMessage("salePrice-error", "Sale price must be less than regular price");
        isValid = false;
        console.log("Validation failed: Invalid sale price");
      }

      if (regularPrice === "" || isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
        displayErrorMessage("regularPrice-error", "Enter a valid amount greater than 0");
        isValid = false;
        console.log("Validation failed: Invalid regular price");
      }

      if (quantity === "" || !Number.isInteger(Number(quantity)) || parseInt(quantity) < 0) {
        displayErrorMessage("quantity-error", "Enter a valid stock quantity (0 or more)");
        isValid = false;
        console.log("Validation failed: Invalid quantity");
      }

      if (selectedSizes.some(item => item.quantity < 0)) {
        displayErrorMessage("sizes-error", "All size quantities must be 0 or more");
        isValid = false;
        console.log("Validation failed: Invalid size quantities");
      }

      if (!featuredSelected) {
        displayErrorMessage("featured-error", "Please select featured status");
        isValid = false;
        console.log("Validation failed: Missing featured status");
      }

      if (!newSelected) {
        displayErrorMessage("new-error", "Please select new product status");
        isValid = false;
        console.log("Validation failed: Missing new status");
      }

      console.log("Form validation result:", isValid);
      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      console.log("Displaying error message for", elementId, ":", message);
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessages() {
      console.log("Clearing error messages");
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
      });
    }
  </script>
</body>
</html>