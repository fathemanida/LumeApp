<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Jewelry Product - LUME Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Jost:wght@400;500;600&family=Aboreto&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
  <style>
    :root {
      --dark-brown: #291d0e;
      --olive-green: #314216;
      --light-bg: #f8f5f2;
      --border-color: #d3c9be;
      --error: #e74c3c;
    }

    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
    }

    .bg-light-bg { background-color: var(--light-bg); }
    .bg-white { background-color: #ffffff; }
    .rounded-lg { border-radius: 8px; }
    .shadow-lg { box-shadow: 0 5px 25px rgba(41, 29, 14, 0.08); }
    .max-w-5xl { max-width: 64rem; }
    .mx-auto { margin-left: auto; margin-right: auto; }
    .min-h-screen { min-height: 100vh; }
    .p-6 { padding: 1.5rem; }
    .text-2xl { font-size: 1.5rem; }
    .font-aboreto { font-family: 'Aboreto', cursive; }
    .text-dark-brown { color: var(--dark-brown); }
    .mb-6 { margin-bottom: 1.5rem; }
    .text-center { text-align: center; }
    .uppercase { text-transform: uppercase; }
    .letter-spacing-1-5 { letter-spacing: 1.5px; }
    .grid { display: grid; }
    .grid-cols-1 { grid-template-columns: 1fr; }
    .md\\:grid-cols-2 { @media (min-width: 768px) { grid-template-columns: repeat(2, 1fr); } }
    .gap-6 { gap: 1.5rem; }
    .gap-4 { gap: 1rem; }
    .md\\:col-span-1 { @media (min-width: 768px) { grid-column: span 1; } }
    .md\\:col-span-2 { @media (min-width: 768px) { grid-column: span 2; } }
    .block { display: block; }
    .mb-2 { margin-bottom: 0.5rem; }
    .mb-1 { margin-bottom: 0.25rem; }
    .font-jost { font-family: 'Jost', sans-serif; }
    .font-medium { font-weight: 500; }
    .text-sm { font-size: 0.875rem; }
    .flex { display: flex; }
    .relative { position: relative; }
    .w-20 { width: 5rem; }
    .h-20 { height: 5rem; }
    .border-2 { border-width: 2px; }
    .border-dashed { border-style: dashed; }
    .border-border-color { border-color: var(--border-color); }
    .bg-light-bg { background-color: var(--light-bg); }
    .items-center { align-items: center; }
    .justify-center { justify-content: center; }
    .form-control { position: absolute; width: 100%; height: 100%; opacity: 0; cursor: pointer; }
    .cursor-pointer { cursor: pointer; }
    .absolute { position: absolute; }
    .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
    .w-full { width: 100%; }
    .h-full { height: 100%; }
    .object-cover { object-fit: cover; }
    .hidden { display: none; }
    .form-hint { font-size: 0.8rem; color: var(--dark-brown); opacity: 0.7; font-family: 'Jost', sans-serif; margin-top: 0.25rem; }
    .thumbnail { position: relative; display: inline-block; }
    .thumbnail img { width: 50px; height: auto; border-radius: 4px; }
    .remove-icon { position: absolute; top: -5px; right: -5px; background: var(--error); color: #ffffff; width: 20px; height: 20px; border-radius: 50%; display: flex; align-items: center; justify-content: center; cursor: pointer; font-size: 1rem; }
    .fixed { position: fixed; }
    .bg-dark-brown { background-color: var(--dark-brown); }
    .bg-opacity-50 { background-color: rgba(41, 29, 14, 0.5); }
    .z-50 { z-index: 50; }
    .text-xl { font-size: 1.25rem; }
    .mb-4 { margin-bottom: 1rem; }
    .mt-4 { margin-top: 1rem; }
    .justify-end { justify-content: flex-end; }
    .gap-2 { gap: 0.5rem; }
    .text-white { color: #ffffff; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
    .rounded { border-radius: 0.25rem; }
    .p-4 { padding: 1rem; }
    .p-2 { padding: 0.5rem; }
    .border-b { border-bottom: 1px solid; }
    .bg-transparent { background-color: transparent; }
    .focus\\:border-dark-brown:focus { border-color: var(--dark-brown); }
    .outline-none { outline: none; }
    .flex-col { flex-direction: column; }
    .mt-1 { margin-top: 0.25rem; }
    .error-message { color: var(--error); font-size: 0.8rem; margin-top: 0.25rem; display: none; font-family: 'Jost', sans-serif; }
    .px-6 { padding-left: 1.5rem; padding-right: 1.5rem; }
    .mt-5 { margin-top: 1.25rem; }
    .letter-spacing-0-8 { letter-spacing: 0.8px; }
    .hover\\:bg-olive-green:hover { background-color: var(--olive-green); }
    .hover\\:text-white:hover { color: #ffffff; }
    .transition-all { transition: all 0.3s ease; }
    .transition-opacity { transition: opacity 0.3s ease; }
    .accent-dark-brown { accent-color: var(--dark-brown); }
    .mr-1 { margin-right: 0.25rem; }
    .size-tag { background-color: var(--dark-brown); color: #ffffff; padding: 0.25rem 0.5rem; border-radius: 4px; display: flex; align-items: center; gap: 0.5rem; }
    .size-tag .remove-size { cursor: pointer; font-size: 0.8rem; }
    .flex-wrap { flex-wrap: wrap; }

    @media (max-width: 768px) {
      .md\\:col-span-1, .md\\:col-span-2 { grid-column: span 1; }
    }

    #cropModal {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(41, 29, 14, 0.5);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      overflow-y: auto; /* Enable vertical scrolling for the modal */
      padding: 20px;
    }

    #cropModal .modal-content {
      background: white;
      padding: 20px;
      border-radius: 8px;
      width: 90%;
      max-width: 500px;
      max-height: 90vh; /* Limit modal height to 90% of viewport height */
      display: flex;
      flex-direction: column; /* Stack content vertically */
      overflow: hidden; /* Prevent internal overflow issues */
    }

    #cropModal .cropper-container {
      max-height: 50vh; /* Restrict cropper container height */
      width: 100% !important;
      overflow: hidden; /* Prevent cropper from overflowing */
    }

    #cropModal .cropper-wrap-box {
      max-height: 50vh; /* Ensure wrap box respects height limit */
      overflow: hidden;
    }

    #cropModal .cropper-view-box {
      max-height: 50vh; /* Restrict view box height */
    }

    #cropModal .cropper-canvas {
      max-height: 50vh; /* Restrict canvas height */
    }

    #cropModal .crop-image-container {
      max-height: 50vh; /* Limit the image container height */
      overflow: hidden; /* Hide overflow to prevent stretching */
    }

    #cropModal img#cropImage {
      max-height: 50vh; /* Ensure the image itself is constrained */
      width: 100%; /* Maintain aspect ratio */
      object-fit: contain; /* Prevent image distortion */
    }

    #cropModal .modal-footer {
      margin-top: 20px; /* Space above buttons */
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      flex-shrink: 0; /* Prevent buttons from shrinking */
      padding-top: 10px; /* Add padding for better spacing */
    }

    @media (max-width: 768px) {
      #cropModal .modal-content {
        width: 95%; /* Slightly wider on smaller screens */
        max-height: 95vh; /* Allow more height on mobile */
      }

      #cropModal .cropper-container,
      #cropModal .cropper-wrap-box,
      #cropModal .cropper-view-box,
      #cropModal .cropper-canvas,
      #cropModal .crop-image-container {
        max-height: 45vh; /* Slightly smaller cropper area on mobile */
      }
    }
  </style>
</head>

<body>
  <div class="bg-light-bg p-6 min-h-screen">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-5xl mx-auto">
      <h1 class="text-2xl font-aboreto text-dark-brown mb-6 text-center uppercase letter-spacing-1-5">Edit Product</h1>

      <form id="editProductForm" enctype="multipart/form-data" class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="md:col-span-1">
          <label class="block mb-2 font-jost text-dark-brown font-medium text-sm">Product Images:</label>
          <div class="flex gap-4">
            <% for(let i=0; i < 3; i++) { %>
              <div class="relative w-24 h-24 border-2 border-dashed border-border-color rounded-lg bg-light-bg flex items-center justify-center group overflow-hidden">
                <!-- Existing Image Display -->
                <% if (product.productImage[i]) { %>
                  <img src="/Uploads/product/<%= product.productImage[i] %>"
                       class="w-full h-full object-cover rounded-lg"
                       alt="Product Image <%= i + 1 %>"
                       id="image<%= i %>">
                  <div class="absolute inset-0 bg-dark-brown bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                    <label class="cursor-pointer p-2 bg-white bg-opacity-80 rounded-full hover:bg-opacity-100 transition-all">
                      <input type="file" name="newImage<%= i %>" 
                             class="hidden single-image-input" 
                             accept="image/*"
                             data-index="<%= i %>" 
                             onchange="handleSingleImageUpload(event, <%= i %>)">
                      <i class="fas fa-camera text-dark-brown"></i>
                    </label>
                  </div>
                <% } else { %>
                 
                  <label class="cursor-pointer w-full h-full flex items-center justify-center">
                    <input type="file" name="newImage<%= i %>" 
                           class="hidden single-image-input" 
                           accept="image/*"
                           data-index="<%= i %>" 
                           onchange="handleSingleImageUpload(event, <%= i %>)">
                    <i class="fas fa-plus text-dark-brown text-2xl"></i>
                  </label>
                <% } %>
              </div>
            <% } %>
          </div>
          <p class="form-hint mt-2 text-xs text-gray-500">Click on each image to change it. Recommended: 800×800px, JPG/PNG</p>
          <div id="image-error" class="error-message text-red-500 text-sm mt-1"></div>
        </div>

        <div id="cropModal" class="fixed inset-0 bg-dark-brown bg-opacity-50 flex justify-center items-center z-50 hidden overflow-y-auto">
          <div class="modal-content">
            <h3 class="text-dark-brown text-xl mb-4 font-jost">Crop Image</h3>
            <div class="crop-image-container">
              <img id="cropImage" class="max-w-full">
            </div>
            <div class="modal-footer">
              <button type="button" id="cropButton" class="bg-dark-brown text-white px-4 py-2 rounded font-jost hover:bg-olive-green transition-all">Save</button>
              <button type="button" id="cancelCrop" class="bg-border-color text-dark-brown px-4 py-2 rounded font-jost hover:bg-dark-brown hover:text-white transition-all">Cancel</button>
            </div>
          </div>
        </div>

        <div class="md:col-span-1 grid grid-cols-1 gap-4">
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Product Name:</label>
            <input type="text" name="productName" id="name"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              value="<%= product.productName %>">
            <div id="name-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Product Description:</label>
            <textarea name="description" id="description"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              rows="5"><%= product.description %></textarea>
            <div id="description-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Category:</label>
            <select name="category" id="product-category"
              class="w-full p-2 border-b border-border-color bg-white text-dark-brown font-jost focus:border-dark-brown outline-none">
              <option value="">Select category</option>
              <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
                <% categories.forEach(function(category) { %>
                  <option value="<%= category._id %>" <%= (product.category && product.category._id.toString() === category._id.toString()) ? 'selected' : '' %>
                    style="color: #291d0e;" data-name="<%= category.name %>">
                    <%= category.name %>
                  </option>
                <% }); %>
              <% } else { %>
                <option value="" disabled>No categories available</option>
              <% } %>
            </select>
            <div id="category-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div id="dynamic-sizes" class="form-group">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Sizes:</label>
            <div class="flex gap-2 mb-2">
              <input type="text" id="size-input"
                class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
                placeholder="Enter size (e.g., 6, 16in)"
               >
              <button type="button" id="add-size-btn"
                class="bg-dark-brown text-white px-4 py-2 rounded font-jost hover:bg-olive-green transition-all">Add</button>
            </div>
            <div id="sizes-list" class="flex flex-wrap gap-2"> <%= product.sizes %></div>
            <input type="hidden" name="sizes" id="sizes-input"  >
            <div id="sizes-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Regular Amount (₹):</label>
            <input type="number" name="regularPrice" id="amount"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              min="0" step="0.01" value="<%= product.regularPrice %>">
            <div id="amount-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Sales Amount (₹):</label>
            <input type="number" name="salePrice" id="salesAmount"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              min="0" step="0.01" value="<%= product.salePrice %>">
            <div id="salesAmount-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Stock Count:</label>
            <input type="number" name="quantity" id="stock"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              min="0" value="<%= product.quantity %>">
            <div id="stock-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div class="flex flex-col">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Featured:</label>
            <div class="flex gap-4">
              <label class="font-jost text-dark-brown"><input type="radio" name="featured" value="yes"
                  class="mr-1 accent-dark-brown" <%= product.featured ? 'checked' : '' %>> Yes</label>
              <label class="font-jost text-dark-brown"><input type="radio" name="featured" value="no"
                  class="mr-1 accent-dark-brown" <%= !product.featured ? 'checked' : '' %>> No</label>
            </div>
            <div id="featured-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div class="flex flex-col">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">New Product:</label>
            <div class="flex gap-4">
              <label class="font-jost text-dark-brown"><input type="radio" name="new" value="yes"
                  class="mr-1 accent-dark-brown" <%= product.new ? 'checked' : '' %>> Yes</label>
              <label class="font-jost text-dark-brown"><input type="radio" name="new" value="no"
                  class="mr-1 accent-dark-brown" <%= !product.new ? 'checked' : '' %>> No</label>
            </div>
            <div id="new-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
        </div>

        <div class="md:col-span-2 flex justify-center">
          <button type="submit" id="submitButton"
            class="bg-dark-brown text-white px-6 py-2 rounded-lg font-jost font-medium uppercase letter-spacing-0.8 hover:bg-olive-green hover:-translate-y-0.5 transition-all mt-5">
            Update Product
          </button>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script>
    let cropper = null;
    let currentImageIndex = 0;
    let selectedFiles = Array(3).fill(null);
    let existingImages = <%- JSON.stringify(product.productImage || []) %>;
    let selectedSizes = <%- JSON.stringify(product.sizes || []) %>;
    const cropModal = document.getElementById("cropModal");
    const cropImage = document.getElementById("cropImage");
    const cropButton = document.getElementById("cropButton");
    const cancelCrop = document.getElementById("cancelCrop");
    const form = document.getElementById("editProductForm");
    let isSubmitting = false;

    function handleSingleImageUpload(event, index) {
      const file = event.target.files[0];
      if (!file) return;

      if (!file.type.match('image.*')) {
        displayErrorMessage('image-error', 'Only image files are allowed');
        return;
      }

      if (file.size > 5 * 1024 * 1024) {
        displayErrorMessage('image-error', 'Image size must be less than 5MB');
        return;
      }

      currentImageIndex = index;
      selectedFiles[index] = file;

      const reader = new FileReader();
      reader.onload = function(e) {
        const cropImage = document.getElementById('cropImage');
        cropImage.src = e.target.result;
        const cropModal = document.getElementById('cropModal');
        cropModal.style.display = "flex";

        if (cropper) {
          cropper.destroy();
        }

       
        cropImage.onload = function() {
          cropper = new Cropper(cropImage, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 0.8,
            background: false,
            zoomable: true,
            minCropBoxWidth: 160,
            minCropBoxHeight: 160,
            responsive: true,
            restore: false,
            checkCrossOrigin: false,
            modal: true,
            guides: true,
            highlight: true,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
            ready: function() {
             
              const maxHeight = window.innerHeight * 0.5; 
              const maxWidth = window.innerWidth * 0.9; 
              const imageData = this.cropper.getImageData();
              const scale = Math.min(
                maxWidth / imageData.naturalWidth,
                maxHeight / imageData.naturalHeight,
                
              );
              this.cropper.setCanvasData({
                width: imageData.naturalWidth * scale,
                height: imageData.naturalHeight * scale
              });
            }
          });
        };
      };
      reader.readAsDataURL(file);
    }

    function displayErrorMessage(elementId, message) {
      const errorElement = document.getElementById(elementId);
      errorElement.textContent = message;
      errorElement.style.display = 'block';
    }

    document.addEventListener('DOMContentLoaded', function() {
      if (cropButton) {
        cropButton.addEventListener("click", function() {
          if (!cropper) return;

          const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800,
            minWidth: 160,
            minHeight: 160,
            maxWidth: 4096,
            maxHeight: 4096,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: "high",
          });

          canvas.toBlob((blob) => {
            const file = new File([blob], `cropped_image_${currentImageIndex}.png`, { type: "image/png" });
            selectedFiles[currentImageIndex] = file;

            const container = document.querySelector(`input[name="newImage${currentImageIndex}"]`).closest('.relative');
            const existingImg = container.querySelector('img');
            
            if (existingImg) {
              existingImg.src = URL.createObjectURL(blob);
            } else {
              const newImg = document.createElement('img');
              newImg.id = `image${currentImageIndex}`;
              newImg.className = 'w-full h-full object-cover rounded-lg';
              newImg.alt = `Product Image ${currentImageIndex + 1}`;
              newImg.src = URL.createObjectURL(blob);

              const plusContainer = container.querySelector('label[class*="cursor-pointer"]');
              if (plusContainer) {
                plusContainer.remove();
              }

              container.insertBefore(newImg, container.firstChild);
            }

           
            let hoverDiv = container.querySelector('.absolute.inset-0');
            if (!hoverDiv) {
              hoverDiv = document.createElement('div');
              hoverDiv.className = 'absolute inset-0 bg-dark-brown bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center';
              container.appendChild(hoverDiv);
            }
            
            hoverDiv.innerHTML = `
              <label class="cursor-pointer p-2 bg-white bg-opacity-80 rounded-full hover:bg-opacity-100 transition-all">
                <input type="file" name="newImage${currentImageIndex}" 
                       class="hidden single-image-input" 
                       accept="image/*"
                       data-index="${currentImageIndex}" 
                       onchange="handleSingleImageUpload(event, ${currentImageIndex})">
                <i class="fas fa-camera text-dark-brown"></i>
              </label>
            `;

            cropModal.style.display = "none";
            cropper.destroy();
            cropper = null;
            document.getElementById('image-error').textContent = '';
          }, "image/png", 0.9);
        });
      }

      if (cancelCrop) {
        cancelCrop.addEventListener("click", function () {
          cropModal.style.display = "none";
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }
          const input = document.querySelector(`input[data-index="${currentImageIndex}"]`);
          if (input) {
            input.value = "";
          }
          selectedFiles[currentImageIndex] = null;

          if (existingImages[currentImageIndex]) {
            const imgElement = document.getElementById(`image${currentImageIndex}`);
            if (imgElement) {
              imgElement.src = `/Uploads/product/${existingImages[currentImageIndex]}`;
            }
          }
        });
      }
    });

    
    function initializeImageContainers() {
      const containers = document.querySelectorAll('.relative.w-24.h-24');
      containers.forEach((container, index) => {
        if (!container.querySelector('img')) {
          const label = document.createElement('label');
          label.className = 'cursor-pointer w-full h-full flex items-center justify-center';
          label.innerHTML = `
            <input type="file" name="newImage${index}" 
                   class="hidden single-image-input" 
                   accept="image/*"
                   data-index="${index}" 
                   onchange="handleSingleImageUpload(event, ${index})">
            <i class="fas fa-plus text-dark-brown text-2xl"></i>
          `;
          container.appendChild(label);
        }
      });
    }

   
    window.addEventListener('load', initializeImageContainers);

    const categorySelect = document.getElementById("product-category");
    const dynamicSizesSection = document.getElementById("dynamic-sizes");
    const sizeInput = document.getElementById("size-input");
    const addSizeBtn = document.getElementById("add-size-btn");
    const sizesList = document.getElementById("sizes-list");
    const sizesInput = document.getElementById("sizes-input");

    function initializeSizes() {
      const selectedOption = categorySelect.options[categorySelect.selectedIndex];
      const categoryName = selectedOption ? selectedOption.getAttribute("data-name") : "";
      if (["Ring", "Necklace", "Bracelet", "Earring"].includes(categoryName)) {
        dynamicSizesSection.style.display = "block";
        updateSizesList();
      }
    }

    categorySelect.addEventListener("change", function () {
      const selectedOption = categorySelect.options[categorySelect.selectedIndex];
      const categoryName = selectedOption ? selectedOption.getAttribute("data-name") : "";
      console.log("Category changed to:", categoryName);
      if (["Ring", "Necklace", "Bracelet", "Earring"].includes(categoryName)) {
        dynamicSizesSection.style.display = "block";
        console.log("Showing dynamic sizes section for:", categoryName);
      } else {
        dynamicSizesSection.style.display = "none";
        selectedSizes = [];
        updateSizesList();
        console.log("Hiding dynamic sizes section");
      }
    });

    addSizeBtn.addEventListener("click", function () {
      const size = sizeInput.value.trim();
      if (size === "") {
        displayErrorMessage("sizes-error", "Please enter a size");
        return;
      }

      const sizeRegex = /^[0-9]+(\.[0-9]+)?(in)?$/;
      if (!sizeRegex.test(size)) {
        displayErrorMessage("sizes-error", "Invalid size format. Use numbers optionally followed by 'in' (e.g., 6, 16in, 1.5in)");
        return;
      }
      

      if (!selectedSizes.includes(size)) {
        selectedSizes.push(size);
        updateSizesList();
        console.log("Size added:", size);
      }
      sizeInput.value = "";
    });

    function updateSizesList() {
      sizesList.innerHTML = "";
      selectedSizes.forEach((size, index) => {
        const sizeTag = document.createElement("div");
        sizeTag.classList.add("size-tag");
        sizeTag.innerHTML = `
          <span>${size}</span>
          <span class="remove-size">×</span>
        `;
        sizeTag.querySelector(".remove-size").addEventListener("click", () => {
          selectedSizes.splice(index, 1);
          updateSizesList();
          console.log("Size removed:", size);
        });
        sizesList.appendChild(sizeTag);
      });
      sizesInput.value = JSON.stringify(selectedSizes);
    }

    form.addEventListener("submit", async function (event) {
      event.preventDefault();

      if (isSubmitting) return;
      isSubmitting = true;

      const submitButton = document.getElementById("submitButton");
      submitButton.disabled = true;
      submitButton.innerHTML = "Processing...";

      if (!validateForm()) {
        isSubmitting = false;
        submitButton.disabled = false;
        submitButton.innerHTML = "Update Product";
        return;
      }

      try {
        const formData = new FormData();

        // Append form fields
        formData.append("productName", document.getElementById("name").value);
        formData.append("description", document.getElementById("description").value);
        formData.append("category", document.getElementById("product-category").value);
        formData.append("regularPrice", document.getElementById("amount").value);
        formData.append("salePrice", document.getElementById("salesAmount").value);
        formData.append("quantity", document.getElementById("stock").value);
        formData.append("featured", document.querySelector('input[name="featured"]:checked').value);
        formData.append("new", document.querySelector('input[name="new"]:checked').value);
        formData.append("sizes", document.getElementById("sizes-input").value);

        
        existingImages.forEach((img, index) => {
          if (img) {
            formData.append(`existingImages[${index}]`, img);
          }
        });

        
        selectedFiles.forEach((file, index) => {
          if (file) {
            formData.append("images", file);
          }
        });

        const response = await fetch(`/admin/edit-product/<%= product._id %>`, {
          method: "POST",
          body: formData,
          headers: {
            'Accept': 'application/json'
          }
        });

        let data;
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          data = await response.json();
        } else {
          throw new Error("Server returned non-JSON response. Please try again.");
        }

        if (!response.ok) {
          if (data.errors) {
            Object.entries(data.errors).forEach(([field, message]) => {
              displayErrorMessage(`${field}-error`, message);
            });
            throw new Error("Validation failed");
          }
          throw new Error(data.message || "Failed to update product");
        }

        Swal.fire({
          icon: "success",
          title: "Success",
          text: data.message,
          timer: 2000,
          showConfirmButton: false,
        }).then(() => {
          window.location.href = data.redirect || "/admin/product";
        });
      } catch (error) {
        console.error("Submission error:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: error.message || "An error occurred while updating the product. Please try again.",
        });
      } finally {
        isSubmitting = false;
        submitButton.disabled = false;
        submitButton.innerHTML = "Update Product";
      }
    });

    function validateForm() {
      console.log("Validating form");
      clearErrorMessages();

      const name = document.getElementById("name").value.trim();
      const description = document.getElementById("description").value.trim();
      const category = document.getElementById("product-category").value.trim();
      const amount = document.getElementById("amount").value.trim();
      const salesAmount = document.getElementById("salesAmount").value.trim();
      const stock = document.getElementById("stock").value.trim();
      const featuredSelected = document.querySelector('input[name="featured"]:checked');
      const newSelected = document.querySelector('input[name="new"]:checked');

      let isValid = true;

      if (name === "") {
        displayErrorMessage("name-error", "Please enter a product name");
        isValid = false;
        console.log("Validation failed: Empty name");
      } else if (!/^[A-Z][a-zA-Z0-9\s]*$/.test(name)) {
        displayErrorMessage("name-error", "Product name should start with a capital letter and contain only alphabets and numbers");
        isValid = false;
        console.log("Validation failed: Invalid name format");
      }

      if (category === "") {
        displayErrorMessage("category-error", "Please select a category");
        isValid = false;
        console.log("Validation failed: No category selected");
      }

      if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
        console.log("Validation failed: Empty description");
      } else if (description.length < 10) {
        displayErrorMessage("description-error", "Description should be at least 10 characters long");
        isValid = false;
        console.log("Validation failed: Description too short");
      }

      const allowedTypes = ["image/jpeg", "image/png", "image/webp"];
      const currentImages = existingImages.map((img, index) => selectedFiles[index] || img).filter(Boolean);
      if (currentImages.length !== 3) {
        displayErrorMessage("image-error", "Please ensure exactly three images are present");
        isValid = false;
        console.log("Validation failed: Incorrect number of images", currentImages.length);
      } else if (selectedFiles.some(file => file && !allowedTypes.includes(file.type))) {
        displayErrorMessage("image-error", "Only JPG, PNG, or WEBP files are allowed");
        isValid = false;
        console.log("Validation failed: Invalid image types");
      }

      if (salesAmount && parseFloat(salesAmount) >= parseFloat(amount)) {
        displayErrorMessage("salesAmount-error", "Sale price must be less than regular price");
        isValid = false;
        console.log("Validation failed: Invalid sales amount");
      }

      if (amount === "" || isNaN(amount) || parseFloat(amount) <= 0) {
        displayErrorMessage("amount-error", "Enter a valid amount greater than 0");
        isValid = false;
        console.log("Validation failed: Invalid amount");
      }

      if (stock === "" || !Number.isInteger(Number(stock)) || parseInt(stock) < 0) {
        displayErrorMessage("stock-error", "Enter a valid stock quantity (0 or more)");
        isValid = false;
        console.log("Validation failed: Invalid stock");
      }

      if (!featuredSelected) {
        displayErrorMessage("featured-error", "Please select featured status");
        isValid = false;
        console.log("Validation failed: Missing featured status");
      }

      if (!newSelected) {
        displayErrorMessage("new-error", "Please select new product status");
        isValid = false;
        console.log("Validation failed: Missing new status");
      }

      console.log("Form validation result:", isValid);
      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      console.log("Displaying error message for", elementId, ":", message);
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessages() {
      console.log("Clearing error messages");
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
      });
    }

    window.addEventListener("load", initializeSizes);
  </script>
</body>

</html>