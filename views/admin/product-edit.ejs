<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Jewelry Product - LUME Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Jost:wght@400;500;600&family=Aboreto&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="/css/admin/product.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">

</head>
<body>
  <div class="bg-light-bg p-6 min-h-screen">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-5xl mx-auto">
      <h1 class="text-2xl font-aboreto text-dark-brown mb-6 text-center uppercase letter-spacing-1-5">Edit Product</h1>

      <form id="editProductForm" enctype="multipart/form-data" class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="md:col-span-1">
          <label class="block mb-2 font-jost text-dark-brown font-medium text-sm">Product Images:</label>
          <div class="flex gap-4">
            <% for(let i=0; i < 3; i++) { %>
              <div class="image-container">
                <!-- Existing Image Display -->
                <% if (product.productImage[i]) { %>
                  <img src="/Uploads/product/<%= product.productImage[i] %>"
                       id="image<%= i %>"
                       alt="Product Image <%= i + 1 %>">
                  <div class="hover-overlay">
                    <label class="upload-label">
                      <input type="file" name="newImage<%= i %>" 
                             class="hidden single-image-input" 
                             accept="image/*"
                             data-index="<%= i %>" 
                             onchange="handleSingleImageUpload(event, <%= i %>)">
                      <i class="fas fa-camera upload-icon"></i>
                    </label>
                  </div>
                <% } else { %>
                  <label class="cursor-pointer w-full h-full flex items-center justify-center">
                    <input type="file" name="newImage<%= i %>" 
                           class="hidden single-image-input" 
                           accept="image/*"
                           data-index="<%= i %>" 
                           onchange="handleSingleImageUpload(event, <%= i %>)">
                    <i class="fas fa-plus plus-icon"></i>
                  </label>
                <% } %>
              </div>
            <% } %>
          </div>
          <p class="form-hint mt-2 text-xs text-gray-500">Click to change images. Recommended: 800×800px, JPG/PNG</p>
          <div id="image-error" class="error-message text-red-500 text-sm mt-1"></div>
        </div>

        <div id="cropModal" class="fixed inset-0 bg-dark-brown bg-opacity-50 flex justify-center items-center z-50 hidden">
          <div class="modal-content">
            <h3 class="text-dark-brown text-xl mb-4 font-jost">Crop Image</h3>
            <div class="crop-image-container">
              <img id="cropImage">
            </div>
            <div class="modal-footer">
              <button type="button" id="cropButton" class="bg-dark-brown text-white">Save</button>
              <button type="button" id="cancelCrop" class="bg-border-color text-dark-brown">Cancel</button>
            </div>
          </div>
        </div>

        <div class="md:col-span-1 grid grid-cols-1 gap-4">
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Product Name:</label>
            <input type="text" name="productName" id="productName"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              value="<%= product.productName %>">
            <div id="productName-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Product Description:</label>
            <textarea name="description" id="description"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              rows="5"><%= product.description %></textarea>
            <div id="description-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Category:</label>
            <select name="category" id="product-category"
              class="w-full p-2 border-b border-border-color bg-white text-dark-brown font-jost focus:border-dark-brown outline-none">
              <option value="">Select category</option>
              <% if (typeof categories !== 'undefined' && categories.length > 0) { %>
                <% categories.forEach(function(category) { %>
                  <option value="<%= category._id %>" <%= (product.category && product.category._id.toString() === category._id.toString()) ? 'selected' : '' %>
                    style="color: #291d0e;" data-name="<%= category.name %>">
                    <%= category.name %>
                  </option>
                <% }); %>
              <% } else { %>
                <option value="" disabled>No categories available</option>
              <% } %>
            </select>
            <div id="category-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div id="dynamic-sizes" class="form-group">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Sizes and Quantities:</label>
            <div class="flex gap-2 mb-2">
              <input type="text" id="size-input"
                class="w-1/2 p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
                placeholder="Enter size (e.g., 6in)">
              <input type="number" id="size-quantity-input"
                class="w-1/2 p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
                placeholder="Quantity" min="0">
              <button type="button" id="add-size-btn"
                class="bg-dark-brown text-white px-4 py-2 rounded font-jost hover:bg-olive-green transition-all">Add</button>
            </div>
            <div id="sizes-list" class="flex flex-wrap gap-2"></div>
            <input type="hidden" name="sizes" id="sizes-input">
            <div id="sizes-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Regular Amount (₹):</label>
            <input type="number" name="regularPrice" id="regularPrice"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              min="0" step="0.01" value="<%= product.regularPrice %>">
            <div id="regularPrice-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Sales Amount (₹):</label>
            <input type="number" name="salePrice" id="salePrice"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              min="0" step="0.01" value="<%= product.salePrice %>">
            <div id="salePrice-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div>
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Stock Count:</label>
            <input type="number" name="quantity" id="quantity"
              class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
              min="0" value="<%= product.quantity %>">
            <div id="quantity-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div class="flex flex-col">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Featured:</label>
            <div class="flex gap-4">
              <label class="font-jost text-dark-brown"><input type="radio" name="featured" value="yes"
                  class="mr-1 accent-dark-brown" <%= product.featured ? 'checked' : '' %>> Yes</label>
              <label class="font-jost text-dark-brown"><input type="radio" name="featured" value="no"
                  class="mr-1 accent-dark-brown" <%= !product.featured ? 'checked' : '' %>> No</label>
            </div>
            <div id="featured-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div class="flex flex-col">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">New Product:</label>
            <div class="flex gap-4">
              <label class="font-jost text-dark-brown"><input type="radio" name="new" value="yes"
                  class="mr-1 accent-dark-brown" <%= product.new ? 'checked' : '' %>> Yes</label>
              <label class="font-jost text-dark-brown"><input type="radio" name="new" value="no"
                  class="mr-1 accent-dark-brown" <%= !product.new ? 'checked' : '' %>> No</label>
            </div>
            <div id="new-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
          <div class="flex flex-col">
            <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">
              <input type="checkbox" id="enable-offer" class="mr-1 accent-dark-brown" <%= product.productOffer && product.productOffer.active ? 'checked' : '' %>> Enable Product Offer
            </label>
            <div id="offer-form" class="hidden mt-2 grid gap-2">
              <div>
                <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Discount Type:</label>
                <select id="discount-type" class="w-full p-2 border-b border-border-color bg-white text-dark-brown font-jost focus:border-dark-brown outline-none">
                  <option value="percentage" <%= product.productOffer && product.productOffer.discountType === 'percentage' ? 'selected' : '' %>>Percentage</option>
                  <option value="flat" <%= product.productOffer && product.productOffer.discountType === 'flat' ? 'selected' : '' %>>Flat</option>
                </select>
              </div>
              <div>
                <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Discount Value:</label>
                <input type="number" id="discount-value"
                  class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
                  min="0" step="0.01" placeholder="e.g., 10 for 10% or ₹10"
                  value="<%= product.productOffer && product.productOffer.discountValue ? product.productOffer.discountValue : '' %>">
                <div id="discount-value-error" class="error-message text-dark-brown text-sm mt-1"></div>
              </div>
              <div>
                <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">Start Date:</label>
                <input type="date" id="start-date"
                  class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
                  value="<%= product.productOffer && product.productOffer.startDate ? product.productOffer.startDate.toISOString().split('T')[0] : '' %>">
                <div id="start-date-error" class="error-message text-dark-brown text-sm mt-1"></div>
              </div>
              <div>
                <label class="block mb-1 font-jost text-dark-brown font-medium text-sm">End Date:</label>
                <input type="date" id="end-date"
                  class="w-full p-2 border-b border-border-color bg-transparent text-dark-brown font-jost focus:border-dark-brown outline-none"
                  value="<%= product.productOffer && product.productOffer.endDate ? product.productOffer.endDate.toISOString().split('T')[0] : '' %>">
                <div id="end-date-error" class="error-message text-dark-brown text-sm mt-1"></div>
              </div>
            </div>
            <div id="offer-error" class="error-message text-dark-brown text-sm mt-1"></div>
          </div>
        </div>

        <div class="md:col-span-2 flex justify-center">
          <button type="submit" id="submitButton"
            class="bg-dark-brown text-white px-6 py-2 rounded-lg font-jost font-medium uppercase letter-spacing-0.8 hover:bg-olive-green hover:-translate-y-0.5 transition-all mt-5">
            Update Product
          </button>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
  <script>
    let cropper = null;
    let currentImageIndex = 0;
    let selectedFiles = Array(3).fill(null);
    let existingImages = <%- JSON.stringify(product.productImage || []) %>;
    let selectedSizes = <%- JSON.stringify(product.sizes || []) %>;
    let productOffer = <%- JSON.stringify(product.productOffer || { active: false }) %>;
    const cropModal = document.getElementById("cropModal");
    const cropImage = document.getElementById("cropImage");
    const cropButton = document.getElementById("cropButton");
    const cancelCrop = document.getElementById("cancelCrop");
    const form = document.getElementById("editProductForm");
    const enableOfferCheckbox = document.getElementById("enable-offer");
    const offerForm = document.getElementById("offer-form");
    let isSubmitting = false;
    let editIndex = null;

    function handleSingleImageUpload(event, index) {
      const file = event.target.files[0];
      if (!file) return;

      if (!["image/jpeg", "image/png", "image/webp"].includes(file.type)) {
        displayErrorMessage("image-error", "Only JPG, PNG, or WEBP files are allowed");
        return;
      }

      if (file.size > 5 * 1024 * 1024) {
        displayErrorMessage("image-error", "Image size must be less than 5MB");
        return;
      }

      currentImageIndex = index;
      selectedFiles[index] = file;

      const reader = new FileReader();
      reader.onload = function(e) {
        cropImage.src = e.target.result;
        cropModal.style.display = "flex";

        if (cropper) {
          cropper.destroy();
        }

        cropImage.onload = function() {
          cropper = new Cropper(cropImage, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 0.8,
            background: false,
            zoomable: true,
            minCropBoxWidth: 160,
            minCropBoxHeight: 160,
            responsive: true,
            restore: false,
            checkCrossOrigin: false,
            modal: true,
            guides: true,
            highlight: true,
            cropBoxMovable: true,
            cropBoxResizable: true,
            toggleDragModeOnDblclick: false,
            ready: function() {
              const maxHeight = window.innerHeight * 0.5;
              const maxWidth = window.innerWidth * 0.9;
              const imageData = this.cropper.getImageData();
              const scale = Math.min(maxWidth / imageData.naturalWidth, maxHeight / imageData.naturalHeight);
              this.cropper.setCanvasData({
                width: imageData.naturalWidth * scale,
                height: imageData.naturalHeight * scale
              });
            }
          });
        };
      };
      reader.readAsDataURL(file);
    }

    cropButton.addEventListener("click", function() {
      if (!cropper) return;

      const canvas = cropper.getCroppedCanvas({
        width: 800,
        height: 800,
        minWidth: 160,
        minHeight: 160,
        maxWidth: 4096,
        maxHeight: 4096,
        imageSmoothingEnabled: true,
        imageSmoothingQuality: "high",
      });

      canvas.toBlob((blob) => {
        const file = new File([blob], `cropped_image_${currentImageIndex}.png`, { type: "image/png" });
        selectedFiles[currentImageIndex] = file;

        const container = document.querySelector(`input[name="newImage${currentImageIndex}"]`).closest('.image-container');
        let img = container.querySelector('img');
        if (!img) {
          img = document.createElement('img');
          img.id = `image${currentImageIndex}`;
          img.alt = `Product Image ${currentImageIndex + 1}`;
          container.insertBefore(img, container.firstChild);
        }
        img.src = URL.createObjectURL(blob);
        img.className = 'w-full h-full object-cover rounded-lg';

        const plusLabel = container.querySelector('label[class*="cursor-pointer"]');
        if (plusLabel) plusLabel.remove();

        let hoverOverlay = container.querySelector('.hover-overlay');
        if (!hoverOverlay) {
          hoverOverlay = document.createElement('div');
          hoverOverlay.className = 'hover-overlay';
          container.appendChild(hoverOverlay);
        }
        hoverOverlay.innerHTML = `
          <label class="upload-label">
            <input type="file" name="newImage${currentImageIndex}" 
                   class="hidden single-image-input" 
                   accept="image/*"
                   data-index="${currentImageIndex}" 
                   onchange="handleSingleImageUpload(event, ${currentImageIndex})">
            <i class="fas fa-camera upload-icon"></i>
          </label>
        `;

        cropModal.style.display = "none";
        cropper.destroy();
        cropper = null;
        document.getElementById('image-error').textContent = '';
      }, "image/png", 0.9);
    });

    cancelCrop.addEventListener("click", function() {
      cropModal.style.display = "none";
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      const input = document.querySelector(`input[data-index="${currentImageIndex}"]`);
      if (input) input.value = "";
      selectedFiles[currentImageIndex] = null;

      if (existingImages[currentImageIndex]) {
        const img = document.getElementById(`image${currentImageIndex}`);
        if (img) img.src = `/Uploads/product/${existingImages[currentImageIndex]}`;
      } else {
        const container = document.querySelector(`input[name="newImage${currentImageIndex}"]`).closest('.image-container');
        const img = container.querySelector('img');
        if (img) img.remove();
        if (!container.querySelector('label[class*="cursor-pointer"]')) {
          const label = document.createElement('label');
          label.className = 'cursor-pointer w-full h-full flex items-center justify-center';
          label.innerHTML = `
            <input type="file" name="newImage${currentImageIndex}" 
                   class="hidden single-image-input" 
                   accept="image/*"
                   data-index="${currentImageIndex}" 
                   onchange="handleSingleImageUpload(event, ${currentImageIndex})">
            <i class="fas fa-plus plus-icon"></i>
          `;
          container.appendChild(label);
        }
      }
    });

    function initializeImageContainers() {
      const containers = document.querySelectorAll('.image-container');
      containers.forEach((container, index) => {
        if (!container.querySelector('img') && !container.querySelector('label[class*="cursor-pointer"]')) {
          const label = document.createElement('label');
          label.className = 'cursor-pointer w-full h-full flex items-center justify-center';
          label.innerHTML = `
            <input type="file" name="newImage${index}" 
                   class="hidden single-image-input" 
                   accept="image/*"
                   data-index="${index}" 
                   onchange="handleSingleImageUpload(event, ${index})">
            <i class="fas fa-plus plus-icon"></i>
          `;
          container.appendChild(label);
        }
      });
    }

    const categorySelect = document.getElementById("product-category");
    const dynamicSizesSection = document.getElementById("dynamic-sizes");
    const sizeInput = document.getElementById("size-input");
    const sizeQuantityInput = document.getElementById("size-quantity-input");
    const addSizeBtn = document.getElementById("add-size-btn");
    const sizesList = document.getElementById("sizes-list");
    const sizesInput = document.getElementById("sizes-input");
    const stockInput = document.getElementById("quantity");

    function initializeSizes() {
      const selectedOption = categorySelect.options[categorySelect.selectedIndex];
      const categoryName = selectedOption ? selectedOption.getAttribute("data-name") : "";
      // Always show sizes if product already has sizes
      if (selectedSizes.length > 0) {
        dynamicSizesSection.style.display = "block";
        updateSizesList();
      } else if (["Ring", "Necklace", "Bracelet", "Earring"].includes(categoryName)) {
        dynamicSizesSection.style.display = "block";
        updateSizesList();
      }
      // Initialize offer form visibility
      if (enableOfferCheckbox.checked) {
        offerForm.classList.remove("hidden");
      }
    }

    categorySelect.addEventListener("change", function() {
      const selectedOption = categorySelect.options[categorySelect.selectedIndex];
      const categoryName = selectedOption ? selectedOption.getAttribute("data-name") : "";
      console.log("Category changed to:", categoryName);
      if (["Ring", "Necklace", "Bracelet", "Earring"].includes(categoryName)) {
        dynamicSizesSection.style.display = "block";
        console.log("Showing dynamic sizes section for:", categoryName);
      } else {
        dynamicSizesSection.style.display = "none";
        selectedSizes = [];
        updateSizesList();
        console.log("Hiding dynamic sizes section");
      }
    });

    function updateSizesList() {
      sizesList.innerHTML = "";
      let totalQuantity = 0;

      selectedSizes.forEach((item, index) => {
        const sizeTag = document.createElement("div");
        sizeTag.classList.add("size-tag");
        sizeTag.innerHTML = `
          <span class="size-value">${item.size} (${item.quantity})</span>
          <span class="remove-size">×</span>
        `;
        // Edit on click
        sizeTag.querySelector(".size-value").addEventListener("click", () => {
          sizeInput.value = item.size;
          sizeQuantityInput.value = item.quantity;
          editIndex = index;
          addSizeBtn.textContent = "Update";
        });
        // Remove
        sizeTag.querySelector(".remove-size").addEventListener("click", () => {
          selectedSizes.splice(index, 1);
          updateSizesList();
          if (editIndex === index) {
            sizeInput.value = "";
            sizeQuantityInput.value = "";
            editIndex = null;
            addSizeBtn.textContent = "Add";
          }
        });
        sizesList.appendChild(sizeTag);
        totalQuantity += Number(item.quantity) || 0;
      });

      stockInput.value = totalQuantity > 0 ? totalQuantity : 0;
      sizesInput.value = JSON.stringify(selectedSizes);
      console.log("Total quantity updated:", totalQuantity);
    }

    addSizeBtn.addEventListener("click", function() {
      const size = sizeInput.value.trim();
      const quantity = parseInt(sizeQuantityInput.value.trim() || 0);

      if (size === "") {
        displayErrorMessage("sizes-error", "Please enter a size");
        return;
      }

      if (isNaN(quantity) || quantity < 0) {
        displayErrorMessage("sizes-error", "Please enter a valid quantity (0 or more)");
        return;
      }

      const sizeRegex = /^[0-9]+(\.[0-9]+)?(in)?$/;
      if (!sizeRegex.test(size)) {
        displayErrorMessage("sizes-error", "Invalid size format. Use numbers optionally followed by 'in' (e.g., 6, 16in, 1.5in)");
        return;
      }

      if (editIndex !== null) {
        // Prevent duplicate size on update
        if (selectedSizes.some((item, idx) => item.size === size && idx !== editIndex)) {
          displayErrorMessage("sizes-error", "This size is already added");
          return;
        }
        selectedSizes[editIndex] = { size, quantity };
        editIndex = null;
        addSizeBtn.textContent = "Add";
      } else {
        if (!selectedSizes.some(item => item.size === size)) {
          selectedSizes.push({ size, quantity });
        } else {
          displayErrorMessage("sizes-error", "This size is already added");
          return;
        }
      }
      updateSizesList();
      sizeInput.value = "";
      sizeQuantityInput.value = "";
    });

    enableOfferCheckbox.addEventListener("change", function() {
      console.log("Enable offer checkbox changed:", enableOfferCheckbox.checked);
      if (enableOfferCheckbox.checked) {
        offerForm.classList.remove("hidden");
        productOffer.active = true;
      } else {
        offerForm.classList.add("hidden");
        productOffer = { active: false };
      }
    });

    form.addEventListener("submit", async function(event) {
      event.preventDefault();

      if (isSubmitting) return;
      isSubmitting = true;

      const submitButton = document.getElementById("submitButton");
      submitButton.disabled = true;
      submitButton.innerHTML = "Processing...";

      if (!validateForm()) {
        isSubmitting = false;
        submitButton.disabled = false;
        submitButton.innerHTML = "Update Product";
        return;
      }

      try {
        const formData = new FormData();

        formData.append("productName", document.getElementById("productName").value.trim());
        formData.append("description", document.getElementById("description").value.trim());
        formData.append("category", document.getElementById("product-category").value.trim());
        formData.append("regularPrice", document.getElementById("regularPrice").value);
        formData.append("salePrice", document.getElementById("salePrice").value || document.getElementById("regularPrice").value);
        formData.append("quantity", document.getElementById("quantity").value);
        formData.append("featured", document.querySelector('input[name="featured"]:checked').value);
        formData.append("new", document.querySelector('input[name="new"]:checked').value);
        formData.append("sizes", document.getElementById("sizes-input").value);

        if (enableOfferCheckbox.checked) {
          productOffer.discountType = document.getElementById("discount-type").value;
          productOffer.discountValue = parseFloat(document.getElementById("discount-value").value);
          productOffer.startDate = document.getElementById("start-date").value;
          productOffer.endDate = document.getElementById("end-date").value;
        }
        formData.append("productOffer", JSON.stringify(productOffer));

        existingImages.forEach((img, index) => {
          if (img && !selectedFiles[index]) {
            formData.append(`existingImages[${index}]`, img);
          }
        });

        selectedFiles.forEach((file, index) => {
          if (file) {
            formData.append("images", file);
          }
        });

        const response = await fetch(`/admin/edit-product/<%= product._id %>`, {
          method: "POST",
          body: formData,
          headers: { 'Accept': 'application/json' }
        });

        let data;
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          data = await response.json();
        } else {
          throw new Error("Server returned non-JSON response. Please try again.");
        }

        if (!response.ok) {
          if (data.errors) {
            Object.entries(data.errors).forEach(([field, message]) => {
              displayErrorMessage(`${field}-error`, message);
            });
            throw new Error("Validation failed");
          }
          throw new Error(data.message || "Failed to update product");
        }

        Swal.fire({
          icon: "success",
          title: "Success",
          text: data.message,
          timer: 2000,
          showConfirmButton: false,
        }).then(() => {
          window.location.href = data.redirect || "/admin/product";
        });
      } catch (error) {
        console.error("Submission error:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: error.message || "An error occurred while updating the product. Please try again.",
        });
      } finally {
        isSubmitting = false;
        submitButton.disabled = false;
        submitButton.innerHTML = "Update Product";
      }
    });

    function validateForm() {
      console.log("Validating form");
      clearErrorMessages();

      const productName = document.getElementById("productName").value.trim();
      const description = document.getElementById("description").value.trim();
      const category = document.getElementById("product-category").value.trim();
      const regularPrice = document.getElementById("regularPrice").value.trim();
      const salePrice = document.getElementById("salePrice").value.trim();
      const quantity = document.getElementById("quantity").value.trim();
      const featuredSelected = document.querySelector('input[name="featured"]:checked');
      const newSelected = document.querySelector('input[name="new"]:checked');
      const enableOffer = enableOfferCheckbox.checked;
      const discountType = document.getElementById("discount-type")?.value;
      const discountValue = document.getElementById("discount-value")?.value;
      const startDate = document.getElementById("start-date")?.value;
      const endDate = document.getElementById("end-date")?.value;

      let isValid = true;

      if (productName === "") {
        displayErrorMessage("productName-error", "Please enter a product name");
        isValid = false;
        console.log("Validation failed: Empty product name");
      } else if (!/^[A-Z][a-zA-Z0-9\s]*$/.test(productName)) {
        displayErrorMessage("productName-error", "Product name should start with a capital letter and contain only alphabets and numbers");
        isValid = false;
        console.log("Validation failed: Invalid product name format");
      }

      if (category === "") {
        displayErrorMessage("category-error", "Please select a category");
        isValid = false;
        console.log("Validation failed: No category selected");
      }

      if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
        console.log("Validation failed: Empty description");
      } else if (description.length < 10) {
        displayErrorMessage("description-error", "Description should be at least 10 characters long");
        isValid = false;
        console.log("Validation failed: Description too short");
      }

      const allowedTypes = ["image/jpeg", "image/png", "image/webp"];
      const currentImages = existingImages.map((img, index) => selectedFiles[index] || img).filter(Boolean);
      if (currentImages.length !== 3) {
        displayErrorMessage("image-error", "Please ensure exactly three images are present");
        isValid = false;
        console.log("Validation failed: Incorrect number of images", currentImages.length);
      } else if (selectedFiles.some(file => file && !allowedTypes.includes(file.type))) {
        displayErrorMessage("image-error", "Only JPG, PNG, or WEBP files are allowed");
        isValid = false;
        console.log("Validation failed: Invalid image types");
      }

      if (salePrice && parseFloat(salePrice) > parseFloat(regularPrice)) {
        displayErrorMessage("salePrice-error", "Sale price must be less than or equal to regular price");
        isValid = false;
        console.log("Validation failed: Invalid sale price");
      }

      if (regularPrice === "" || isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
        displayErrorMessage("regularPrice-error", "Enter a valid amount greater than 0");
        isValid = false;
        console.log("Validation failed: Invalid regular price");
      }

      if (quantity === "" || !Number.isInteger(Number(quantity)) || parseInt(quantity) < 0) {
        displayErrorMessage("quantity-error", "Enter a valid stock quantity (0 or more)");
        isValid = false;
        console.log("Validation failed: Invalid quantity");
      }

      const selectedOption = categorySelect.options[categorySelect.selectedIndex];
      const categoryName = selectedOption ? selectedOption.getAttribute("data-name") : "";
      if (["Ring", "Necklace", "Bracelet", "Earring"].includes(categoryName) && selectedSizes.length === 0) {
        displayErrorMessage("sizes-error", "Please add at least one size with quantity");
        isValid = false;
        console.log("Validation failed: No sizes added");
      } else if (selectedSizes.some(item => item.quantity < 0)) {
        displayErrorMessage("sizes-error", "All size quantities must be 0 or more");
        isValid = false;
        console.log("Validation failed: Invalid size quantities");
      }

      if (!featuredSelected) {
        displayErrorMessage("featured-error", "Please select featured status");
        isValid = false;
        console.log("Validation failed: Missing featured status");
      }

      if (!newSelected) {
        displayErrorMessage("new-error", "Please select new product status");
        isValid = false;
        console.log("Validation failed: Missing new status");
      }

      if (enableOffer) {
        if (!discountType) {
          displayErrorMessage("offer-error", "Please select a discount type");
          isValid = false;
          console.log("Validation failed: Missing discount type");
        }

        if (!discountValue || isNaN(discountValue) || parseFloat(discountValue) < 0) {
          displayErrorMessage("discount-value-error", "Enter a valid discount value (0 or more)");
          isValid = false;
          console.log("Validation failed: Invalid discount value");
        } else if (discountType === "percentage" && parseFloat(discountValue) > 100) {
          displayErrorMessage("discount-value-error", "Percentage discount must be between 0 and 100");
          isValid = false;
          console.log("Validation failed: Invalid percentage discount");
        }

        if (!startDate) {
          displayErrorMessage("start-date-error", "Please select a start date");
          isValid = false;
          console.log("Validation failed: Missing start date");
        }

        if (!endDate) {
          displayErrorMessage("end-date-error", "Please select an end date");
          isValid = false;
          console.log("Validation failed: Missing end date");
        } else if (startDate && endDate && new Date(startDate) >= new Date(endDate)) {
          displayErrorMessage("end-date-error", "End date must be after start date");
          isValid = false;
          console.log("Validation failed: Invalid date range");
        }
      }

      console.log("Form validation result:", isValid);
      return isValid;
    }

    function displayErrorMessage(elementId, message) {
      console.log("Displaying error message for", elementId, ":", message);
      const errorElement = document.getElementById(elementId);
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }

    function clearErrorMessages() {
      console.log("Clearing error messages");
      const errorElements = document.getElementsByClassName("error-message");
      Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
      });
    }

    window.addEventListener("load", initializeSizes);
  </script>
</body>
</html>